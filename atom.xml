<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Megumi</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-04-10T03:39:39.288Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Megumi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringCloud</title>
    <link href="http://example.com/2023/04/10/SpringCloud/"/>
    <id>http://example.com/2023/04/10/SpringCloud/</id>
    <published>2023-04-10T03:21:25.000Z</published>
    <updated>2023-04-10T03:39:39.288Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h1><h2 id="回顾之前的知识"><a href="#回顾之前的知识" class="headerlink" title="回顾之前的知识"></a>回顾之前的知识</h2><ul><li>JavaSE</li><li>数据库</li><li>前端</li><li>Servlet</li><li>Http</li><li>Mybatis</li><li>Spring</li><li>SpringMVC</li><li>SpringBoot</li><li>Dubbo、Zookeeper、分布式基础</li><li>Maven、git</li><li>Ajax、json</li></ul><h2 id="这个阶段应该如何学"><a href="#这个阶段应该如何学" class="headerlink" title="这个阶段应该如何学"></a>这个阶段应该如何学</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">三层架构+MVC</span><br><span class="line"></span><br><span class="line">框架：</span><br><span class="line">    Spring IOC AOP（解决企业开发的复杂性）</span><br><span class="line">  </span><br><span class="line">    SpringBoot ： 自动装配</span><br><span class="line">    </span><br><span class="line">SpringCloud</span><br><span class="line">    </span><br><span class="line">微服务<span class="number">4</span>个核心问题：</span><br><span class="line">    客户端如何访问（负载均衡）</span><br><span class="line">    这么多服务？服务之间如何通信（Http、rpc）</span><br><span class="line">    如何治理这么多服务（注册与发现）</span><br><span class="line">    服务挂了怎么办</span><br><span class="line">   </span><br><span class="line">SpringCloud 生态！</span><br><span class="line">    <span class="number">1.</span> Spring Cloud NetFlix 一站式解决方案</span><br><span class="line">    api 网关 zuul组件</span><br><span class="line">    Feign --HttpClient ----Http通信方式，同步，阻塞</span><br><span class="line">    服务注册与发现：Eureka</span><br><span class="line">    熔断机制：Hystrix</span><br><span class="line">    <span class="number">2018</span>年停止维护</span><br><span class="line">    </span><br><span class="line">    <span class="number">2.</span> Apache Dubbo Zookeeper 半自动，需要整合别人的</span><br><span class="line">    API: 没有，找第三方组件，或者自己实现</span><br><span class="line">        Dubbo：rpc通信框架（基于java的rpc）通信框架</span><br><span class="line">    Zookeeper</span><br><span class="line">        没有：借助Hystrix</span><br><span class="line">        </span><br><span class="line">        Dubbo这个方案并不完善~</span><br><span class="line">            </span><br><span class="line">    <span class="number">3.</span> Spring Cloud Alibaba 一站式解决方案</span><br><span class="line">        </span><br><span class="line">新概念：服务网格~ Server Mesh**</span><br></pre></td></tr></table></figure><h2 id="微服务优缺点"><a href="#微服务优缺点" class="headerlink" title="微服务优缺点"></a>微服务优缺点</h2><h6 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h6><ul><li>单一职责原则</li><li>每个服务足够内聚，足够小，代码容易理解</li><li>开发简单，开发效率</li><li>松耦合，在开发和部署阶段都是独立的</li><li>只是业务逻辑的代码</li></ul><h6 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h6><ul><li>开发人员要处理分布式系统的复杂性</li><li>多服务运维、运维成本</li><li>通信成本</li><li>数据一致性</li><li>集成测试</li><li>性能监控</li></ul><h6 id="NetFlix中文文档"><a href="#NetFlix中文文档" class="headerlink" title="NetFlix中文文档"></a>NetFlix中文文档</h6><p><a href="https://www.springcloud.cc/spring-cloud-netflix.html">https://www.springcloud.cc/spring-cloud-netflix.html</a></p><p><a href="https://springcloud.cc/spring-cloud-dalston.html">https://springcloud.cc/spring-cloud-dalston.html</a></p><h2 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h2><h6 id="版本选择（Greenwich-–用f以上"><a href="#版本选择（Greenwich-–用f以上" class="headerlink" title="版本选择（Greenwich)–用f以上"></a>版本选择（Greenwich)–用f以上</h6><h2 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h2><p>缺少service采用RestTemplate来帮忙做请求</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h2><h6 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h6><ul><li>遵循AP原则</li><li>用于定位服务</li></ul><h6 id="框架图"><a href="#框架图" class="headerlink" title="框架图"></a>框架图</h6><p><img src="C:\Users\Megumi\AppData\Roaming\Typora\typora-user-images\image-20230326175511661.png" alt="image-20230326175511661"></p><ul><li><p>EurekaServer服务注册服务器</p></li><li><p>通过心跳EurekaServer来监控系统中各个微服务是否正常运行</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zane.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span> <span class="comment">// 服务端的启动类，可以接受别人注册进来</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaServer_7001</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurekaServer_7001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span> <span class="comment">#Eureka服务端实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment"># 表示是否像eureka注册中心注册自己</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment"># 如果为false则表示自己为注册中心</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment">#监控页面</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure></li><li><p>默认页面</p><p><img src="C:\Users\Megumi\AppData\Roaming\Typora\typora-user-images\image-20230326181257728.png" alt="image-20230326181257728"></p></li><li><p>服务提供者</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Eureka的配置,服务注册到哪里</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zane.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptProvider_8001</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DeptProvider_8001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>自我保护机制–直接还是等到（hystrix）</p><blockquote><p>某个服务崩了，但是eureka不会理科清理，依旧会对该微服务信息进行保存！</p><p>默认情况下90s注销这个服务，此时非常不安全的</p><p>好死不如赖活着</p></blockquote></li><li><p>服务发现</p></li></ul>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zane.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptProvider_8001</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DeptProvider_8001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zane.springcloud.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zane.springcloud.pojo.Dept;</span><br><span class="line"><span class="keyword">import</span> com.zane.springcloud.service.DeptService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.ServiceInstance;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.DiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DeptService deptService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/dept/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addDept</span><span class="params">(<span class="meta">@RequestBody</span> Dept dept)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deptService.addDept(dept);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/dept/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Dept <span class="title function_">queryDept</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deptService.queryById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/dept/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Dept&gt; <span class="title function_">queryList</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deptService.queryList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/dept/discovery&quot;)</span></span><br><span class="line">    <span class="comment">// 注册竟来的微服务，获取一些消息</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">discovery</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 获取微服务列表的清单</span></span><br><span class="line">        List&lt;String&gt; services = client.getServices();</span><br><span class="line">        System.out.println(<span class="string">&quot;discovery=&gt;services:&quot;</span>+services);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 得到一个具体的微服务信息</span></span><br><span class="line">        List&lt;ServiceInstance&gt; instances = client.getInstances(<span class="string">&quot;SPRINGCLOUD-PROVIDER-DEPT&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(ServiceInstance instance : instances)&#123;</span><br><span class="line">            System.out.println(instance.getHost()+instance.getPort()+instance.getUri()+instance.getServiceId());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.client;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>Eureka集群</p><blockquote><p>Server互相关注</p><p>服务提供者发布到所有的Server</p></blockquote></li><li><p>CAP原则</p><blockquote><p>CAP</p><p>C 强一致性</p><p>A 可用性</p><p>P 分区容错性</p><p>Zookeeper CP </p><p>Eureka AP</p></blockquote></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SpringCloud&quot;&gt;&lt;a href=&quot;#SpringCloud&quot; class=&quot;headerlink&quot; title=&quot;SpringCloud&quot;&gt;&lt;/a&gt;SpringCloud&lt;/h1&gt;&lt;h2 id=&quot;回顾之前的知识&quot;&gt;&lt;a href=&quot;#回顾之前的知识&quot; c</summary>
      
    
    
    
    <category term="分布式" scheme="http://example.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
    <category term="SpringCloud" scheme="http://example.com/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper</title>
    <link href="http://example.com/2023/04/10/Zookeeper/"/>
    <id>http://example.com/2023/04/10/Zookeeper/</id>
    <published>2023-04-10T03:21:25.000Z</published>
    <updated>2023-04-10T03:37:35.214Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h1><h2 id="什么是zookeeper"><a href="#什么是zookeeper" class="headerlink" title="什么是zookeeper"></a>什么是zookeeper</h2><blockquote><p>基于内存的数据库，文件系统数据结构+监听通知机制</p></blockquote><h6 id="文件系统数据结构-六种目录节点"><a href="#文件系统数据结构-六种目录节点" class="headerlink" title="文件系统数据结构-六种目录节点"></a>文件系统数据结构-六种目录节点</h6><ol><li>Persistent 持久化目录节点</li><li>Persistent_sequential 持久化顺序编号目录节点</li><li>Ephemeral 临时目录节点</li><li>Ephemeral_sequntial 临时顺序编号目录节点</li><li>Container 如果底下没有子节点就会被自动清除</li><li>TLL 过了过期时间删除</li></ol><h6 id="监听机制"><a href="#监听机制" class="headerlink" title="监听机制"></a>监听机制</h6><ol><li>如果注册得是对某个节点的监听，则当这个节点被删除，或者被修改时对应的客户端将被通知</li><li>如果注册的是对某个目录的监听，则当这个目录有子节点被创建，或者有子节点被删除，对应的客户端将被通知</li><li>如果注册的是某个目录的递归子节点，则当这个目录下面的任意子节点有目录结构的变化或者根节点有数据变化，对应的客户端将被通知。</li></ol><h6 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h6><ol><li>分布式配置中心</li><li>分布式注册中心</li><li>分布式锁</li><li>分布式队列</li><li>集群选举</li><li>分布式屏障</li><li>发布\订阅</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Zookeeper&quot;&gt;&lt;a href=&quot;#Zookeeper&quot; class=&quot;headerlink&quot; title=&quot;Zookeeper&quot;&gt;&lt;/a&gt;Zookeeper&lt;/h1&gt;&lt;h2 id=&quot;什么是zookeeper&quot;&gt;&lt;a href=&quot;#什么是zookeeper&quot;</summary>
      
    
    
    
    <category term="分布式" scheme="http://example.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
    <category term="Zookeeper" scheme="http://example.com/tags/Zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>消息中间件</title>
    <link href="http://example.com/2023/04/10/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    <id>http://example.com/2023/04/10/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</id>
    <published>2023-04-10T03:21:25.000Z</published>
    <updated>2023-04-10T03:43:33.523Z</updated>
    
    <content type="html"><![CDATA[<h1 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h1><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><h6 id="什么是MQ"><a href="#什么是MQ" class="headerlink" title="什么是MQ"></a>什么是MQ</h6><blockquote><p>message queue，本质是个队列，FIFO先入先出逻辑解耦+物理解耦</p></blockquote><h6 id="为什么要用MQ"><a href="#为什么要用MQ" class="headerlink" title="为什么要用MQ"></a>为什么要用MQ</h6><blockquote><ul><li>流量消峰</li><li>应用解耦</li><li>异步处理（A不用等B，只要B发送一个消息给A）</li></ul></blockquote><h6 id="MQ分类"><a href="#MQ分类" class="headerlink" title="MQ分类"></a>MQ分类</h6><ul><li><p>ActiveMQ</p><blockquote><ol><li>单机吞吐量万级</li><li>时效性ms级，可用性高（主从架构）</li><li>消息可靠性较低的概率丢失</li><li>维护少，高吞吐量少用</li></ol></blockquote></li><li><p>Kafka</p><blockquote><ol><li>百万级吞吐量</li><li>分布式，不会丢数据，不会导致不可用</li><li>队列超过64，支持消息顺序，但是一台代理宕机后，就会产生消息乱序，社区更新慢，相应时间长</li></ol></blockquote></li><li><p>RocketMQ</p><blockquote><ol><li>十万级吞吐量</li><li>分布式，消息可以做到0丢</li><li>支持10亿急别的消息堆积</li><li>支持的客户端语言不多（java，c++）</li></ol></blockquote></li><li><p>RabbitMQ</p><blockquote><ol><li>万级吞吐量</li><li>支持多语言</li><li>社区活跃</li></ol></blockquote></li></ul><h2 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h2><h6 id="四大核心概念"><a href="#四大核心概念" class="headerlink" title="四大核心概念"></a>四大核心概念</h6><ol><li>生产者：发送消息</li><li>交换机：一方面接受来自生产者的消息，另一方面将消息推送到队列中。交换机必须确切知道如何处理他接收到的消息，推送到特定队列、推送到多队列、亦或是把消息丢弃</li><li>队列：大的消息缓存区</li><li>消费者：消费消息</li></ol><h6 id="RabbitMQ工作原理"><a href="#RabbitMQ工作原理" class="headerlink" title="RabbitMQ工作原理"></a>RabbitMQ工作原理</h6><p><img src="C:\Users\Megumi\AppData\Roaming\Typora\typora-user-images\image-20230221133239883.png" alt="image-20230221133239883"></p><ol><li>Broker：接受和分发消息的应用</li><li>Virtual host：出于多租户和安全因素设计的</li><li>Connection：publisher&#x2F;consumer和broker之间的TCP连接</li><li>Channel：Channel作为轻量级的Connection极大减少了操作系统建立TCP connection的开销</li><li>Exchange：到达Broker的第一站，根据分发规则，匹配查询表中的routing key，分发到queue去，常见的类型有direct(point to point),topic(publish-subsrcibe) and fanout(multicast)</li><li>Queue</li><li>Binding: exchange和queue之间的虚拟连接，binding中可以包含routing key，Binding信息被保存到exchange中的查询表</li></ol><h1 id="工作队列"><a href="#工作队列" class="headerlink" title="工作队列"></a>工作队列</h1><h2 id="轮询分发"><a href="#轮询分发" class="headerlink" title="轮询分发"></a>轮询分发</h2><h6 id="抽象类工具"><a href="#抽象类工具" class="headerlink" title="抽象类工具"></a>抽象类工具</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wshen.baoqing.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMqUtils</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Channel <span class="title function_">getChannel</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="keyword">return</span> channel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="启动两个工作线程"><a href="#启动两个工作线程" class="headerlink" title="启动两个工作线程"></a>启动两个工作线程</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wshen.baoqing.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.CancelCallback;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DeliverCallback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Worker01</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> RabbitMqUtils.getChannel();</span><br><span class="line">        <span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumerTag,delivery)-&gt;&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">receivedMessage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(delivery.getBody());</span><br><span class="line">            System.out.println(<span class="string">&quot;接收到的消息是：&quot;</span>+receivedMessage);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">CancelCallback</span> <span class="variable">cancelCallback</span> <span class="operator">=</span> (consumerTag)-&gt;&#123;</span><br><span class="line">            System.out.println(consumerTag+<span class="string">&quot;消费者取消消费接口回调逻辑&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;c2 消费者启动等待消费......&quot;</span>);</span><br><span class="line">        channel.basicConsume(QUEUE_NAME,<span class="literal">true</span>,deliverCallback,cancelCallback);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="启动一个发送线程"><a href="#启动一个发送线程" class="headerlink" title="启动一个发送线程"></a>启动一个发送线程</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wshen.baoqing.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Task01</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> RabbitMqUtils.getChannel();</span><br><span class="line">        channel.queueDeclare(QUEUE_NAME,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNext())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>,QUEUE_NAME,<span class="literal">null</span>,message.getBytes());</span><br><span class="line">            System.out.println(<span class="string">&quot;发送消息完成：&quot;</span>+ message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="消息应答"><a href="#消息应答" class="headerlink" title="消息应答"></a>消息应答</h2><h6 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h6><blockquote><p>消费者再接收到消息，并且处理该消息过后，告诉RabbitMQ它已经处理了，rabbitMQ可以把该消息删除</p></blockquote><h6 id="自动应答"><a href="#自动应答" class="headerlink" title="自动应答"></a>自动应答</h6><blockquote><p>在消息发送是就被认为已经传送成功</p></blockquote><h6 id="消息应答方式"><a href="#消息应答方式" class="headerlink" title="消息应答方式"></a>消息应答方式</h6><ul><li>Channel.basicAck</li><li>Channel.basicNack</li><li>Channel.basicReject(不处理直接丢弃)</li></ul><h6 id="Multiple的解释"><a href="#Multiple的解释" class="headerlink" title="Multiple的解释"></a>Multiple的解释</h6><h6 id="消息重新入队"><a href="#消息重新入队" class="headerlink" title="消息重新入队"></a>消息重新入队</h6><blockquote><p>RabbitMQ未收到消费者的ack确认</p></blockquote><h2 id="RabbitMQ持久化"><a href="#RabbitMQ持久化" class="headerlink" title="RabbitMQ持久化"></a>RabbitMQ持久化</h2><h6 id="队列持久化"><a href="#队列持久化" class="headerlink" title="队列持久化"></a>队列持久化</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h6 id="消息持久化"><a href="#消息持久化" class="headerlink" title="消息持久化"></a>消息持久化</h6><h6 id="不公平分发"><a href="#不公平分发" class="headerlink" title="不公平分发"></a>不公平分发</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">prefetchCount</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">channel.basicQos(prefetchCount);</span><br></pre></td></tr></table></figure><h6 id="预取值"><a href="#预取值" class="headerlink" title="预取值"></a>预取值</h6><blockquote><p>设定缓冲区大小</p></blockquote><h1 id="发布确认"><a href="#发布确认" class="headerlink" title="发布确认"></a>发布确认</h1><blockquote><p>broker发送一个确认给生产者</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">channel.confirmSelect();</span><br></pre></td></tr></table></figure><h6 id="单个确认发布"><a href="#单个确认发布" class="headerlink" title="单个确认发布"></a>单个确认发布</h6><blockquote><p>同步确认发布</p></blockquote><h6 id="批量确认发布"><a href="#批量确认发布" class="headerlink" title="批量确认发布"></a>批量确认发布</h6><blockquote><p>不知道是那条消息发生错误</p></blockquote><h6 id="异步确认发布"><a href="#异步确认发布" class="headerlink" title="异步确认发布"></a>异步确认发布</h6><h1 id="交换机（Exchange）"><a href="#交换机（Exchange）" class="headerlink" title="交换机（Exchange）"></a>交换机（Exchange）</h1><h6 id="交换机类型"><a href="#交换机类型" class="headerlink" title="交换机类型"></a>交换机类型</h6><ol><li>direct</li><li>topic</li><li>headers</li><li>fanout 广播</li></ol><h1 id="死信队列"><a href="#死信队列" class="headerlink" title="死信队列"></a>死信队列</h1><blockquote><p>当消息消费异常时，将消息投入死信队列中。</p><p>保证订单业务消息数据不丢失</p></blockquote><h6 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h6><ol><li>消息TTL过期</li><li>队列达到最大长度</li><li>消息被拒绝</li></ol><p><img src="/image-20230224095234141.png" alt="image-20230224095234141"></p><h1 id="延迟队列"><a href="#延迟队列" class="headerlink" title="延迟队列"></a>延迟队列</h1><blockquote><p>在指定时间到了以后或之前取出和处理</p></blockquote><h1 id="发布确认高级"><a href="#发布确认高级" class="headerlink" title="发布确认高级"></a>发布确认高级</h1><h6 id="回退消息"><a href="#回退消息" class="headerlink" title="回退消息"></a>回退消息</h6><p>mandatory</p><h6 id="备份交换机"><a href="#备份交换机" class="headerlink" title="备份交换机"></a>备份交换机</h6><h1 id="RabbitMQ特性"><a href="#RabbitMQ特性" class="headerlink" title="RabbitMQ特性"></a>RabbitMQ特性</h1><h6 id="幂等性"><a href="#幂等性" class="headerlink" title="幂等性"></a>幂等性</h6><p>设置全局id</p><p>Redis原子性用setnx</p><h6 id="优先级队列"><a href="#优先级队列" class="headerlink" title="优先级队列"></a>优先级队列</h6><h6 id="惰性队列"><a href="#惰性队列" class="headerlink" title="惰性队列"></a>惰性队列</h6><blockquote><p>惰性队列会尽可能的将消息存入磁盘中，而在消</p><p>费者消费到相应的消息时才会被加载到内存中，它的一个重要的设计目标是能够支持更长的队列，即支持</p><p>更多的消息存储。当消费者由于各种各样的原因(比如消费者下线、宕机亦或者是由于维护而关闭等)而致</p><p>使长时间内不能消费消息造成堆积时，惰性队列就很有必要了</p></blockquote><h1 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h1><h6 id="Haproxy-Keepalive"><a href="#Haproxy-Keepalive" class="headerlink" title="Haproxy+Keepalive"></a>Haproxy+Keepalive</h6><h6 id="Federation（网络延迟）-Shovel保证数据可靠"><a href="#Federation（网络延迟）-Shovel保证数据可靠" class="headerlink" title="Federation（网络延迟）+Shovel保证数据可靠"></a>Federation（网络延迟）+Shovel保证数据可靠</h6>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;消息队列&quot;&gt;&lt;a href=&quot;#消息队列&quot; class=&quot;headerlink&quot; title=&quot;消息队列&quot;&gt;&lt;/a&gt;消息队列&lt;/h1&gt;&lt;h2 id=&quot;相关概念&quot;&gt;&lt;a href=&quot;#相关概念&quot; class=&quot;headerlink&quot; title=&quot;相关概念&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="分布式" scheme="http://example.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
    <category term="Message" scheme="http://example.com/tags/Message/"/>
    
  </entry>
  
  <entry>
    <title>知识点</title>
    <link href="http://example.com/2022/07/06/%E9%9D%A2%E8%AF%95/"/>
    <id>http://example.com/2022/07/06/%E9%9D%A2%E8%AF%95/</id>
    <published>2022-07-06T03:21:25.000Z</published>
    <updated>2022-07-12T09:59:50.657Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h1><h2 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h2><h3 id="String、StringBuilder、StringBuffer的区别"><a href="#String、StringBuilder、StringBuffer的区别" class="headerlink" title="String、StringBuilder、StringBuffer的区别"></a>String、StringBuilder、StringBuffer的区别</h3><blockquote><p><code>StringBuilder</code>: 可将字符串缓冲区安全地用于多个线程。可以在必要时对这些方法进行同步，因此任意特定实例上的所有操作就好像是以串行顺序发生的，该顺序与所涉及的每个线程进行的方法调用顺序一致。</p><p><code>StringBuilder</code>: 不保证同步，所以线程不安全</p></blockquote><h3 id="Sleep和wait的区别"><a href="#Sleep和wait的区别" class="headerlink" title="Sleep和wait的区别"></a>Sleep和wait的区别</h3><blockquote><p><code>Sleep</code>: 释放cpu不释放锁</p><p><code>wait</code>: 释放cpu也释放锁，并且要等待notify() 或者 notifyAll() 才会被唤醒</p></blockquote><blockquote><p><code>线程五种状态</code>：新建（new）、就绪（Runnable）、阻塞（Blocked）、运行（Running）、死亡（Dead）</p></blockquote><h2 id="如何进行深克隆"><a href="#如何进行深克隆" class="headerlink" title="如何进行深克隆"></a>如何进行深克隆</h2><blockquote><p><code>原型模式</code>：由一个原型new出所有类</p><p><code>浅克隆</code>：实现Cloneable接口</p><p><code>深克隆</code>：序列化</p></blockquote><blockquote><p><code>24种设计模式</code>：</p></blockquote><h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><blockquote><p><code>ThreadLocal</code> 适用于每个线程需要自己独立的实例且该实例需要在多个方法中被使用，也即变量在线程间隔离而在方法或类间共享的场景</p></blockquote><h6 id="与Synchronized的区别"><a href="#与Synchronized的区别" class="headerlink" title="与Synchronized的区别"></a>与Synchronized的区别</h6><blockquote><p>一个适用于数据隔离，一个适用于数据共享</p><p><code>Synchronized</code>利用了锁的机制，而ThreadLocal是通过提供副本，保证隔离，<code>ThreadLocal</code>作为<code>Thread</code>中的<code>ThreadLocalMap</code>的Key，而ThreadLocalMap又是每个线程独有的，就能保证取到的value不同</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadLocalDemo</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;String&gt; localVar = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;String&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="set方法"><a href="#set方法" class="headerlink" title="set方法"></a>set方法</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(T value)</span> &#123;</span><br><span class="line">       <span class="comment">//1、获取当前线程</span></span><br><span class="line">       <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">       <span class="comment">//2、获取线程中的属性 threadLocalMap ,如果threadLocalMap 不为空，</span></span><br><span class="line">       <span class="comment">//则直接更新要保存的变量值，否则创建threadLocalMap，并赋值</span></span><br><span class="line">       <span class="type">ThreadLocalMap</span> <span class="variable">map</span> <span class="operator">=</span> getMap(t);</span><br><span class="line">       <span class="keyword">if</span> (map != <span class="literal">null</span>)</span><br><span class="line">           map.set(<span class="built_in">this</span>, value);</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">           <span class="comment">// 初始化thradLocalMap 并赋值</span></span><br><span class="line">           createMap(t, value);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h6 id="ThreadLocalMap-–-作为Thread-Local的静态内部类"><a href="#ThreadLocalMap-–-作为Thread-Local的静态内部类" class="headerlink" title="ThreadLocalMap – 作为Thread Local的静态内部类"></a>ThreadLocalMap – 作为Thread Local的静态内部类</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ThreadLocalMap</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * The entries in this hash map extend WeakReference, using</span></span><br><span class="line"><span class="comment">         * its main ref field as the key (which is always a</span></span><br><span class="line"><span class="comment">         * ThreadLocal object).  Note that null keys (i.e. entry.get()</span></span><br><span class="line"><span class="comment">         * == null) mean that the key is no longer referenced, so the</span></span><br><span class="line"><span class="comment">         * entry can be expunged from table.  Such entries are referred to</span></span><br><span class="line"><span class="comment">         * as &quot;stale entries&quot; in the code that follows.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Entry</span> <span class="keyword">extends</span> <span class="title class_">WeakReference</span>&lt;ThreadLocal&lt;?&gt;&gt; &#123;</span><br><span class="line">            <span class="comment">/** The value associated with this ThreadLocal. */</span></span><br><span class="line">            Object value;</span><br><span class="line"> </span><br><span class="line">            Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class="line">                <span class="built_in">super</span>(k);</span><br><span class="line">                value = v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h6><blockquote><p><code>Key</code>和<code>ThreadLocal</code>之间的关系是弱引用，弱引用的特点是，只要这个对象存在弱引用，那么下次这个<code>GC</code>是这个对象一定会被删除，那么就会存在key为空的value，所以要将值直接删除。</p></blockquote><h3 id="InheritableThreadLocal作用和实现方式"><a href="#InheritableThreadLocal作用和实现方式" class="headerlink" title="InheritableThreadLocal作用和实现方式"></a>InheritableThreadLocal作用和实现方式</h3><blockquote><p><a href="https://blog.csdn.net/Mr1ght/article/details/118385003?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165709687716781647541105%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165709687716781647541105&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-118385003-null-null.142%5Ev31%5Epc_rank_34,185%5Ev2%5Etag_show&amp;utm_term=+InheritableThreadLocal&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/Mr1ght/article/details/118385003?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165709687716781647541105%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165709687716781647541105&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-118385003-null-null.142^v31^pc_rank_34,185^v2^tag_show&amp;utm_term=+InheritableThreadLocal&amp;spm=1018.2226.3001.4187</a></p></blockquote><blockquote><p>基于<code>ThreadLocal</code>实现，区别在于他可以传递值给子线程，每一个Thread都有一个<code>inheritableThreadLocals</code>属性，在创建子线程时，会把父线程的Entry数组丢给子线程。如果Value是一个非基本类型对象，那么传递的是引用。子线程改变父线程也会改变。</p></blockquote><h6 id="带来的问题"><a href="#带来的问题" class="headerlink" title="带来的问题"></a>带来的问题</h6><blockquote><p><code>线程不安全</code>：子线程改变，父线程改变</p><p><code>线程池可能失效</code>：因为父线程的TLMap是通过Thread的<code>init</code>方法的时候进行赋值给子线程的，而线程池在执行异步任务时可能不再需要创建新的线程了，因此也就不会再传递父线程的TLMap给子线程了</p></blockquote><h3 id="如何解决线程池异步传值问题"><a href="#如何解决线程池异步传值问题" class="headerlink" title="如何解决线程池异步传值问题"></a>如何解决线程池异步传值问题</h3><blockquote><p><code>TransmittableThreadLocal</code>:简单的原理就是TTL 中的holder持有的是当前线程内的所有本地变量,被包装的run方法执行异步任务之前，会使用replay进行设置父线程里的本地变量给当前子线程，任务执行完毕，会调用restore恢复该子线程原生的本地变量</p></blockquote><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><blockquote><p><a href="https://blog.csdn.net/qq_26542493/article/details/105482732">https://blog.csdn.net/qq_26542493/article/details/105482732</a></p></blockquote><h3 id="Hash函数构造方法"><a href="#Hash函数构造方法" class="headerlink" title="Hash函数构造方法"></a>Hash函数构造方法</h3><blockquote><ol><li><p>直接定址法</p></li><li><p>平方取中法</p></li><li><p>折叠法</p><p>ISBN号为8903-241-23，可以将address(key)&#x3D;89+03+24+12+3作为Hash地址。</p></li><li><p>除留取余法</p></li></ol><h6 id="冲突解决"><a href="#冲突解决" class="headerlink" title="冲突解决"></a>冲突解决</h6><ol><li>开放定址法</li><li>链地址法<ul><li><strong>当这个链表长度大于阈值8并且数组长度大于64则进行将链表变为红黑树。</strong></li></ul></li></ol><h6 id="装填因子"><a href="#装填因子" class="headerlink" title="装填因子"></a>装填因子</h6><ol><li>Hash表的平均查找长度和装填因子有关。有相关文献证明当装填因子在0.5左右的时候，Hash的性能能够达到最优</li><li>装填因子&#x3D;表中的记录数&#x2F;哈希表的长度</li></ol></blockquote><h3 id="jdk1-7和1-8的区别"><a href="#jdk1-7和1-8的区别" class="headerlink" title="jdk1.7和1.8的区别"></a>jdk1.7和1.8的区别</h3><h3 id="为什么线程不安全"><a href="#为什么线程不安全" class="headerlink" title="为什么线程不安全"></a>为什么线程不安全</h3><h3 id="为什么采用红黑树"><a href="#为什么采用红黑树" class="headerlink" title="为什么采用红黑树"></a>为什么采用红黑树</h3><h3 id="Volite"><a href="#Volite" class="headerlink" title="Volite"></a>Volite</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInstance</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> TestInstance instance;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> TestInstance <span class="title function_">getInstance</span><span class="params">()</span>&#123;        </span><br><span class="line">    <span class="comment">//1</span></span><br><span class="line">    <span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;                              </span><br><span class="line">        <span class="comment">//2</span></span><br><span class="line">        <span class="keyword">synchronized</span>(TestInstance.class)&#123;        </span><br><span class="line">            <span class="comment">//3</span></span><br><span class="line">            <span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;                </span><br><span class="line">                <span class="comment">//4</span></span><br><span class="line">                instance = <span class="keyword">new</span> <span class="title class_">TestInstance</span>();   </span><br><span class="line">                <span class="comment">//5</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">                <span class="keyword">return</span> instance;                             </span><br><span class="line">    <span class="comment">//6</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;面试&quot;&gt;&lt;a href=&quot;#面试&quot; class=&quot;headerlink&quot; title=&quot;面试&quot;&gt;&lt;/a&gt;面试&lt;/h1&gt;&lt;h2 id=&quot;JAVA&quot;&gt;&lt;a href=&quot;#JAVA&quot; class=&quot;headerlink&quot; title=&quot;JAVA&quot;&gt;&lt;/a&gt;JAVA&lt;/h</summary>
      
    
    
    
    <category term="面试" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="知识点" scheme="http://example.com/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>Netty</title>
    <link href="http://example.com/2022/07/05/netty/"/>
    <id>http://example.com/2022/07/05/netty/</id>
    <published>2022-07-05T03:21:25.000Z</published>
    <updated>2022-07-06T02:40:18.840Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p><strong>Netty</strong>是一个java开源框架。Netty提供异步的、事件驱动的网络应用程序框架和工具，用以快速开发高性能、高可靠性的网络服务器和客户端程序。</p><p>Netty是一个NIO客户端、服务端框架。允许快速简单的开发网络应用程序。例如：服务端和客户端之间的协议。它最牛逼的地方在于简化了网络编程规范。例如:TCP和UDP的Socket服务</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.netty/netty-all --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.netty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>netty-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.78.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="编写服务端"><a href="#编写服务端" class="headerlink" title="编写服务端"></a>编写服务端</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.sxt.netty;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInboundHandlerAdapter;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理服务器端通道</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DiscardServerHandler</span> <span class="keyword">extends</span> <span class="title class_">ChannelInboundHandlerAdapter</span> &#123; <span class="comment">// (1)</span></span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> &#123; <span class="comment">// (2)</span></span><br><span class="line">        <span class="comment">// 以静默方式丢弃接收的数据</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        ((ByteBuf) msg).release(); <span class="comment">// (3)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> &#123; <span class="comment">// (4)</span></span><br><span class="line">        <span class="comment">// 出现异常时关闭连接。</span></span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>（1）<code>ChannelInboundHandlerAdapter</code>是<code>ChannelInboundHandler</code>的一个实现，负责覆盖各种事件处置程序方法</p><p>（2）<code>ChannelRead()</code>用于处理程序方法，每当客户端收到新数据时，使用该方法来接受客户端的消息，在此示例中，接收到的消息的类型为<code>ByteBuf</code></p><p>（3）<code>ByteBuf</code>是引用计数的对象，必须通过<code>release()</code>方法显式释放</p></blockquote><h6 id="ByteBuf学习"><a href="#ByteBuf学习" class="headerlink" title="ByteBuf学习"></a>ByteBuf学习</h6><blockquote><p><a href="https://blog.csdn.net/usagoole/article/details/88024517?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=ByteBuf&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-88024517.142%5Ev31%5Epc_rank_34,185%5Ev2%5Etag_show&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/usagoole/article/details/88024517?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=ByteBuf&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-88024517.142^v31^pc_rank_34,185^v2^tag_show&amp;spm=1018.2226.3001.4187</a></p></blockquote><h2 id="调用Handler"><a href="#调用Handler" class="headerlink" title="调用Handler"></a>调用Handler</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.sxt.netty;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelOption;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Discards any incoming data.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DiscardServer</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> port;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DiscardServer</span><span class="params">(<span class="type">int</span> port)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">EventLoopGroup</span> <span class="variable">bossGroup</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>(); <span class="comment">// (1)</span></span><br><span class="line">        <span class="type">EventLoopGroup</span> <span class="variable">workerGroup</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ServerBootstrap</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerBootstrap</span>(); <span class="comment">// (2)</span></span><br><span class="line">            b.group(bossGroup, workerGroup)</span><br><span class="line">             .channel(NioServerSocketChannel.class) <span class="comment">// (3)</span></span><br><span class="line">             .childHandler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123; <span class="comment">// (4)</span></span><br><span class="line">                 <span class="meta">@Override</span></span><br><span class="line">                 <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                     ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">DiscardServerHandler</span>());</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;)</span><br><span class="line">             .option(ChannelOption.SO_BACKLOG, <span class="number">128</span>)          <span class="comment">// (5)</span></span><br><span class="line">             .childOption(ChannelOption.SO_KEEPALIVE, <span class="literal">true</span>); <span class="comment">// (6)</span></span><br><span class="line"> </span><br><span class="line">            <span class="comment">// Bind and start to accept incoming connections.</span></span><br><span class="line">            <span class="type">ChannelFuture</span> <span class="variable">f</span> <span class="operator">=</span> b.bind(port).sync(); <span class="comment">// (7)</span></span><br><span class="line"> </span><br><span class="line">            <span class="comment">// Wait until the server socket is closed.</span></span><br><span class="line">            <span class="comment">// In this example, this does not happen, but you can do that to gracefully</span></span><br><span class="line">            <span class="comment">// shut down your server.</span></span><br><span class="line">            f.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">int</span> port;</span><br><span class="line">        <span class="keyword">if</span> (args.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            port = Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            port = <span class="number">8080</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">DiscardServer</span>(port).run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li><code>NioEventLoopGroup</code>是处理<code>I/O</code>操作的多线程事件循环，第一个通常称为“<code>boss</code>”，接受传入连接。 第二个通常称为“<code>worker</code>”，当“<code>boss</code>”接受连接并且向“<code>worker</code>”注册接受连接，则“<code>worker</code>”处理所接受连接的流量。 使用多少个线程以及如何将它们映射到创建的通道取决于<code>EventLoopGroup</code>实现，甚至可以通过构造函数进行配置</li><li><code>ServerBootstrap</code>是一个用于设置服务器的助手类。 您可以直接使用通道设置服务器。 但是，请注意，这是一个冗长的过程，在大多数情况下不需要这样做。</li><li>此处指定的处理程序将始终由新接受的通道计算。 <code>ChannelInitializer</code>是一个特殊的处理程序，用于帮助用户配置新的通道。 很可能要通过添加一些处理程序(例如<code>DiscardServerHandler</code>)来配置新通道的<code>ChannelPipeline</code>来实现您的网络应用程序。 随着应用程序变得复杂，可能会向管道中添加更多处理程序，并最终将此匿名类提取到顶级类中</li><li>你注意到<code>option()</code>和<code>childOption()</code>没有？ <code>option()</code>用于接受传入连接的<code>NioServerSocketChannel</code>。<code>childOption()</code>用于由父<code>ServerChannel</code>接受的通道，在这个示例中为<code>NioServerSocketChannel</code></li></ol></blockquote><h6 id="ChannelOption"><a href="#ChannelOption" class="headerlink" title="ChannelOption"></a>ChannelOption</h6><blockquote><p><a href="https://blog.csdn.net/qq_31391225/article/details/109513184?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165707207416781647553838%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165707207416781647553838&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-109513184-null-null.142%5Ev31%5Epc_rank_34,185%5Ev2%5Etag_show&amp;utm_term=channeloption&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/qq_31391225/article/details/109513184?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165707207416781647553838%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165707207416781647553838&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-109513184-null-null.142^v31^pc_rank_34,185^v2^tag_show&amp;utm_term=channeloption&amp;spm=1018.2226.3001.4187</a></p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可以在try中加入信息的处理逻辑</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (in.isReadable()) &#123; <span class="comment">// (1)</span></span><br><span class="line">            System.out.print((<span class="type">char</span>) in.readByte());</span><br><span class="line">            System.out.flush();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        ReferenceCountUtil.release(msg); <span class="comment">// (2)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">telnet localhost 8080</span><br></pre></td></tr></table></figure><h2 id="时间服务器"><a href="#时间服务器" class="headerlink" title="时间服务器"></a>时间服务器</h2><h6 id="Handler提供时间"><a href="#Handler提供时间" class="headerlink" title="Handler提供时间"></a>Handler提供时间</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.sxt.netty.time;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimeServerHandler</span> <span class="keyword">extends</span> <span class="title class_">ChannelInboundHandlerAdapter</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelActive</span><span class="params">(<span class="keyword">final</span> ChannelHandlerContext ctx)</span> &#123; <span class="comment">// (1)</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">ByteBuf</span> <span class="variable">time</span> <span class="operator">=</span> ctx.alloc().buffer(<span class="number">4</span>); <span class="comment">// (2)</span></span><br><span class="line">        time.writeInt((<span class="type">int</span>) (System.currentTimeMillis() / <span class="number">1000L</span> + <span class="number">2208988800L</span>));</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">final</span> <span class="type">ChannelFuture</span> <span class="variable">f</span> <span class="operator">=</span> ctx.writeAndFlush(time); <span class="comment">// (3)</span></span><br><span class="line">        f.addListener(<span class="keyword">new</span> <span class="title class_">ChannelFutureListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operationComplete</span><span class="params">(ChannelFuture future)</span> &#123;</span><br><span class="line">                <span class="type">assert</span> <span class="variable">f</span> <span class="operator">=</span>= future;</span><br><span class="line">                ctx.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;); <span class="comment">// (4)</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> &#123;</span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li>我们要写入一个32位整数，因此需要一个<a href="http://netty.io/4.0/api/io/netty/buffer/ByteBuf.html">ByteBuf</a>，其容量至少为<code>4</code>个字节。 通过<code>ChannelHandlerContext.alloc()</code>获取当前的<code>ByteBufAllocator</code>并分配一个新的缓冲区</li></ol></blockquote><h6 id="编写服务端来发送时间"><a href="#编写服务端来发送时间" class="headerlink" title="编写服务端来发送时间"></a>编写服务端来发送时间</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelOption;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimeServer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TimeServer</span><span class="params">(<span class="type">int</span> port)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">EventLoopGroup</span> <span class="variable">bossGroup</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>();</span><br><span class="line">        <span class="type">EventLoopGroup</span> <span class="variable">workerGroup</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">ServerBootstrap</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerBootstrap</span>();</span><br><span class="line">            b.group(bossGroup,workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .childHandler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span>  Exception&#123;</span><br><span class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">TimeServerHandler</span>());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                    .option(ChannelOption.SO_BACKLOG,<span class="number">128</span>)</span><br><span class="line">                    .childOption(ChannelOption.SO_KEEPALIVE, <span class="literal">true</span>);</span><br><span class="line">            <span class="type">ChannelFuture</span> <span class="variable">f</span> <span class="operator">=</span> b.bind(port).sync();</span><br><span class="line">            f.channel().closeFuture().sync();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">int</span> port;</span><br><span class="line">        <span class="keyword">if</span>(args.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            port = Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            port = <span class="number">8080</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">TimeServer</span>(port).run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="编写一个handlerd的客户端来获取服务端给的时间"><a href="#编写一个handlerd的客户端来获取服务端给的时间" class="headerlink" title="编写一个handlerd的客户端来获取服务端给的时间"></a>编写一个handlerd的客户端来获取服务端给的时间</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.sxt.netty.time;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimeClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> args[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> Integer.parseInt(args[<span class="number">1</span>]);</span><br><span class="line">        <span class="type">EventLoopGroup</span> <span class="variable">workerGroup</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>();</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Bootstrap</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bootstrap</span>(); <span class="comment">// (1)</span></span><br><span class="line">            b.group(workerGroup); <span class="comment">// (2)</span></span><br><span class="line">            b.channel(NioSocketChannel.class); <span class="comment">// (3)</span></span><br><span class="line">            b.option(ChannelOption.SO_KEEPALIVE, <span class="literal">true</span>); <span class="comment">// (4)</span></span><br><span class="line">            b.handler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                    ch.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">TimeClientHandler</span>());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// Start the client.</span></span><br><span class="line">            <span class="type">ChannelFuture</span> <span class="variable">f</span> <span class="operator">=</span> b.connect(host, port).sync(); <span class="comment">// (5)</span></span><br><span class="line"> </span><br><span class="line">            <span class="comment">// Wait until the connection is closed.</span></span><br><span class="line">            f.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="编写客户端handler来处理获取到的信息"><a href="#编写客户端handler来处理获取到的信息" class="headerlink" title="编写客户端handler来处理获取到的信息"></a>编写客户端handler来处理获取到的信息</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.sxt.netty.time;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimeClientHandler</span> <span class="keyword">extends</span> <span class="title class_">ChannelInboundHandlerAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> &#123;</span><br><span class="line">                <span class="type">ByteBuf</span> <span class="variable">m</span> <span class="operator">=</span> (ByteBuf) msg; <span class="comment">// (1)</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">currentTimeMillis</span> <span class="operator">=</span> (m.readUnsignedInt() - <span class="number">2208988800L</span>) * <span class="number">1000L</span>;</span><br><span class="line">            <span class="type">Date</span> <span class="variable">currentTime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(currentTimeMillis);</span><br><span class="line">            System.out.println(<span class="string">&quot;Default Date Format:&quot;</span> + currentTime.toString());</span><br><span class="line"> </span><br><span class="line">            <span class="type">SimpleDateFormat</span> <span class="variable">formatter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">dateString</span> <span class="operator">=</span> formatter.format(currentTime);</span><br><span class="line">            <span class="comment">// 转换一下成中国人的时间格式</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Date Format:&quot;</span> + dateString);</span><br><span class="line"> </span><br><span class="line">            ctx.close();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            m.release();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> &#123;</span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Decoder"><a href="#Decoder" class="headerlink" title="Decoder"></a>Decoder</h2><p><img src="/img/netty/image-20220706102004785.png" alt="image-20220706102004785"></p><h6 id="1-修改接受信息的Handler-加缓存区"><a href="#1-修改接受信息的Handler-加缓存区" class="headerlink" title="1. 修改接受信息的Handler-加缓存区"></a>1. 修改接受信息的Handler-加缓存区</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (buf.readableBytes() &gt;= <span class="number">4</span>) &#123; <span class="comment">// (3)</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">currentTimeMillis</span> <span class="operator">=</span> (buf.readUnsignedInt() - <span class="number">2208988800L</span>) * <span class="number">1000L</span>;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">Date</span>(currentTimeMillis));</span><br><span class="line">            ctx.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2-加入一个DecoderHandler在发送数据和接收数据handler之间再加一层"><a href="#2-加入一个DecoderHandler在发送数据和接收数据handler之间再加一层" class="headerlink" title="2. 加入一个DecoderHandler在发送数据和接收数据handler之间再加一层"></a>2. 加入一个DecoderHandler在发送数据和接收数据handler之间再加一层</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.sxt.netty.time;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimeDecoder</span> <span class="keyword">extends</span> <span class="title class_">ByteToMessageDecoder</span> &#123; <span class="comment">// (1)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">decode</span><span class="params">(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out)</span> &#123; <span class="comment">// (2)</span></span><br><span class="line">        <span class="keyword">if</span> (in.readableBytes() &lt; <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">// (3)</span></span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        out.add(in.readBytes(<span class="number">4</span>)); <span class="comment">// (4)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li><code>ByteToMessageDecoder</code>是<code>ChannelInboundHandler</code>的一个实现，它使得处理碎片问题变得容易。</li><li>如果<code>decode()</code>将对象添加到<code>out</code>，则意味着解码器成功地解码了消息。 <code>ByteToMessageDecoder</code>将丢弃累积缓冲区的读取部分。要记住，不需要解码多个消息。 <code>ByteToMessageDecoder</code>将继续调用<code>decode()</code>方法，直到它没有再有任何东西添加</li></ol></blockquote><h2 id="使用pojo，而非bytebuf更加优雅"><a href="#使用pojo，而非bytebuf更加优雅" class="headerlink" title="使用pojo，而非bytebuf更加优雅"></a>使用pojo，而非bytebuf更加优雅</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">decode</span><span class="params">(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (in.readableBytes() &lt; <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    out.add(<span class="keyword">new</span> <span class="title class_">UnixTime</span>(in.readUnsignedInt()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="也可以用在两个handler层之间传递数据的时候–writeAndflush"><a href="#也可以用在两个handler层之间传递数据的时候–writeAndflush" class="headerlink" title="也可以用在两个handler层之间传递数据的时候–writeAndflush()"></a>也可以用在两个handler层之间传递数据的时候–writeAndflush()</h6><h6 id="同样的我们可以加入一层encode来解码"><a href="#同样的我们可以加入一层encode来解码" class="headerlink" title="同样的我们可以加入一层encode来解码"></a>同样的我们可以加入一层encode来解码</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimeEncoder</span> <span class="keyword">extends</span> <span class="title class_">MessageToByteEncoder</span>&lt;UnixTime&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">encode</span><span class="params">(ChannelHandlerContext ctx, UnixTime msg, ByteBuf out)</span> &#123;</span><br><span class="line">        out.writeInt((<span class="type">int</span>)msg.value());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Netty&quot;&gt;&lt;a href=&quot;#Netty&quot; class=&quot;headerlink&quot; title=&quot;Netty&quot;&gt;&lt;/a&gt;Netty&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简</summary>
      
    
    
    
    <category term="网络" scheme="http://example.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="Netty" scheme="http://example.com/tags/Netty/"/>
    
    <category term="网络" scheme="http://example.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode</title>
    <link href="http://example.com/2022/07/01/leetcode/"/>
    <id>http://example.com/2022/07/01/leetcode/</id>
    <published>2022-07-01T03:21:25.000Z</published>
    <updated>2022-07-06T07:27:32.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeetCode"><a href="#LeetCode" class="headerlink" title="LeetCode"></a>LeetCode</h1><h2 id="前置学习"><a href="#前置学习" class="headerlink" title="前置学习"></a>前置学习</h2><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><h5 id="普通栈"><a href="#普通栈" class="headerlink" title="普通栈"></a>普通栈</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyStack</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] elem;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> usedSize;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyStack</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.usedSize = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.elem = <span class="keyword">new</span> <span class="title class_">Int</span>[<span class="number">5</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判满</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">full</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">return</span> <span class="variable">usedSize</span> <span class="operator">=</span>= <span class="built_in">this</span>.elem.length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">return</span> <span class="variable">usedSize</span> <span class="operator">=</span>= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 入栈</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(full())&#123;</span><br><span class="line">            <span class="built_in">this</span>.elem = Arrays.copyOf(elem,<span class="number">2</span>*<span class="built_in">this</span>.elem.length);</span><br><span class="line">        &#125;</span><br><span class="line">        elem[usedSize++] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 出栈</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(empty())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;栈空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> elem[--usedSize];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获得栈顶元素 </span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">peak</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(empty())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;栈空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> elem[usedSize-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4><h5 id="普通队列"><a href="#普通队列" class="headerlink" title="普通队列"></a>普通队列</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Class MyQueue&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> rear;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> front;</span><br><span class="line">    <span class="keyword">private</span> T[] elem;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> maxSize;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyQueue</span><span class="params">(<span class="type">int</span> size)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.maxSize = size;</span><br><span class="line">        <span class="built_in">this</span>.rear = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.front = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.elem = <span class="keyword">new</span> <span class="title class_">T</span>[maxsize]; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">full</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">return</span> <span class="variable">rear</span> <span class="operator">=</span>= maxSize;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">return</span> <span class="variable">front</span> <span class="operator">=</span>= rear;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">offer</span><span class="params">(T data)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(full())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;队列已满&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        elem[rear++] = data;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">peak</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(empty())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;队列为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> elem[front];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">poll</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(empty())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;队列为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> elem[front++];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wshen.serial_bds.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SerialQueue</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">SerialQueue</span> <span class="variable">serialQueue</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SerialQueue</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> front;<span class="comment">//指向队首</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> rear;<span class="comment">//指向队尾</span></span><br><span class="line">    <span class="keyword">private</span> Serial[] elem;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> maxSize;<span class="comment">//最大容量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SerialQueue <span class="title function_">getSerialQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(serialQueue==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (SerialQueue.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(serialQueue==<span class="literal">null</span>)&#123;</span><br><span class="line">                    serialQueue = <span class="keyword">new</span> <span class="title class_">SerialQueue</span>();</span><br><span class="line">                    serialQueue.front = <span class="number">0</span>;</span><br><span class="line">                    serialQueue.rear = <span class="number">0</span>;</span><br><span class="line">                    serialQueue.maxSize = <span class="number">17</span>;</span><br><span class="line">                    serialQueue.elem = <span class="keyword">new</span> <span class="title class_">Serial</span>[serialQueue.maxSize];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> serialQueue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rear==front;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  (rear+<span class="number">1</span>)%maxSize==front;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">offer</span><span class="params">(Serial serial)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isFull())<span class="keyword">return</span>;</span><br><span class="line">        elem[rear++]=serial;</span><br><span class="line">        rear=rear%maxSize;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">poll</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty())<span class="keyword">return</span>;</span><br><span class="line">        front=++front%maxSize;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Serial <span class="title function_">peek</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty())<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> elem[front];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Serial <span class="title function_">peekByIndex</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(elem[n]==<span class="literal">null</span>)<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> elem[n];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        String str=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (Serial i:elem</span><br><span class="line">        ) &#123;</span><br><span class="line">            str=str+i+<span class="string">&#x27;\r&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h5><h6 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    Node next;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> data)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> data, Node next)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleLinkedList</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line">    <span class="keyword">private</span> Node head;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFirst</span><span class="params">(<span class="type">int</span> data)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(size == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.head = <span class="keyword">new</span> <span class="title class_">Node</span>(data);</span><br><span class="line">            size++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> New <span class="title function_">Node</span><span class="params">(data)</span>;</span><br><span class="line">            node.next = head;</span><br><span class="line">            head = node;</span><br><span class="line">            size++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> data)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt; size)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;add Index illegal&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(index==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(data,head);</span><br><span class="line">            head = node;</span><br><span class="line">            size++;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(data);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">prev</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;index-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            prev = prev.next;</span><br><span class="line">        &#125;</span><br><span class="line">        node.next=prev.next;</span><br><span class="line">        prev.next=node;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addLast</span><span class="params">(<span class="type">int</span> data)</span>&#123;</span><br><span class="line">        addIndex(size,data);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rangeCheck(index))&#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> head;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;index;i++)&#123;</span><br><span class="line">                node = node.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">data</span> <span class="operator">=</span> node.data;</span><br><span class="line">            <span class="keyword">return</span> data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">set</span><span class="params">(<span class="type">int</span> index,<span class="type">int</span> data)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rangeCheck(index))&#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> head;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>; i&lt;index;i++)&#123;</span><br><span class="line">                node = node.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">oldData</span> <span class="operator">=</span> node.data;</span><br><span class="line">            node.data =data;</span><br><span class="line">            <span class="keyword">return</span> oldData;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">rangeCheck</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(<span class="type">int</span> data)</span>&#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(node != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(node.data == data)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeFirst</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> head;</span><br><span class="line">        head = head.next;</span><br><span class="line">        node.next = <span class="literal">null</span>;</span><br><span class="line">        size--;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeIndex</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node_prev</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;index-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            node_prev = node_prev.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> node_prev.next;</span><br><span class="line">        node_prev.next = node.next;</span><br><span class="line">        node.next = <span class="literal">null</span>;</span><br><span class="line">        size--;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeValueOnce</span><span class="params">(<span class="type">int</span> data)</span>&#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">prev</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(prev.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(prev.data==data)&#123;</span><br><span class="line">                removeFirst();</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(prev.next.data==data)&#123;</span><br><span class="line">                <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> prev.next;</span><br><span class="line">                prev.next = node.next;</span><br><span class="line">                node.next = <span class="literal">null</span>;</span><br><span class="line">                size--;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                prev = prev.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>hlh最近因为来亲戚了，然后最近不是要考试嘛，你们那个猪头学校安排考试跨度太大了，比较烦，他不是在宿舍和你关系比较好嘛，他很焦虑最近，在宿舍麻烦这段时间多担待一下，晚上能早点熄灯早点熄灯吧，他不知道我来找你了，尽量别和他说吧。我怕到时候又要埃她说，麻烦。</p></blockquote><h3 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h3><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><h5 id="分治"><a href="#分治" class="headerlink" title="分治"></a>分治</h5><blockquote><p><strong>1.分解</strong><br>将原问题分解为若干规模较小，相互独立，与原问题相同的子问题。<br><strong>2.解决</strong><br>若干子问题较小而容易被解决则直接解决，否则再继续分解为更小的子问题，直到容易解决。<br><strong>3.合并</strong><br>将已求解的各个子问题的解，逐步合并为原问题的解。</p></blockquote><h5 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h5><ol><li><p>求一个问题的最优解</p></li><li><p>整体的最优解依赖于各个子问题的最优解</p></li><li><p>这些小问题之间还有相互重叠的更小的子问题</p></li><li><p>从上往下分析问题，从下往上求解问题</p></li></ol><p><code>重叠子问题</code>，<code>最优子结构</code>，<code>状态转移方程</code></p><blockquote><p>（3）重叠子问题：我们将大问题分解 为小问题，这些小问题之间还有相互重叠的更小的子问题。不同的问题，可能都要求1个相同问题的解。假如A经理想知道他下面最优秀的人是谁，他必须知道X,Y,Z,O,P组最优秀的人是谁， 甲总监想知道自己下面最优秀的人是谁，也要去知道X,Y,Z组里面最优秀的人是谁？这就有问题重叠了，两个人都需要了解X,Y,Z三个小组最优秀的人。</p><p>（4）从上往下分析问题，从下往上求解问题。</p><p>（5）无后效性：求出来的子问题并不会因为后面求出来的改变。我们可以理解为，X组长挑选出三个人，即便到了高级经理选出大部门最优秀的三个人，对于X组来说，最优秀的还是这3个人，不会发生改变。</p></blockquote><h6 id="https-blog-csdn-net-weixin-43892514-article-details-104438703-ops-request-misc-257B-2522request-255Fid-2522-253A-2522165553241416781435497591-2522-252C-2522scm-2522-253A-252220140713-130102334-2522-257D-amp-request-id-165553241416781435497591-amp-biz-id-0-amp-utm-medium-distribute-pc-search-result-none-task-blog-2-all-sobaiduend-default-2-104438703-null-null-142-v17-pc-search-result-control-group-157-v15-new-3-amp-utm-term-E5-8A-A8-E6-80-81-E8-A7-84-E5-88-92-E5-92-8C-E8-B4-AA-E5-BF-83-amp-spm-1018-2226-3001-4187"><a href="#https-blog-csdn-net-weixin-43892514-article-details-104438703-ops-request-misc-257B-2522request-255Fid-2522-253A-2522165553241416781435497591-2522-252C-2522scm-2522-253A-252220140713-130102334-2522-257D-amp-request-id-165553241416781435497591-amp-biz-id-0-amp-utm-medium-distribute-pc-search-result-none-task-blog-2-all-sobaiduend-default-2-104438703-null-null-142-v17-pc-search-result-control-group-157-v15-new-3-amp-utm-term-E5-8A-A8-E6-80-81-E8-A7-84-E5-88-92-E5-92-8C-E8-B4-AA-E5-BF-83-amp-spm-1018-2226-3001-4187" class="headerlink" title="https://blog.csdn.net/weixin_43892514/article/details/104438703?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165553241416781435497591%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165553241416781435497591&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-104438703-null-null.142^v17^pc_search_result_control_group,157^v15^new_3&amp;utm_term=%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%92%8C%E8%B4%AA%E5%BF%83&amp;spm=1018.2226.3001.4187"></a><a href="https://blog.csdn.net/weixin_43892514/article/details/104438703?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165553241416781435497591%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165553241416781435497591&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-104438703-null-null.142%5Ev17%5Epc_search_result_control_group,157%5Ev15%5Enew_3&amp;utm_term=%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%92%8C%E8%B4%AA%E5%BF%83&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/weixin_43892514/article/details/104438703?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165553241416781435497591%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165553241416781435497591&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-104438703-null-null.142^v17^pc_search_result_control_group,157^v15^new_3&amp;utm_term=%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%92%8C%E8%B4%AA%E5%BF%83&amp;spm=1018.2226.3001.4187</a></h6><h2 id="直击Offer"><a href="#直击Offer" class="headerlink" title="直击Offer"></a>直击Offer</h2><h3 id="双栈实现队列"><a href="#双栈实现队列" class="headerlink" title="双栈实现队列"></a>双栈实现队列</h3><h5 id="菜狗"><a href="#菜狗" class="headerlink" title="菜狗"></a>菜狗</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CQueue</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> tail;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> maxSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] elem_one;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] elem_two;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.tail = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.maxSize = <span class="number">9</span>;</span><br><span class="line">        <span class="built_in">this</span>.elem_one = <span class="keyword">new</span> <span class="title class_">int</span>[maxSize];</span><br><span class="line">        <span class="built_in">this</span>.elem_two = <span class="keyword">new</span> <span class="title class_">int</span>[maxSize];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">return</span> <span class="variable">tail</span> <span class="operator">=</span>= maxSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">return</span> <span class="variable">tail</span> <span class="operator">=</span>= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">appendTail</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(isFull())&#123;</span><br><span class="line">            <span class="built_in">this</span>.maxSize++;</span><br><span class="line">            elem_one = Arrays.copyOf(elem_one,maxSize);</span><br><span class="line">            elem_two = Arrays.copyOf(elem_two,maxSize);</span><br><span class="line">        &#125;</span><br><span class="line">        elem_one[tail++] = value;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; tail; i++) &#123;</span><br><span class="line">            elem_two[i] = elem_one[tail-i-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">deleteHead</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">elem</span> <span class="operator">=</span> elem_two[--tail];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; tail; i++) &#123;</span><br><span class="line">                elem_one[i] = elem_two[tail-i-<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> elem;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your CQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * CQueue obj = new CQueue();</span></span><br><span class="line"><span class="comment"> * obj.appendTail(value);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj.deleteHead();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h5 id="标准答案"><a href="#标准答案" class="headerlink" title="标准答案"></a>标准答案</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CQueue</span> &#123;</span><br><span class="line">    Deque&lt;Integer&gt; inStack;</span><br><span class="line">    Deque&lt;Integer&gt; outStack;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        inStack = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;Integer&gt;();</span><br><span class="line">        outStack = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;Integer&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">appendTail</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        inStack.push(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">deleteHead</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (outStack.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (inStack.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            in2out();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> outStack.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">in2out</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (!inStack.isEmpty()) &#123;</span><br><span class="line">            outStack.push(inStack.pop());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="min栈"><a href="#min栈" class="headerlink" title="min栈"></a>min栈</h3><h5 id="菜狗-1"><a href="#菜狗-1" class="headerlink" title="菜狗"></a>菜狗</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinStack</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> usedSize;</span><br><span class="line">    <span class="type">int</span>[] elem;</span><br><span class="line">    <span class="type">int</span> maxSize;</span><br><span class="line">    <span class="type">int</span> min;</span><br><span class="line">    <span class="comment">// 辅助栈</span></span><br><span class="line">    Stack&lt;Integer&gt; stack;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** initialize your data structure here. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MinStack</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.maxSize = <span class="number">9</span>;</span><br><span class="line">        <span class="built_in">this</span>.elem = <span class="keyword">new</span> <span class="title class_">int</span>[maxSize];</span><br><span class="line">        <span class="built_in">this</span>.usedSize = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;Integer&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">full</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> usedSize==maxSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(full())&#123;</span><br><span class="line">            maxSize++;</span><br><span class="line">            elem = Arrays.copyOf(elem,maxSize);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(usedSize==<span class="number">0</span>)&#123;</span><br><span class="line">            min=x;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(x&lt;min)&#123;</span><br><span class="line">            <span class="built_in">this</span>.min=x;</span><br><span class="line">        &#125;</span><br><span class="line">        stack.push(min);</span><br><span class="line">        elem[usedSize++]=x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> usedSize==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(empty())&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        stack.pop();</span><br><span class="line">        <span class="keyword">if</span>(!stack.empty())&#123;</span><br><span class="line">            min=stack.peek();</span><br><span class="line">        &#125;</span><br><span class="line">        --usedSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">top</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(empty())&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> elem[usedSize-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">min</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(empty())&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        min = stack.peek();</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MinStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MinStack obj = new MinStack();</span></span><br><span class="line"><span class="comment"> * obj.push(x);</span></span><br><span class="line"><span class="comment"> * obj.pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.top();</span></span><br><span class="line"><span class="comment"> * int param_4 = obj.min();</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="标准答案-1"><a href="#标准答案-1" class="headerlink" title="标准答案"></a>标准答案</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MinStack</span> &#123;</span><br><span class="line">    Deque&lt;Integer&gt; xStack;</span><br><span class="line">    Deque&lt;Integer&gt; minStack;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MinStack</span><span class="params">()</span> &#123;</span><br><span class="line">        xStack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Integer&gt;();</span><br><span class="line">        minStack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Integer&gt;();</span><br><span class="line">        minStack.push(Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        xStack.push(x);</span><br><span class="line">        minStack.push(Math.min(minStack.peek(), x));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        xStack.pop();</span><br><span class="line">        minStack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">top</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> xStack.peek();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">min</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> minStack.peek();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="从尾到头打印链表"><a href="#从尾到头打印链表" class="headerlink" title="从尾到头打印链表"></a>从尾到头打印链表</h3><h5 id="菜狗-2"><a href="#菜狗-2" class="headerlink" title="菜狗"></a>菜狗</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    LinkedList&lt;Integer&gt; linkedList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] reversePrint(ListNode head) &#123;</span><br><span class="line">        <span class="keyword">while</span>(head!=<span class="literal">null</span>)&#123;</span><br><span class="line">            linkedList.addFirst(head.val);</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] test = <span class="keyword">new</span> <span class="title class_">int</span>[linkedList.size()];</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> linkedList.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            test[i] = linkedList.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="倒输出链表"><a href="#倒输出链表" class="headerlink" title="倒输出链表"></a>倒输出链表</h3><h5 id="菜狗-3"><a href="#菜狗-3" class="headerlink" title="菜狗"></a>菜狗</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        LinkedList&lt;Integer&gt; linkedList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">while</span>(head!=<span class="literal">null</span>)&#123;</span><br><span class="line">            linkedList.addFirst(head.val);</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode prev;</span><br><span class="line">        <span class="keyword">if</span>(linkedList.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            prev = <span class="keyword">new</span> <span class="title class_">ListNode</span>(linkedList.pop());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> linkedList.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">                temp=<span class="keyword">new</span> <span class="title class_">ListNode</span>(linkedList.pop());</span><br><span class="line">                prev.next=temp;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp.next=<span class="keyword">new</span> <span class="title class_">ListNode</span>(linkedList.pop());</span><br><span class="line">            temp=temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="标准答案-2"><a href="#标准答案-2" class="headerlink" title="标准答案"></a>标准答案</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">curr</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (curr != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">next</span> <span class="operator">=</span> curr.next;</span><br><span class="line">            curr.next = prev;</span><br><span class="line">            prev = curr;</span><br><span class="line">            curr = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据结构-1"><a href="#数据结构-1" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="存在重复元素"><a href="#存在重复元素" class="headerlink" title="存在重复元素"></a>存在重复元素</h3><h5 id="菜狗-4"><a href="#菜狗-4" class="headerlink" title="菜狗"></a>菜狗</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsDuplicate</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!set.add(x)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="标准答案-3"><a href="#标准答案-3" class="headerlink" title="标准答案"></a>标准答案</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsDuplicate</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == nums[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最大子数组和"><a href="#最大子数组和" class="headerlink" title="最大子数组和"></a>最大子数组和</h3><h5 id="菜狗动态规划"><a href="#菜狗动态规划" class="headerlink" title="菜狗动态规划"></a>菜狗动态规划</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSubArray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">pre</span> <span class="operator">=</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">                max=nums[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[i]+max&gt;nums[i])&#123;</span><br><span class="line">                max=nums[i]+max;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                max=nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(max&gt;pre)&#123;</span><br><span class="line">                pre = max;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h3><h5 id="hash（空间换时间）-pk-暴力求解"><a href="#hash（空间换时间）-pk-暴力求解" class="headerlink" title="hash（空间换时间） pk 暴力求解"></a>hash（空间换时间） pk 暴力求解</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(target-nums[i]))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i,map.get(target-nums[i])&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                map.put(nums[i], i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="两数组交集"><a href="#两数组交集" class="headerlink" title="两数组交集"></a>两数组交集</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] intersect(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) &#123;</span><br><span class="line">        Map&lt;Integer,Integer&gt; integerMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span>[] nums;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums1.length&gt;nums2.length)&#123;</span><br><span class="line">            nums = <span class="keyword">new</span> <span class="title class_">int</span>[nums2.length];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j : nums2) &#123;</span><br><span class="line">                <span class="keyword">if</span> (integerMap.containsKey(j)) &#123;</span><br><span class="line">                    integerMap.put(j, integerMap.get(j) + <span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    integerMap.put(j, <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k : nums1)&#123;</span><br><span class="line">                <span class="keyword">if</span>(integerMap.containsKey(k))&#123;</span><br><span class="line">                    nums[n] = k;</span><br><span class="line">                    n++;</span><br><span class="line">                    <span class="keyword">if</span>(integerMap.get(k)-<span class="number">1</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                        integerMap.remove(k);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        integerMap.put(k,integerMap.get(k)-<span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            nums = <span class="keyword">new</span> <span class="title class_">int</span>[nums1.length];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j : nums1) &#123;</span><br><span class="line">                <span class="keyword">if</span> (integerMap.containsKey(j)) &#123;</span><br><span class="line">                    integerMap.put(j, integerMap.get(j) + <span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    integerMap.put(j, <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k : nums2)&#123;</span><br><span class="line">                <span class="keyword">if</span>(integerMap.containsKey(k))&#123;</span><br><span class="line">                    nums[n] = k;</span><br><span class="line">                    n++;</span><br><span class="line">                    <span class="keyword">if</span>(integerMap.get(k)-<span class="number">1</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                        integerMap.remove(k);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        integerMap.put(k,integerMap.get(k)-<span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        nums = Arrays.copyOf(nums,n);</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;LeetCode&quot;&gt;&lt;a href=&quot;#LeetCode&quot; class=&quot;headerlink&quot; title=&quot;LeetCode&quot;&gt;&lt;/a&gt;LeetCode&lt;/h1&gt;&lt;h2 id=&quot;前置学习&quot;&gt;&lt;a href=&quot;#前置学习&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="面试" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Linux脚本</title>
    <link href="http://example.com/2022/05/25/Linux%E8%84%9A%E6%9C%AC/"/>
    <id>http://example.com/2022/05/25/Linux%E8%84%9A%E6%9C%AC/</id>
    <published>2022-05-25T03:21:25.000Z</published>
    <updated>2022-07-06T00:53:46.809Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux脚本"><a href="#Linux脚本" class="headerlink" title="Linux脚本"></a>Linux脚本</h1><h2 id="shebang"><a href="#shebang" class="headerlink" title="shebang"></a>shebang</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h6 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h6><ul><li>命名中只能使用英文字母，数字和下划线，首个字符不能用数字开头</li><li>中间不能又空格，可以使用下划线</li><li>先声明后使用</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$0</span>表示运行文件名 <span class="variable">$1</span>表示传递的参数</span></span><br><span class="line">echo $0</span><br><span class="line">echo $1</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh ./test.sh 张郑旭</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./test.sh</span><br><span class="line">张郑旭</span><br></pre></td></tr></table></figure><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"></span><br><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line">c=张郑旭</span><br><span class="line">d=黄莉惠</span><br><span class="line"></span><br><span class="line">echo `expr $a \* $b` #一定要\</span><br><span class="line">echo `expr $a / $b`</span><br><span class="line">echo `expr $a + $b`</span><br><span class="line">echo `expr $a - $b`</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">算数关系</span></span><br><span class="line">[ $a == $b ]</span><br><span class="line">[ $a != $b ]</span><br><span class="line">[ $a eq $b ]</span><br><span class="line">[ $a ne $b ]</span><br><span class="line">[ $a gt $b ]</span><br><span class="line">[ $a lt $b ]</span><br><span class="line">[ $a ge $b ]</span><br><span class="line">[ $a le $b ]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">布尔运算</span></span><br><span class="line">[ ! $a eq $b ]</span><br><span class="line">[ $a eq $b -o $a le $b ]</span><br><span class="line">[ $a eq $b -a $a le $b ]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">字符串运算符</span></span><br><span class="line">[ $c = $d ]</span><br><span class="line">[ $c != $d ]</span><br><span class="line">[ -z $c ]</span><br><span class="line">[ -n $d ]</span><br><span class="line">[ str $c ] # 字符串是否为空</span><br></pre></td></tr></table></figure><h6 id="文件测试运算符"><a href="#文件测试运算符" class="headerlink" title="文件测试运算符"></a>文件测试运算符</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[ -e $file ] #文件是否存在</span><br><span class="line">[ -d $file ] #是否是目录</span><br><span class="line">[ -f $file ] #是否是普通文件</span><br><span class="line">[ -s $file ] #是否不为空</span><br><span class="line">[ -r -w -x ] #是否可读可写可执行</span><br></pre></td></tr></table></figure><h6 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h6><ul><li><p>*：代表匹配任意字符</p></li><li><p>？：一个？代表一个字符</p></li><li><p>;：连续不同命令的分隔符</p></li><li><p>[[0-9]]: 匹配0-9之间的10个数字</p></li></ul><h6 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h6><ul><li>\ : 使反斜杠后边的一个变量变成一个单纯的字符串</li><li>‘’ : 转义其中所以变量保存为单纯的字符串</li><li>“ “ : 保留属性，不进行转义处理</li><li>&#96;&#96; ： 把其中命令执行后返回结果</li></ul><h6 id="正则表达式（用于处理文件内容，而不是文件）"><a href="#正则表达式（用于处理文件内容，而不是文件）" class="headerlink" title="正则表达式（用于处理文件内容，而不是文件）"></a>正则表达式（用于处理文件内容，而不是文件）</h6><ul><li><p>^</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep &#x27;^1&#x27;</span><br></pre></td></tr></table></figure></li><li><p>$</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep &#x27;host%&#x27;</span><br></pre></td></tr></table></figure></li><li><p>^$</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep -n &#x27;^%&#x27; </span><br></pre></td></tr></table></figure></li><li><p>.</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep &#x27;.&#x27; #匹配任意一个字符</span><br></pre></td></tr></table></figure></li><li><p>\ : 转移字符</p></li><li><ul><li></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep &#x27;0*&#x27;  #1个或多个前面一个字符</span><br></pre></td></tr></table></figure></li><li><p>.*</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">匹配所有字符，包括空格</span></span><br></pre></td></tr></table></figure></li><li><p>a\{3\}</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重复三次a</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="三剑客"><a href="#三剑客" class="headerlink" title="三剑客"></a>三剑客</h2><h6 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h6><blockquote><p>用于搜索，并打印</p></blockquote><ul><li>参数<ul><li>-i : 忽略大小写</li><li>-v : 取反</li><li>-n : 列出行号</li><li>-c ：只输出数量</li><li>-o ：只输出匹配的内容</li></ul></li></ul><h6 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h6><p>awk + option(-F) + pattern(条件，写在引号内) + action（{print $1})  </p><blockquote><p><a href="https://blog.csdn.net/stpeace/article/details/46848873?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165346582616782248561796%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165346582616782248561796&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~top_positive~default-1-46848873-null-null.nonecase&amp;utm_term=awk&amp;spm=1018.2226.3001.4450">https://blog.csdn.net/stpeace/article/details/46848873?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165346582616782248561796%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165346582616782248561796&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~top_positive~default-1-46848873-null-null.nonecase&amp;utm_term=awk&amp;spm=1018.2226.3001.4450</a></p></blockquote><p>sed</p><blockquote></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux脚本&quot;&gt;&lt;a href=&quot;#Linux脚本&quot; class=&quot;headerlink&quot; title=&quot;Linux脚本&quot;&gt;&lt;/a&gt;Linux脚本&lt;/h1&gt;&lt;h2 id=&quot;shebang&quot;&gt;&lt;a href=&quot;#shebang&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
    <category term="sh" scheme="http://example.com/tags/sh/"/>
    
  </entry>
  
  <entry>
    <title>工作经验小笔记</title>
    <link href="http://example.com/2022/05/25/%E5%B7%A5%E4%BD%9C%E7%BB%8F%E9%AA%8C%E5%B0%8F%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2022/05/25/%E5%B7%A5%E4%BD%9C%E7%BB%8F%E9%AA%8C%E5%B0%8F%E7%AC%94%E8%AE%B0/</id>
    <published>2022-05-25T03:21:25.000Z</published>
    <updated>2022-07-07T00:30:09.729Z</updated>
    
    <content type="html"><![CDATA[<h1 id="工作经验小笔记"><a href="#工作经验小笔记" class="headerlink" title="工作经验小笔记"></a>工作经验小笔记</h1><h2 id="2022-x2F-5-x2F-25"><a href="#2022-x2F-5-x2F-25" class="headerlink" title="2022&#x2F;5&#x2F;25"></a>2022&#x2F;5&#x2F;25</h2><h6 id="linux定位文件位置"><a href="#linux定位文件位置" class="headerlink" title="linux定位文件位置"></a>linux定位文件位置</h6><ul><li><p>whereis</p><blockquote><p>但是该数据库文件并不是实时更新，默认情况下时一星期更新一次，因此，我们在用whereis和locate 查找文件时，有时会找到已经被删除的数据，或者刚刚建立文件，却无法查找到，原因就是因为数据库文件没有被更新。 </p></blockquote></li><li><p>find</p><blockquote><p><a href="https://blog.csdn.net/l_liangkk/article/details/81294260?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165344251116782350987435%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165344251116782350987435&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-81294260-null-null.142%5Ev10%5Epc_search_result_control_group,157%5Ev12%5Econtrol&amp;utm_term=find%E5%91%BD%E4%BB%A4&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/l_liangkk/article/details/81294260?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165344251116782350987435%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165344251116782350987435&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-81294260-null-null.142^v10^pc_search_result_control_group,157^v12^control&amp;utm_term=find%E5%91%BD%E4%BB%A4&amp;spm=1018.2226.3001.4187</a></p></blockquote></li><li><p>which</p><blockquote><p>which命令的作用是，在PATH变量指定的路径中，搜索某个系统命令的位置，并且返回第一个搜索结果。</p><p>也就是说，使用which命令，就可以看到某个系统命令是否存在，以及执行的到底是哪一个位置的命令。 </p><p>命令行输入export可以查看PATH变量</p></blockquote></li><li><p>locate</p><blockquote><p>yum -y install mlocate</p><p><a href="https://blog.csdn.net/yspg_217/article/details/122113017?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165345743216782425186259%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165345743216782425186259&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-122113017-null-null.142%5Ev10%5Epc_search_result_control_group,157%5Ev12%5Econtrol&amp;utm_term=linux+locate&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/yspg_217/article/details/122113017?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165345743216782425186259%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165345743216782425186259&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-122113017-null-null.142^v10^pc_search_result_control_group,157^v12^control&amp;utm_term=linux+locate&amp;spm=1018.2226.3001.4187</a></p></blockquote></li></ul><h6 id="x2F"><a href="#x2F" class="headerlink" title=".&#x2F;"></a>.&#x2F;</h6><p><img src="/image-20220525142207111.png" alt="image-20220525142207111"></p><h6 id="sh和bash"><a href="#sh和bash" class="headerlink" title="sh和bash"></a>sh和bash</h6><blockquote><p>sh 遵循POSIX规范：“当某行代码出错时，不继续往下解释”。bash 就算出错，也会继续向下执行。</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash --posix</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/sh</span></span><br></pre></td></tr></table></figure><h6 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h6><blockquote><p><a href="https://blog.csdn.net/u013197629/article/details/73608613?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165345862016782184644073%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165345862016782184644073&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-73608613-null-null.142%5Ev10%5Epc_search_result_control_group,157%5Ev12%5Econtrol&amp;utm_term=linux%E6%9D%83%E9%99%90&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/u013197629/article/details/73608613?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165345862016782184644073%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165345862016782184644073&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-73608613-null-null.142^v10^pc_search_result_control_group,157^v12^control&amp;utm_term=linux%E6%9D%83%E9%99%90&amp;spm=1018.2226.3001.4187</a></p></blockquote><h6 id="xargs"><a href="#xargs" class="headerlink" title="xargs"></a>xargs</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Administrator@51B6904C3C8A485 ~/test</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span></span></span><br><span class="line"></span><br><span class="line">Administrator@51B6904C3C8A485 ~/test</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">touch</span> a.txt b.txt c.log</span></span><br><span class="line"></span><br><span class="line">Administrator@51B6904C3C8A485 ~/test</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> d; <span class="built_in">cd</span> d</span></span><br><span class="line"></span><br><span class="line">Administrator@51B6904C3C8A485 ~/test/d</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">touch</span> e.txt</span></span><br><span class="line"></span><br><span class="line">Administrator@51B6904C3C8A485 ~/test/d</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> ..</span></span><br><span class="line"></span><br><span class="line">Administrator@51B6904C3C8A485 ~/test</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">find -name <span class="string">&quot;*.txt&quot;</span> | xargs <span class="built_in">rm</span> -rf</span></span><br><span class="line"></span><br><span class="line">Administrator@51B6904C3C8A485 ~/test</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span></span></span><br><span class="line">c.log  d</span><br><span class="line"></span><br><span class="line">Administrator@51B6904C3C8A485 ~/test</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> d/</span></span><br><span class="line"></span><br><span class="line">Administrator@51B6904C3C8A485 ~/test</span><br><span class="line"><span class="meta prompt_">$</span></span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title="$?"></a>$?</h2><p><img src="/image-20220526145422428.png" alt="image-20220526145422428"></p><h2 id="-1"><a href="#-1" class="headerlink" title="[[]]"></a>[[]]</h2><blockquote><p><a href="https://blog.csdn.net/anqixiang/article/details/111598067?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165355092816780357258308%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165355092816780357258308&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-111598067-null-null.142%5Ev10%5Epc_search_result_control_group,157%5Ev12%5Econtrol&amp;utm_term=%5B%5B+%5D%5D&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/anqixiang/article/details/111598067?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165355092816780357258308%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165355092816780357258308&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-111598067-null-null.142^v10^pc_search_result_control_group,157^v12^control&amp;utm_term=%5B%5B+%5D%5D&amp;spm=1018.2226.3001.4187</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;工作经验小笔记&quot;&gt;&lt;a href=&quot;#工作经验小笔记&quot; class=&quot;headerlink&quot; title=&quot;工作经验小笔记&quot;&gt;&lt;/a&gt;工作经验小笔记&lt;/h1&gt;&lt;h2 id=&quot;2022-x2F-5-x2F-25&quot;&gt;&lt;a href=&quot;#2022-x2F-5-x2F-2</summary>
      
    
    
    
    <category term="日常" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="工作" scheme="http://example.com/tags/%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>发展对象理论知识</title>
    <link href="http://example.com/2022/05/17/%E5%8F%91%E5%B1%95%E5%AF%B9%E8%B1%A1%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/"/>
    <id>http://example.com/2022/05/17/%E5%8F%91%E5%B1%95%E5%AF%B9%E8%B1%A1%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86/</id>
    <published>2022-05-17T03:21:25.000Z</published>
    <updated>2022-06-08T01:28:38.871Z</updated>
    
    <content type="html"><![CDATA[<h1 id="发展对象理论知识"><a href="#发展对象理论知识" class="headerlink" title="发展对象理论知识"></a>发展对象理论知识</h1><h2 id="入党誓词"><a href="#入党誓词" class="headerlink" title="入党誓词"></a>入党誓词</h2><blockquote><p>我志愿加入中国共产党，拥护党的纲领，遵守党的章程，履行党员义务，执行党的决定，严守党的纪律，保守党的秘密，对党忠诚，积极工作，为共产主义奋斗终身，随时准备为党和人民牺牲一切，永不叛党。</p></blockquote><h2 id="四个意识"><a href="#四个意识" class="headerlink" title="四个意识"></a>四个意识</h2><blockquote><p>政治意识、大局意识、核心意识、看齐意识</p></blockquote><h2 id="四个自信"><a href="#四个自信" class="headerlink" title="四个自信"></a>四个自信</h2><blockquote><p>道路自信、理论自信、制度自信、文化自信</p></blockquote><h2 id="两个确立-amp-两个维护"><a href="#两个确立-amp-两个维护" class="headerlink" title="两个确立&amp;两个维护"></a>两个确立&amp;两个维护</h2><blockquote><p>确立习近平同志党中央的核心、全党的核心地位，确立习近平新时代中国特色社会主义思想的指导地位。</p><p>坚决维护习近平总书记中央的核心，全党的核心地位，坚决维护党中央权威和集中统一领导</p></blockquote><p><img src="/img/image-20220517082320646.png" alt="image-20220517082320646"></p><h2 id="建团百年"><a href="#建团百年" class="headerlink" title="建团百年"></a>建团百年</h2><blockquote><p>2022年5月10日上午，庆祝中国共产主义青年团成立100周年大会在北京人民大会堂隆重举行</p><p>中国共产主义青年团第一次全国代表大会于1922年5月5日在广州这片先锋之地召开</p></blockquote><h2 id="党的核心思想"><a href="#党的核心思想" class="headerlink" title="党的核心思想"></a>党的核心思想</h2><blockquote><p>实事求是</p></blockquote><p><img src="/img/image-20220517082751569.png" alt="image-20220517082751569"></p><h2 id="十九届六中全会内容"><a href="#十九届六中全会内容" class="headerlink" title="十九届六中全会内容"></a>十九届六中全会内容</h2><blockquote><p>全会最重要的成果是审议通过了《中共中央关于党的百年奋斗重大成就和历史经验的决议》</p><p>建党1921年7月23日</p><p>1945年党的六届七中全会制定了《关于若干历史问题的决议》</p><p>1981年党的十一届六中全会制定了《关于建国以来党的若干历史问题的决议》</p><p>第一个特点是，与前两个历史决议主要总结党的历史教训、分清历史是非不同，这次主要总结党的百年奋斗重大成就和历史经验。</p><p>第二个特点是，对于党在新民主主义革命时期、社会主义革命和建设时期的历史，前两个决议已经作过系统总结；党的十一届三中全会召开二十周年、三十周年、四十周年也都作过了系统总结。基于此，这次《决议》突出中国特色社会主义新时代这个重点，用较大篇幅总结党的十八大以来的原创性思想、变革性实践、突破性进展和标志性成果。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;发展对象理论知识&quot;&gt;&lt;a href=&quot;#发展对象理论知识&quot; class=&quot;headerlink&quot; title=&quot;发展对象理论知识&quot;&gt;&lt;/a&gt;发展对象理论知识&lt;/h1&gt;&lt;h2 id=&quot;入党誓词&quot;&gt;&lt;a href=&quot;#入党誓词&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="入党材料" scheme="http://example.com/categories/%E5%85%A5%E5%85%9A%E6%9D%90%E6%96%99/"/>
    
    
    <category term="发展对象" scheme="http://example.com/tags/%E5%8F%91%E5%B1%95%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>ZLMediaKit+WVP-GB28281-pro部署</title>
    <link href="http://example.com/2022/05/15/ZLMediaKit+WVP-GB28281-pro%E9%83%A8%E7%BD%B2/"/>
    <id>http://example.com/2022/05/15/ZLMediaKit+WVP-GB28281-pro%E9%83%A8%E7%BD%B2/</id>
    <published>2022-05-15T03:21:25.000Z</published>
    <updated>2022-06-08T01:28:38.868Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ZLMediaKit-WVP-GB28281-pro部署"><a href="#ZLMediaKit-WVP-GB28281-pro部署" class="headerlink" title="ZLMediaKit+WVP-GB28281-pro部署"></a>ZLMediaKit+WVP-GB28281-pro部署</h1><blockquote><p>【金山文档】 ZLMediaKit+WVP-GB28181-Pro部署手册<br><a href="https://kdocs.cn/l/cphp5R2HJpom">https://kdocs.cn/l/cphp5R2HJpom</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ZLMediaKit-WVP-GB28281-pro部署&quot;&gt;&lt;a href=&quot;#ZLMediaKit-WVP-GB28281-pro部署&quot; class=&quot;headerlink&quot; title=&quot;ZLMediaKit+WVP-GB28281-pro部署&quot;&gt;&lt;/a&gt;ZL</summary>
      
    
    
    
    <category term="视频监控" scheme="http://example.com/categories/%E8%A7%86%E9%A2%91%E7%9B%91%E6%8E%A7/"/>
    
    
    <category term="ZLMediaKit" scheme="http://example.com/tags/ZLMediaKit/"/>
    
    <category term="WVP-GB28281-pro" scheme="http://example.com/tags/WVP-GB28281-pro/"/>
    
  </entry>
  
  <entry>
    <title>SIP服务接口</title>
    <link href="http://example.com/2022/05/13/SIP%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/"/>
    <id>http://example.com/2022/05/13/SIP%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/</id>
    <published>2022-05-13T03:21:25.000Z</published>
    <updated>2022-06-08T01:28:38.865Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SIP服务接口"><a href="#SIP服务接口" class="headerlink" title="SIP服务接口"></a>SIP服务接口</h1><h2 id="1-点播"><a href="#1-点播" class="headerlink" title="1. 点播"></a>1. 点播</h2><p><img src="/img/image-20220512145958358.png" alt="image-20220512145958358"></p><blockquote><p><a href="http://localhost:9970/api/play/start/44010200492000000001/34020000001320000001">http://localhost:9970/api/play/start/44010200492000000001/34020000001320000001</a></p></blockquote><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;success&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;app&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rtp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;stream&quot;</span><span class="punctuation">:</span> <span class="string">&quot;44010200492000000001_34020000001320000001&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;deviceID&quot;</span><span class="punctuation">:</span> <span class="string">&quot;44010200492000000001&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;channelId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;34020000001320000001&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;flv&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://192.168.3.197:9980/rtp/44010200492000000001_34020000001320000001.live.flv&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;https_flv&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://192.168.3.197:443/rtp/44010200492000000001_34020000001320000001.live.flv&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ws_flv&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ws://192.168.3.197:9980/rtp/44010200492000000001_34020000001320000001.live.flv&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;wss_flv&quot;</span><span class="punctuation">:</span> <span class="string">&quot;wss://192.168.3.197:443/rtp/44010200492000000001_34020000001320000001.live.flv&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;fmp4&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://192.168.3.197:9980/rtp/44010200492000000001_34020000001320000001.live.mp4&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;https_fmp4&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://192.168.3.197:443/rtp/44010200492000000001_34020000001320000001.live.mp4&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ws_fmp4&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ws://192.168.3.197:9980/rtp/44010200492000000001_34020000001320000001.live.mp4&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;wss_fmp4&quot;</span><span class="punctuation">:</span> <span class="string">&quot;wss://192.168.3.197:443/rtp/44010200492000000001_34020000001320000001.live.mp4&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;hls&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://192.168.3.197:9980/rtp/44010200492000000001_34020000001320000001/hls.m3u8&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;https_hls&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://192.168.3.197:443/rtp/44010200492000000001_34020000001320000001/hls.m3u8&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ws_hls&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ws://192.168.3.197:9980/rtp/44010200492000000001_34020000001320000001/hls.m3u8&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;wss_hls&quot;</span><span class="punctuation">:</span> <span class="string">&quot;wss://192.168.3.197:443/rtp/44010200492000000001_34020000001320000001/hls.m3u8&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ts&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://192.168.3.197:9980/rtp/44010200492000000001_34020000001320000001.live.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;https_ts&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://192.168.3.197:443/rtp/44010200492000000001_34020000001320000001.live.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ws_ts&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ws://192.168.3.197:9980/rtp/44010200492000000001_34020000001320000001.live.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;wss_ts&quot;</span><span class="punctuation">:</span> <span class="string">&quot;wss://192.168.3.197:443/rtp/44010200492000000001_34020000001320000001.live.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;rtmp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rtmp://192.168.3.197:1935/rtp/44010200492000000001_34020000001320000001&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;rtmps&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rtmps://192.168.3.197:19350/rtp/44010200492000000001_34020000001320000001&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;rtsp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rtsp://192.168.3.197:554/rtp/44010200492000000001_34020000001320000001&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;rtsps&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rtsps://192.168.3.197:332/rtp/44010200492000000001_34020000001320000001&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;rtc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://192.168.3.197:443/index/api/webrtc?app=rtp&amp;stream=44010200492000000001_34020000001320000001&amp;type=play&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;mediaServerId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;FQ3TF8yT83wh5Wvz&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;tracks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;codecIdName&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;codecId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;channels&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;sampleBit&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;ready&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;fps&quot;</span><span class="punctuation">:</span> <span class="number">25</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;width&quot;</span><span class="punctuation">:</span> <span class="number">1920</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;codecType&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;sampleRate&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;height&quot;</span><span class="punctuation">:</span> <span class="number">1080</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;codecIdName&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;codecId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;channels&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;sampleBit&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;ready&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;fps&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;width&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;codecType&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;sampleRate&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;height&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;startTime&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;endTime&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;progress&quot;</span><span class="punctuation">:</span> <span class="number">0.0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;transactionInfo&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h6 id="停止点播"><a href="#停止点播" class="headerlink" title="停止点播"></a>停止点播</h6><p><img src="/img/image-20220512160420712.png" alt="image-20220512160420712"></p><blockquote><p>url: <a href="http://localhost:9970/api/play/stop/44010200492000000001/34020000001320000001">http://localhost:9970/api/play/stop/44010200492000000001/34020000001320000001</a></p></blockquote><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;deviceId&quot;</span><span class="punctuation">:</span><span class="string">&quot;44010200492000000001&quot;</span><span class="punctuation">,</span><span class="attr">&quot;channelId&quot;</span><span class="punctuation">:</span><span class="string">&quot;34020000001320000001&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="2-控制摄像头移动"><a href="#2-控制摄像头移动" class="headerlink" title="2. 控制摄像头移动"></a>2. 控制摄像头移动</h2><p><img src="/img/image-20220512152712102.png" alt="image-20220512152712102"></p><blockquote><p>url: <a href="http://localhost:9970/api/ptz/control/44010200492000000001/34020000001320000001?command=stop&amp;horizonSpeed=255&amp;verticalSpeed=255&amp;zoomSpeed=255">http://localhost:9970/api/ptz/control/44010200492000000001/34020000001320000001?command=stop&amp;horizonSpeed=255&amp;verticalSpeed=255&amp;zoomSpeed=255</a></p></blockquote><p><img src="/img/image-20220512152923243.png" alt="image-20220512152923243"></p><h2 id="3-查询设备"><a href="#3-查询设备" class="headerlink" title="3. 查询设备"></a>3. 查询设备</h2><h6 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h6><p><img src="/img/image-20220512153106334.png" alt="image-20220512153106334"></p><blockquote><p>url: <a href="http://localhost:9970/api/device/query/devices?page=1&amp;count=15">http://localhost:9970/api/device/query/devices?page=1&amp;count=15</a></p></blockquote><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;deviceId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;44010200492000000001&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;IP CAMERA&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;manufacturer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Hikvision&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;model&quot;</span><span class="punctuation">:</span> <span class="string">&quot;DS-IPC-T12V3-I&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;firmware&quot;</span><span class="punctuation">:</span> <span class="string">&quot;V5.5.800&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;transport&quot;</span><span class="punctuation">:</span> <span class="string">&quot;TCP&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;streamMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;UDP&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ip&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192.168.3.102&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">52069</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;hostAddress&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192.168.3.102:52069&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;online&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;registerTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-05-12 15:24:18&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;keepaliveTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-05-12 15:29:23&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;channelCount&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;expires&quot;</span><span class="punctuation">:</span> <span class="number">3600</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-05-11 17:42:59&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-05-12 15:29:23&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;mediaServerId&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;firsRegister&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;charset&quot;</span><span class="punctuation">:</span> <span class="string">&quot;GB2312&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;subscribeCycleForCatalog&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;subscribeCycleForMobilePosition&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;mobilePositionSubmissionInterval&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;subscribeCycleForAlarm&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ssrcCheck&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pageNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pageSize&quot;</span><span class="punctuation">:</span> <span class="number">15</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;startRow&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;endRow&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pages&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;prePage&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;nextPage&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;isFirstPage&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;isLastPage&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hasPreviousPage&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hasNextPage&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;navigatePages&quot;</span><span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;navigatepageNums&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="number">1</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;navigateFirstPage&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;navigateLastPage&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h6 id="根据id查询"><a href="#根据id查询" class="headerlink" title="根据id查询"></a>根据id查询</h6><p><img src="/img/image-20220512153332457.png" alt="image-20220512153332457"></p><blockquote><p>url：<a href="http://localhost:9970/api/device/query/devices/44010200492000000001">http://localhost:9970/api/device/query/devices/44010200492000000001</a></p></blockquote><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;deviceId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;44010200492000000001&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;IP CAMERA&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;manufacturer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Hikvision&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;model&quot;</span><span class="punctuation">:</span> <span class="string">&quot;DS-IPC-T12V3-I&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;firmware&quot;</span><span class="punctuation">:</span> <span class="string">&quot;V5.5.800&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;transport&quot;</span><span class="punctuation">:</span> <span class="string">&quot;TCP&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;streamMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;UDP&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ip&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192.168.3.102&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">52069</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hostAddress&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192.168.3.102:52069&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;online&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;registerTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-05-12 15:24:18&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;keepaliveTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-05-12 15:34:24&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;channelCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;expires&quot;</span><span class="punctuation">:</span> <span class="number">3600</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-05-11 17:42:59&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-05-12 15:34:24&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;mediaServerId&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;firsRegister&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;charset&quot;</span><span class="punctuation">:</span> <span class="string">&quot;GB2312&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;subscribeCycleForCatalog&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;subscribeCycleForMobilePosition&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;mobilePositionSubmissionInterval&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;subscribeCycleForAlarm&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ssrcCheck&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="4-查询设备下对应的通道"><a href="#4-查询设备下对应的通道" class="headerlink" title="4. 查询设备下对应的通道"></a>4. 查询设备下对应的通道</h2><p><img src="/img/image-20220512154939704.png" alt="image-20220512154939704"></p><blockquote><p>url：<a href="http://localhost:9970/api/device/query/devices/44010200492000000001/channels?page=1&amp;count=15">http://localhost:9970/api/device/query/devices/44010200492000000001/channels?page=1&amp;count=15</a></p></blockquote><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">81666</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;channelId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;34020000001320000001&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;deviceId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;44010200492000000001&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Camera 01&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;manufacture&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Hikvision&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;model&quot;</span><span class="punctuation">:</span> <span class="string">&quot;IP Camera&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;owner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Owner&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;civilCode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;4401020049&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;block&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Address&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;parental&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;parentId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;44010200492000000001&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;safetyWay&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;registerWay&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;certNum&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;certifiable&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;errCode&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;endTime&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;secrecy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ipAddress&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-05-11 18:44:06&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;longitude&quot;</span><span class="punctuation">:</span> <span class="number">0.0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;latitude&quot;</span><span class="punctuation">:</span> <span class="number">0.0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;subCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;streamId&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;hasAudio&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;channelType&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ptztypeText&quot;</span><span class="punctuation">:</span> <span class="string">&quot;未知&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ptztype&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pageNum&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pageSize&quot;</span><span class="punctuation">:</span> <span class="number">15</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;startRow&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;endRow&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pages&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;prePage&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;nextPage&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;isFirstPage&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;isLastPage&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hasPreviousPage&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hasNextPage&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;navigatePages&quot;</span><span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;navigatepageNums&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="number">1</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;navigateFirstPage&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;navigateLastPage&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="5-移除设备"><a href="#5-移除设备" class="headerlink" title="5. 移除设备"></a>5. 移除设备</h2><p><img src="/img/image-20220512155135385.png" alt="image-20220512155135385"></p><blockquote><p>url：<a href="http://localhost:9970/api/device/query/devices/44010200492000000001/delete">http://localhost:9970/api/device/query/devices/44010200492000000001/delete</a></p></blockquote><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;deviceId&quot;</span><span class="punctuation">:</span><span class="string">&quot;44010200492000000001&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="6-设备状态查询"><a href="#6-设备状态查询" class="headerlink" title="6. 设备状态查询"></a>6. 设备状态查询</h2><p><img src="/img/image-20220512155612192.png" alt="image-20220512155612192"></p><blockquote><p>url: <a href="http://localhost:9970/api/device/query/devices/44010200492000000001/status">http://localhost:9970/api/device/query/devices/44010200492000000001/status</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SIP服务接口&quot;&gt;&lt;a href=&quot;#SIP服务接口&quot; class=&quot;headerlink&quot; title=&quot;SIP服务接口&quot;&gt;&lt;/a&gt;SIP服务接口&lt;/h1&gt;&lt;h2 id=&quot;1-点播&quot;&gt;&lt;a href=&quot;#1-点播&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="视频监控" scheme="http://example.com/categories/%E8%A7%86%E9%A2%91%E7%9B%91%E6%8E%A7/"/>
    
    
    <category term="WVP" scheme="http://example.com/tags/WVP/"/>
    
  </entry>
  
  <entry>
    <title>Docker</title>
    <link href="http://example.com/2022/05/05/Docker/"/>
    <id>http://example.com/2022/05/05/Docker/</id>
    <published>2022-05-05T03:21:25.000Z</published>
    <updated>2022-06-08T01:28:38.858Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>一款产品：开发-上线：两套环境（应用环境和应用配置）</p><p>开发 – 运维 </p><p><code>问题</code>：版本更新导致服务不可用！</p><p> 发布一个项目，能不能带着环境打包。</p><p>java – apk – 发布（应用商店）– 张三使用apk – 安装即可用</p><p>java – jar（环境）– 打包项目带上环境（镜像）– Docker仓库：商店 – 下载我们发布的镜像 – 直接运行即可</p><h2 id="2-历史"><a href="#2-历史" class="headerlink" title="2. 历史"></a>2. 历史</h2><h6 id="物理机部署时代"><a href="#物理机部署时代" class="headerlink" title="物理机部署时代"></a>物理机部署时代</h6><blockquote><p>进程间资源抢占。如果某个进程耗用了100%的CPU资源，其他的进程无法提供服务。或者如果一个进程因为突发异常很多，日志把磁盘打满了，所有的进程都要挂掉。进程间抢占资源导致其他进程无法提供服务所导致的血案数不胜数。</p></blockquote><h6 id="虚拟机部署时代–解决资源共享问题"><a href="#虚拟机部署时代–解决资源共享问题" class="headerlink" title="虚拟机部署时代–解决资源共享问题"></a>虚拟机部署时代–解决资源共享问题</h6><blockquote><p>软件版本和配置文件容易碎片化 </p><p>当线上出问题，需要排查到基础软件层面时，由于软件版本碎片化问题，导致排查变得棘手</p></blockquote><h6 id="容器化时代"><a href="#容器化时代" class="headerlink" title="容器化时代"></a>容器化时代</h6><blockquote><p>容器如果要升级软件版本，那就修改镜像文件。这样部署时集群内所有的机器重新拉取新的镜像，软件因此跟着一起升级。</p><p>有了容器技术，生产环境为何还需要部署虚拟机</p></blockquote><h2 id="3-能做什么"><a href="#3-能做什么" class="headerlink" title="3. 能做什么"></a>3. 能做什么</h2><h6 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h6><p><img src="C:/Users/Megumi/AppData/Roaming/Typora/typora-user-images/image-20220505170851702.png" alt="image-20220505170851702"></p><p>缺点：</p><ul><li>资源占用十分多</li><li>冗余步骤多</li><li>启动很慢！</li></ul><h6 id="容器化技术"><a href="#容器化技术" class="headerlink" title="容器化技术"></a>容器化技术</h6><blockquote><p>并不是模拟一个完整的操作系统</p></blockquote><p><img src="C:/Users/Megumi/AppData/Roaming/Typora/typora-user-images/image-20220505171127157.png" alt="image-20220505171127157"></p><p>比较docker和虚拟机技术的不同：</p><ul><li>传统虚拟机，虚拟出一条硬件，运行一个完整的操作系统，然后再这个系统上安装和运行软件</li><li>容器内的应用直接运行再宿主机的内容，容器是没有自己的内核的，也没有虚拟我们的硬件，所以就轻便</li><li>每个容器见是相互隔离的，都有一个属于自己的文件系统不互相影响</li></ul><h6 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h6><blockquote><p>应用更快速的交付和部署</p></blockquote><p>传统：一堆帮助文档，安装程序</p><p>Docker：打包镜像发布测试，一键运行</p><blockquote><p>更便捷的升级和拓缩容</p></blockquote><p>使用了Docker之后，部署应用和搭积木一样</p><blockquote><p>更简单的系统运维</p></blockquote><p>在容器化之后，我们的开发，测试环境都是高度一致的</p><blockquote><p>更高效的计算资源利用</p></blockquote><p>Docker是内核级别的虚拟化</p><h2 id="4-Docker安装"><a href="#4-Docker安装" class="headerlink" title="4. Docker安装"></a>4. Docker安装</h2><p><img src="C:/Users/Megumi/AppData/Roaming/Typora/typora-user-images/image-20220505172854323.png" alt="image-20220505172854323"></p><h6 id="镜像："><a href="#镜像：" class="headerlink" title="镜像："></a>镜像：</h6><p>docker镜像就好比是一个模板，可以通过这个模板来创建容器服务，tomcat镜像&#x3D;&#x3D;》run&#x3D;&#x3D;》tomcat容器，通过这个镜像可以创建多个容器，最终服务运行实在容器中的</p><h6 id="容器："><a href="#容器：" class="headerlink" title="容器："></a>容器：</h6><p>Docker利用容器技术，独立运行一个或者一组应用，通过镜像来创建</p><p>目前可以把容器理解为就是一个简单的linux系统</p><h6 id="仓库："><a href="#仓库：" class="headerlink" title="仓库："></a>仓库：</h6><p>仓库就是存放镜像的地方</p><p><code>配置镜像加速！</code></p><h6 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 卸载旧的版本</span><br><span class="line">yum remove docker</span><br><span class="line">// 需要的安装包</span><br><span class="line">yum install -y yum-utils</span><br><span class="line">// 设置镜像的仓库</span><br><span class="line">yum-config-manager \</span><br><span class="line">--add-repo \</span><br><span class="line">http://mirros.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">// 安装最新的docker引擎</span><br><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line">// 启动docker</span><br><span class="line">systemctl start docker</span><br><span class="line">// 查看docker</span><br><span class="line">docker version</span><br><span class="line">// docker run</span><br><span class="line"></span><br><span class="line">// 查看镜像</span><br><span class="line">docker image</span><br><span class="line">// 卸载docker</span><br><span class="line">yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line">rm -rf /var/lib/docker (docker 默认资源路径)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="C:/Users/Megumi/AppData/Roaming/Typora/typora-user-images/image-20220506091246023.png" alt="image-20220506091246023"></p><h2 id="5-回顾helloworld"><a href="#5-回顾helloworld" class="headerlink" title="5. 回顾helloworld"></a>5. 回顾helloworld</h2><p><img src="C:/Users/Megumi/AppData/Roaming/Typora/typora-user-images/image-20220506092154916.png" alt="image-20220506092154916"></p><h2 id="6-底层原理"><a href="#6-底层原理" class="headerlink" title="6. 底层原理"></a>6. 底层原理</h2><h6 id="Docker是怎么工作的"><a href="#Docker是怎么工作的" class="headerlink" title="Docker是怎么工作的"></a>Docker是怎么工作的</h6><p>docker是一个Client-Server结构的系统，Docker的守护进程运行在主机上，通过Socket从客户端访问，DockerServer接受到Docker-Client的指令，就会执行这个命令！</p><h6 id="核心技术"><a href="#核心技术" class="headerlink" title="核心技术"></a>核心技术</h6><blockquote><p><code>Linux上的名字空间</code>：</p><p>​pid名字空间，隔离进程、net隔离网络（独立的网络设备，IP地址，路由表）</p><p>​ipc名字空间（进程间的交互方法：包括信号量、消息队列和共享内存）docker只满足相同pid之间进行交互</p><p>​mnt名字空间：将一个进程放进一个特定的目录执行，允许不同mnt看见的目录结构不同。</p><p>​uts名字空间：允许每个容器又独立的hostname和domain name，视为一个独立的结点，而非一个进程</p><p>​user名字空间：每个容器可以又不同的用户和组id</p><p><code>控制组</code>：</p><p>​主要用来对共享资源进行隔离、限制、审计等。只有能控制分配到容器的资源，才能避免当多个容器同时运行时的对系统资源的竞争。</p><p><code>Union文件系统</code>：</p><p>​是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统</p><p><code>容器格式</code></p><p>​Docker 采用了 LXC 中的容器格式。自 1.20 版本开始，Docker 也开始支持新的 libcontainer 格式，并作为默认选项。</p></blockquote><h2 id="7-Docker的网络实现"><a href="#7-Docker的网络实现" class="headerlink" title="7. Docker的网络实现"></a>7. Docker的网络实现</h2><p>Docker的网络实现就是利用了Linux上的网络名字空间和虚拟网络设备</p><h6 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h6><p><code>网络接口</code>：虚拟的接口（转发效率较高）</p><p><code>路由机制</code>：在内核中进行数据复制来实现虚拟接口之间的数据转发，发送接口的发送缓存中的数据包直接被复制到接受接口的接收缓存中。对于本地系统和容器内系统看来就像是一个正常的以太网卡。不需要真正痛外部通信速度快得多。<code>docker利用了这项技术，在本地主机和容器内分别创建了一个虚拟接口，并让他们彼此连通，这样的一对接口叫做veth pair</code></p><p><img src="D:\code\BLog\source_posts\image-20220517110005033.png" alt="image-20220517110005033"></p><p><code>docker run --net</code></p><ul><li>–net&#x3D;bridge 连接到默认的网桥</li><li>host 连接到主机</li><li>container 连接到已存在的网络栈</li><li>none 展示不连接</li></ul><h2 id="8-Docker-file"><a href="#8-Docker-file" class="headerlink" title="8. Docker file"></a>8. Docker file</h2><h6 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h6><p>由一行行命令语句组成，并且支持#开头</p><p><code>四部分</code></p><ul><li><p>基础镜像信息</p></li><li><p>维护者信息</p></li><li><p>镜像操作指令</p><p>后面则是镜像操作指令，例如 RUN 指令，RUN 指令将对镜像执行跟随的命令。每运行一条 RUN 指令，镜像添加新的一层，并提交。</p></li><li><p>容器启动时执行指令</p></li></ul><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This dockerfile uses the ubuntu image</span></span><br><span class="line"><span class="comment"># VERSION 2 - EDITION 1</span></span><br><span class="line"><span class="comment"># Author: docker_user</span></span><br><span class="line"><span class="comment"># Command format: Instruction [arguments / command] ..</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Base image to use, this must be set as the first line</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu</span><br><span class="line"></span><br><span class="line"><span class="comment"># Maintainer: docker_user &lt;docker_user at email.com&gt; (@docker_user)</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> docker_user docker_user@email.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># Commands to update the image</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;deb http://archive.ubuntu.com/ubuntu/ raring main universe&quot;</span> &gt;&gt; /etc/apt/sources.list</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y nginx</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;\ndaemon off;&quot;</span> &gt;&gt; /etc/nginx/nginx.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Commands when creating a new container</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> /usr/sbin/nginx</span></span><br></pre></td></tr></table></figure><p><code>指令</code></p><ul><li><p>FROM</p><p>第一条指令必须为FROM指令，并且在同一个Dockerfile中创建多个镜像时，可以使用多个FROM，每个镜像一次</p></li><li><p>MAINTAINER</p><p>指定维护者信息</p></li><li><p>RUN</p><p>每条 RUN 指令将在当前镜像基础上执行指定命令，并提交为新的镜像。当命令较长时可以使用 \ 来换行</p></li><li><p>CMD</p><p>指定启动容器时执行的命令，每个 Dockerfile 只能有一条 CMD 命令。如果指定了多条命令，只有最后一条会被执行。</p></li><li><p>EXPOSE</p><p>告诉 Docker 服务端容器暴露的端口号，供互联系统使用。在启动容器时需要通过 -P，Docker 主机会自动分配一个端口转发到指定的端口。</p></li><li><p>ENV</p><p>格式为 ENV 。 指定一个环境变量，会被后续 RUN 指令使用，并在容器运行时保持。</p></li></ul><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ENV</span> PG_MAJOR <span class="number">9.3</span></span><br><span class="line"><span class="keyword">ENV</span> PG_VERSION <span class="number">9.3</span>.<span class="number">4</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> curl -SL http://example.com/postgres-<span class="variable">$PG_VERSION</span>.tar.xz | tar -xJC /usr/src/postgress &amp;&amp; …</span></span><br><span class="line"><span class="keyword">ENV</span> PATH /usr/local/postgres-$PG_MAJOR/bin:$PATH</span><br><span class="line"><span class="comment"># Nginx</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># VERSION               0.0.1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span>      ubuntu</span><br><span class="line"><span class="keyword">MAINTAINER</span> Victor Vieux &lt;victor@docker.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y inotify-tools nginx apache2 openssh-server</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Firefox over VNC</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># VERSION               0.3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> ubuntu</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install vnc, xvfb in order to create a &#x27;fake&#x27; display and firefox</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y x11vnc xvfb firefox</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> /.vnc</span></span><br><span class="line"><span class="comment"># Setup a password</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> x11vnc -storepasswd 1234 ~/.vnc/passwd</span></span><br><span class="line"><span class="comment"># Autostart firefox (might not be the best way, but it does the trick)</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> bash -c <span class="string">&#x27;echo &quot;firefox&quot; &gt;&gt; /.bashrc&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">5900</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash">    [<span class="string">&quot;x11vnc&quot;</span>, <span class="string">&quot;-forever&quot;</span>, <span class="string">&quot;-usepw&quot;</span>, <span class="string">&quot;-create&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Multiple images example</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># VERSION               0.1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> ubuntu</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> foo &gt; bar</span></span><br><span class="line"><span class="comment"># Will output something like ===&gt; 907ad6c2736f</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> ubuntu</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> moo &gt; oink</span></span><br><span class="line"><span class="comment"># Will output something like ===&gt; 695d7793cbe4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You᾿ll now have two images, 907ad6c2736f with /bar, and 695d7793cbe4 with</span></span><br><span class="line"><span class="comment"># /oink.</span></span><br></pre></td></tr></table></figure><ul><li><p>ADD</p><p>该命令将复制指定的 到容器中的 。 其中 可以是Dockerfile所在目录的一个相对路径；也可以是一个 URL；还可以是一个 tar 文件（自动解压为目录）。</p></li><li><p>COPY</p><p>复制本地主机的 （为 Dockerfile 所在目录的相对路径）到容器中的 。</p><p>当使用本地目录为源目录时，推荐使用 COPY。</p></li><li><p>VOLUME</p><p>创建一个可以从本地主机或其他容器挂载的挂载点，一般用来存放数据库和需要保持的数据等。</p></li><li><p>USER</p><p>指定运行容器的用户名或UID</p></li><li><p>WORKDIR</p><p>为后续的RUN、CMD、ENTRYPOINT指令配置工作目录</p><p>可以使用多个 WORKDIR 指令，后续命令如果参数是相对路径，则会基于之前命令指定的路径。例如</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /a</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> b</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> c</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">pwd</span></span></span><br></pre></td></tr></table></figure></li><li><p>ONBUILD</p><p>配置当前的镜像作为别的镜像的基础镜像</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">[...]</span><br><span class="line"><span class="keyword">ONBUILD</span> <span class="keyword">ADD</span><span class="language-bash"> . /app/src</span></span><br><span class="line"><span class="keyword">ONBUILD</span> <span class="keyword">RUN</span><span class="language-bash"> /usr/local/bin/python-build --<span class="built_in">dir</span> /app/src</span></span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> image-A</span><br><span class="line"></span><br><span class="line"><span class="comment">#Automatically run the following</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> . /app/src</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> /usr/local/bin/python-build --<span class="built_in">dir</span> /app/src</span></span><br></pre></td></tr></table></figure></li></ul><h6 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h6><p>基本的格式为 docker build [选项] 路径，</p><p>该命令将读取指定路径下（包括子目录）的 Dockerfile</p><p>并将该路径下所有内容发送给 Docker 服务端，由服务端来创建镜像。</p><p>因此一般建议放置 Dockerfile 的目录为空目录。也可以通过 .dockerignore 文件（每一行添加一条匹配模式）来让 Docker 忽略路径下的目录和文件。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker build -t myrepo/myapp /tmp/test1/</span><br></pre></td></tr></table></figure><h2 id="9-docker安装"><a href="#9-docker安装" class="headerlink" title="9. docker安装"></a>9. docker安装</h2><p>环境centos7.*</p><h2 id="10-运行helloWorld"><a href="#10-运行helloWorld" class="headerlink" title="10. 运行helloWorld"></a>10. 运行helloWorld</h2><h6 id="下载Ubuntu14-02镜像"><a href="#下载Ubuntu14-02镜像" class="headerlink" title="下载Ubuntu14.02镜像"></a>下载Ubuntu14.02镜像</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker run ubuntu:14.04 /bin/echo &#x27;Hello world&#x27;</span><br></pre></td></tr></table></figure><h6 id="交互式的容器"><a href="#交互式的容器" class="headerlink" title="交互式的容器"></a>交互式的容器</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker run -t -i ubuntu:14.04 /bin/bash</span></span><br><span class="line">root@af8bae53bdd3:/#</span><br></pre></td></tr></table></figure><p>但是我们也加了两个新的标示：<code>-t</code>和<code>-i</code>。<code>-t</code>表示在新容器内指定一个伪终端或终端，<code>-i</code>表示允许我们对容器内的STDIN进行交互。</p><h6 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@af8bae53bdd3:/# exit</span><br></pre></td></tr></table></figure><h6 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker run -d ubuntu:14.04 /bin/sh -c <span class="string">&quot;while true; do echo hello world; sleep 1; done&quot;</span></span></span><br><span class="line">1e5535038e285177d5214659a068137486f96ee5c2e85a4ac52dc83f2ebe4147</span><br></pre></td></tr></table></figure><p>为什么不是我们看到的一大堆的”hello word”?而是docker返回的一个很长的字符串：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1e5535038e285177d5214659a068137486f96ee5c2e85a4ac52dc83f2ebe4147</span><br></pre></td></tr></table></figure><p>这个长的字符串叫做<code>容器ID</code>。它是容器的唯一标识，所以我们可以使用它。</p><p><img src="D:\code\BLog\source_posts\image-20220517135354600.png" alt="image-20220517135354600"></p><h6 id="终止docker"><a href="#终止docker" class="headerlink" title="终止docker"></a>终止docker</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker stop intelligent_aryabhata</span><br></pre></td></tr></table></figure><h2 id="11-Docker安装程序"><a href="#11-Docker安装程序" class="headerlink" title="11. Docker安装程序"></a>11. Docker安装程序</h2><h6 id="创建Dockerfile"><a href="#创建Dockerfile" class="headerlink" title="创建Dockerfile"></a>创建Dockerfile</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nano Dockerfile</span><br></pre></td></tr></table></figure><h6 id="构建Dockerfile文件"><a href="#构建Dockerfile文件" class="headerlink" title="构建Dockerfile文件"></a>构建Dockerfile文件</h6><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Format: FROM    repository[:version]</span></span><br><span class="line"><span class="keyword">FROM</span>       ubuntu:latest</span><br><span class="line"><span class="comment"># Format: MAINTAINER Name </span></span><br><span class="line"><span class="keyword">MAINTAINER</span> M.Y. Name </span><br><span class="line"><span class="comment"># Installation:</span></span><br><span class="line"><span class="comment"># Import MongoDB public GPG key AND create a MongoDB list file</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&#x27;deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen&#x27;</span> | <span class="built_in">tee</span> /etc/apt/sources.list.d/10gen.list</span></span><br><span class="line"><span class="comment"># Update apt-get sources AND install MongoDB</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y -q mongodb-org</span></span><br><span class="line"><span class="comment"># Create the MongoDB data directory</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> -p /data/db</span></span><br><span class="line"><span class="comment"># Expose port 27017 from the container to the host</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">27017</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set usr/bin/mongod as the dockerized entry-point application</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> usr/bin/mongod</span></span><br></pre></td></tr></table></figure><h6 id="根据DockerFile构建镜像"><a href="#根据DockerFile构建镜像" class="headerlink" title="根据DockerFile构建镜像"></a>根据DockerFile构建镜像</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Format: sudo docker build --tag/-t / .</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Example:</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker build --tag my/repo .</span></span><br></pre></td></tr></table></figure><h6 id="推送到DockerHub上做分享"><a href="#推送到DockerHub上做分享" class="headerlink" title="推送到DockerHub上做分享"></a>推送到DockerHub上做分享</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker login</span><br><span class="line"></span><br><span class="line">sudo docker push my/repo</span><br></pre></td></tr></table></figure><h6 id="使用MongoDB镜像"><a href="#使用MongoDB镜像" class="headerlink" title="使用MongoDB镜像"></a>使用MongoDB镜像</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker run --name mongo_instance_001 -d my/repo</span><br><span class="line"></span><br><span class="line">sudo docker run --name mongo_instance_001 -d my/repo --noprealloc --smallfiles</span><br><span class="line"></span><br><span class="line">sudo docker logs mongo_instance_001</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker&quot;&gt;&lt;a href=&quot;#Docker&quot; class=&quot;headerlink&quot; title=&quot;Docker&quot;&gt;&lt;/a&gt;Docker&lt;/h1&gt;&lt;h2 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1</summary>
      
    
    
    
    <category term="项目部署" scheme="http://example.com/categories/%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
    <category term="项目部署" scheme="http://example.com/tags/%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>Nginx</title>
    <link href="http://example.com/2022/05/05/Nginx/"/>
    <id>http://example.com/2022/05/05/Nginx/</id>
    <published>2022-05-05T03:21:25.000Z</published>
    <updated>2022-06-08T01:28:38.865Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h2 id="1-Nginx概述"><a href="#1-Nginx概述" class="headerlink" title="1. Nginx概述"></a>1. Nginx概述</h2><h6 id="高并发"><a href="#高并发" class="headerlink" title="高并发:"></a>高并发:</h6><p>Nginx是Apache服务器不错的替代品: Nginx在美国是做虚拟主机生意的老板们经常选择的软件平台之一. 能够支持高达 50,000 个并发连接数的响应</p><h6 id="负载均衡："><a href="#负载均衡：" class="headerlink" title="负载均衡："></a>负载均衡：</h6><p>Nginx 既可以在内部直接支持 <a href="https://www.w3cschool.cn/nginxsysc/kdgmwy.html">Rails</a> 和 <a href="https://www.w3cschool.cn/nginxsysc/kdgmwy.html">PHP</a> 程序对外进行服务, 也可以支持作为 <a href="https://www.w3cschool.cn/nginxsysc/kdgmwy.html">HTTP代理</a> 服务器对外进行服务. Nginx采用C进行编写, 不论是系统资源开销还是CPU使用效率都比 <a href="https://www.w3cschool.cn/nginxsysc/kdgmwy.html">Perlbal</a> 要好很多.</p><h6 id="邮件代理服务器："><a href="#邮件代理服务器：" class="headerlink" title="邮件代理服务器："></a>邮件代理服务器：</h6><p>Nginx同时是一个非常优秀的邮件代理服务器</p><h6 id="安装简单，配置简单"><a href="#安装简单，配置简单" class="headerlink" title="安装简单，配置简单"></a>安装简单，配置简单</h6><h6 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h6><p>一个ip，代理多个ip，代理服务网站，多个端口</p><p><img src="/img/nginx/image-20220517232829330.png" alt="image-20220517232829330"></p><p><img src="D:\code\BLog\source_posts\image-20220521084105465.png" alt="image-20220521084105465"></p><h6 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h6><p>在浏览器中配置代理服务器，通过代理服务器进行互联网访问之前访问不到的网站，代理客户</p><h6 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h6><p>和反向代理同理，多个端口互相协调均衡，解决并发问题。</p><ul><li><p>轮询（默认）</p></li><li><p>权重</p><p><img src="D:\code\BLog\source_posts\image-20220521084855551.png" alt="image-20220521084855551"></p></li><li><p>ip_hash（按ip得hash结果分配）</p></li><li><p>fair (按响应时间来分配)</p></li></ul><p><img src="D:\code\BLog\source_posts\image-20220521084357289.png" alt="image-20220521084357289"></p><h6 id="动静平衡"><a href="#动静平衡" class="headerlink" title="动静平衡"></a>动静平衡</h6><p>将动态页面和静态页面放在不同的服务器上，加快解析的速度</p><p><img src="/img/nginx/image-20220517233240040.png" alt="image-20220517233240040"></p><h6 id="nginx高可用"><a href="#nginx高可用" class="headerlink" title="nginx高可用"></a>nginx高可用</h6><p><img src="/img/nginx/image-20220524141141125.png" alt="image-20220524141141125"></p><ul><li><p>安装keepalived</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install keepalived -y</span><br></pre></td></tr></table></figure></li><li><p>配置文件在<code>/etc/keepalived</code>里边</p></li><li><p>&#96;&#96;&#96;conf<br>global_defs {<br>   notification_email {<br> <a href="mailto:&#97;&#x63;&#97;&#x73;&#115;&#101;&#110;&#64;&#102;&#105;&#x72;&#x65;&#119;&#x61;&#108;&#x6c;&#46;&#x6c;&#x6f;&#x63;">&#97;&#x63;&#97;&#x73;&#115;&#101;&#110;&#64;&#102;&#105;&#x72;&#x65;&#119;&#x61;&#108;&#x6c;&#46;&#x6c;&#x6f;&#x63;</a><br> <a href="mailto:&#102;&#97;&#x69;&#108;&#x6f;&#x76;&#101;&#114;&#x40;&#x66;&#105;&#114;&#101;&#x77;&#x61;&#108;&#x6c;&#x2e;&#x6c;&#x6f;&#99;">&#102;&#97;&#x69;&#108;&#x6f;&#x76;&#101;&#114;&#x40;&#x66;&#105;&#114;&#101;&#x77;&#x61;&#108;&#x6c;&#x2e;&#x6c;&#x6f;&#99;</a><br> <a href="mailto:&#x73;&#x79;&#115;&#x61;&#x64;&#x6d;&#105;&#x6e;&#64;&#x66;&#105;&#114;&#101;&#x77;&#97;&#108;&#x6c;&#46;&#108;&#x6f;&#x63;">&#x73;&#x79;&#115;&#x61;&#x64;&#x6d;&#105;&#x6e;&#64;&#x66;&#105;&#114;&#101;&#x77;&#97;&#108;&#x6c;&#46;&#108;&#x6f;&#x63;</a><br>   }<br>   notification_email_from <a href="mailto:&#x41;&#x6c;&#x65;&#x78;&#x61;&#x6e;&#x64;&#x72;&#101;&#x2e;&#67;&#x61;&#115;&#x73;&#x65;&#110;&#x40;&#102;&#x69;&#114;&#x65;&#x77;&#97;&#108;&#108;&#46;&#x6c;&#x6f;&#x63;">&#x41;&#x6c;&#x65;&#x78;&#x61;&#x6e;&#x64;&#x72;&#101;&#x2e;&#67;&#x61;&#115;&#x73;&#x65;&#110;&#x40;&#102;&#x69;&#114;&#x65;&#x77;&#97;&#108;&#108;&#46;&#x6c;&#x6f;&#x63;</a><br>   smtp_server 192.168.200.1<br>   smtp_connect_timeout 30<br>   router_id LVS_DEVEL   &#x2F;&#x2F;!!这个最重要<br>   vrrp_skip_check_adv_addr<br>   vrrp_strict<br>   vrrp_garp_interval 0<br>   vrrp_gna_interval 0<br>}</p><p>&#x2F;&#x2F; 虚拟ip<br>vrrp_instance VI_1 {<br>state MASTER &#x2F;&#x2F;MASTER or BACKUP<br>interface eth0 &#x2F;&#x2F; 网卡名字<br>virtual_router_id 51 &#x2F;&#x2F;主备的id必须相同<br>priority 100 &#x2F;&#x2F;主机较大<br>advert_int 1<br>authentication {<br>    auth_type PASS<br>    auth_pass 1111<br>}<br>&#x2F;&#x2F; 虚拟ip地址<br>virtual_ipaddress {<br>    192.168.200.16<br>    192.168.200.17<br>    192.168.200.18<br>}<br>}</p><p>virtual_server 192.168.200.100 443 {<br>delay_loop 6<br>lb_algo rr<br>lb_kind NAT<br>persistence_timeout 50<br>protocol TCP<br><br>real_server 192.168.201.100 443 {<br>    weight 1<br>    SSL_GET {<br>        url {<br>          path &#x2F;<br>          digest ff20ad2481f97b1754ef3e12ecd3a9cc<br>        }<br>        url {<br>          path &#x2F;mrtg&#x2F;<br>          digest 9b3a0c85a887a256d6939da88aabd8cd<br>        }<br>        connect_timeout 3<br>        nb_get_retry 3<br>        delay_before_retry 3<br>    }<br>}<br>}</p><p>virtual_server 10.10.10.2 1358 {<br>delay_loop 6<br>lb_algo rr<br>lb_kind NAT<br>persistence_timeout 50<br>protocol TCP<br><br>sorry_server 192.168.200.200 1358<br><br>real_server 192.168.200.2 1358 {<br>    weight 1<br>    HTTP_GET {<br>        url {<br>          path &#x2F;testurl&#x2F;test.jsp<br>          digest 640205b7b0fc66c1ea91c463fac6334d<br>        }<br>        url {<br>          path &#x2F;testurl2&#x2F;test.jsp<br>          digest 640205b7b0fc66c1ea91c463fac6334d<br>        }<br>        url {<br>          path &#x2F;testurl3&#x2F;test.jsp<br>          digest 640205b7b0fc66c1ea91c463fac6334d<br>        }<br>        connect_timeout 3<br>        nb_get_retry 3<br>        delay_before_retry 3<br>    }<br>}<br><br>real_server 192.168.200.3 1358 {<br>    weight 1<br>    HTTP_GET {<br>        url {<br>          path &#x2F;testurl&#x2F;test.jsp<br>          digest 640205b7b0fc66c1ea91c463fac6334c<br>        }<br>        url {<br>          path &#x2F;testurl2&#x2F;test.jsp<br>          digest 640205b7b0fc66c1ea91c463fac6334c<br>        }<br>        connect_timeout 3<br>        nb_get_retry 3<br>        delay_before_retry 3<br>    }<br>}<br>}</p><p>virtual_server 10.10.10.3 1358 {<br>delay_loop 3<br>lb_algo rr<br>lb_kind NAT<br>persistence_timeout 50<br>protocol TCP<br><br>real_server 192.168.200.4 1358 {<br>    weight 1<br>    HTTP_GET {<br>        url {<br>          path &#x2F;testurl&#x2F;test.jsp<br>          digest 640205b7b0fc66c1ea91c463fac6334d<br>        }<br>        url {<br>          path &#x2F;testurl2&#x2F;test.jsp<br>          digest 640205b7b0fc66c1ea91c463fac6334d<br>        }<br>        url {<br>          path &#x2F;testurl3&#x2F;test.jsp<br>          digest 640205b7b0fc66c1ea91c463fac6334d<br>        }<br>        connect_timeout 3<br>        nb_get_retry 3<br>        delay_before_retry 3<br>    }<br>}<br><br>real_server 192.168.200.5 1358 {<br>    weight 1<br>    HTTP_GET {<br>        url {<br>          path &#x2F;testurl&#x2F;test.jsp<br>          digest 640205b7b0fc66c1ea91c463fac6334d<br>        }<br>        url {<br>          path &#x2F;testurl2&#x2F;test.jsp<br>          digest 640205b7b0fc66c1ea91c463fac6334d<br>        }<br>        url {<br>          path &#x2F;testurl3&#x2F;test.jsp<br>          digest 640205b7b0fc66c1ea91c463fac6334d<br>        }<br>        connect_timeout 3<br>        nb_get_retry 3<br>        delay_before_retry 3<br>    }<br>}<br>}</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">## 2. 安装nginx</span><br><span class="line"></span><br><span class="line">###### 依赖库文件</span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line">yum -y install make pcre pcre-devel zlib zlib-devel gcc gcc-c++ automake autoconf libtool  openssl openssl-devel</span><br></pre></td></tr></table></figure></li></ul><h6 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure><h6 id="关闭selinux"><a href="#关闭selinux" class="headerlink" title="关闭selinux"></a>关闭selinux</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">setenforce 0 </span><br></pre></td></tr></table></figure><h6 id="下载编译"><a href="#下载编译" class="headerlink" title="下载编译"></a>下载编译</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/src</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">下载</span></span><br><span class="line">wget https://nginx.org/download/nginx-1.19.10.tar.gz</span><br><span class="line">tar -xvf nginx-1.19.10.tar.gz</span><br><span class="line">cd nginx-1.19.10</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">编译安装</span></span><br><span class="line">./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module </span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看版本</span></span><br><span class="line">/usr/local/nginx/sbin/nginx -v</span><br></pre></td></tr></table></figure><h6 id="nginx命令行参数"><a href="#nginx命令行参数" class="headerlink" title="nginx命令行参数"></a>nginx命令行参数</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">为nginx指定一个配置文件，来代替缺省</span></span><br><span class="line">-c </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">不运行，只用于测试配置文件</span></span><br><span class="line">-t</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示nginx版本</span></span><br><span class="line">-v</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示版本并且显示配置参数</span></span><br><span class="line">-V</span><br></pre></td></tr></table></figure><h6 id="nginx控制信号"><a href="#nginx控制信号" class="headerlink" title="nginx控制信号"></a>nginx控制信号</h6><p>可以使用信号系统来控制主程序</p><p>默认将主进程pid写入<code>/usr/local/nginx/nginx.pid</code>文件中</p><p><img src="/img/nginx/image-20220517183650154.png" alt="image-20220517183650154"></p><h6 id="nginx启动、停止、重启命令"><a href="#nginx启动、停止、重启命令" class="headerlink" title="nginx启动、停止、重启命令"></a>nginx启动、停止、重启命令</h6><p><code>nginx启动</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo /usr/local/nginx/nginx</span><br></pre></td></tr></table></figure><p><code>从容停止</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kill -quit nginx pid</span><br></pre></td></tr></table></figure><p><code>快速停止</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kill -term nginx pid</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">强制停止</span></span><br><span class="line">kill -9 nginx pid</span><br></pre></td></tr></table></figure><p>嫌麻烦可以不查看pid直接在<code>nginx.conf</code>中设置<code>pid</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kill -quit `cat /usr/local/nginx/nignx.pid`</span><br></pre></td></tr></table></figure><p><code>重启</code></p><ul><li>简单型：关闭进程，修改配置后重启进程</li><li>重新加载配置文件，不重启进程，不会停止处理请求 使用<code>-HUP</code>的参数配置</li><li>平滑更新nginx二进制，不停止处理请求 -USR2</li></ul><h2 id="3-nginx优化"><a href="#3-nginx优化" class="headerlink" title="3. nginx优化"></a>3. nginx优化</h2><h6 id="hash-max-size-amp-amp-hash-bucket-size"><a href="#hash-max-size-amp-amp-hash-bucket-size" class="headerlink" title="hash max size &amp;&amp; hash bucket size"></a>hash max size &amp;&amp; hash bucket size</h6><h6 id="事件模型"><a href="#事件模型" class="headerlink" title="事件模型"></a>事件模型</h6><h2 id="4-核心模块"><a href="#4-核心模块" class="headerlink" title="4. 核心模块"></a>4. 核心模块</h2><h3 id="主模块–控制Nginx的基本功能的指令"><a href="#主模块–控制Nginx的基本功能的指令" class="headerlink" title="主模块–控制Nginx的基本功能的指令"></a>主模块–控制Nginx的基本功能的指令</h3><ul><li><p>daemon</p></li><li><p>master_process 和deamon一样只用于开发调试老死不相往来</p></li><li><p>debug_points 调试断点</p></li><li><p>error_log</p></li><li><p>include 用于配置文件的包含</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">include vhosts/*.conf;</span><br></pre></td></tr></table></figure></li><li><p>pid</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kill -HUP `cat /var/log/nginx.pid`</span><br></pre></td></tr></table></figure></li><li><p>user</p><p>指定Nginx Worker进程运行用户</p></li></ul><h2 id="5-基本入门"><a href="#5-基本入门" class="headerlink" title="5. 基本入门"></a>5. 基本入门</h2><h6 id="配置文件结构"><a href="#配置文件结构" class="headerlink" title="配置文件结构"></a>配置文件结构</h6><ul><li><p>简单指令</p><p>由名称和参数组成以分号结尾</p></li><li><p>块指令</p><p>由名称和参数组成不以分号结尾而是{} 例如events、http、server、location</p></li></ul><h6 id="提供静态内容"><a href="#提供静态内容" class="headerlink" title="提供静态内容"></a>提供静态内容</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">server&#123;</span><br><span class="line">location / &#123;</span><br><span class="line">root /data/www</span><br><span class="line">&#125;</span><br><span class="line">location /images/ &#123;</span><br><span class="line">root /data</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="log"><a href="#log" class="headerlink" title="log"></a>log</h6><blockquote><p>&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs</p></blockquote><h6 id="简单的代理服务器"><a href="#简单的代理服务器" class="headerlink" title="简单的代理服务器"></a>简单的代理服务器</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">server&#123;</span><br><span class="line">listen 8080;</span><br><span class="line">root /data/upl; !!!!location没有时才使用这个root</span><br><span class="line">location /&#123;</span><br><span class="line">proxy_pass http://localhost:8080;</span><br><span class="line">&#125;</span><br><span class="line">location /images/&#123;</span><br><span class="line">root /data;</span><br><span class="line">&#125;</span><br><span class="line">// 第二个可以修改为</span><br><span class="line">location ~ \.(gif|jpg|png)$&#123;</span><br><span class="line">root /data/images</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="设置快速通用网关接口代理FastCGI"><a href="#设置快速通用网关接口代理FastCGI" class="headerlink" title="设置快速通用网关接口代理FastCGI"></a>设置快速通用网关接口代理FastCGI</h6><p>使用FastCGI服务器最基本的nginx配置包括使用 <a href="http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_pass">fastcgi_pass</a> 指令替代 <code>proxy_pass</code>指令，以及使用 <a href="http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_param">fastcgi_param</a> 指令来设置传递给FastCGI服务器的参数。假设FastCGI服务器可以在 <code>localhost:9000</code> 上访问。以上一节中的代理配置为基础，将 <code>proxy_pass</code> 指令替换为 <code>fastcgi_pass</code> 指令，并将参数更改为 <code>localhost:9000</code> 。在PHP中， <code>SCRIPT_FILENAME</code> 参数用于确定脚本名称，  <code>QUERY_STRING</code> 参数用于传递请求参数。得到的配置将是:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">     location / &#123;</span><br><span class="line">         fastcgi_pass  localhost:9000;</span><br><span class="line">         fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">         fastcgi_param QUERY_STRING    $query_string;</span><br><span class="line">     &#125;</span><br><span class="line">     location ~ \.(gif|jpg|png)$ &#123;</span><br><span class="line">         root /data/images;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Nginx&quot;&gt;&lt;a href=&quot;#Nginx&quot; class=&quot;headerlink&quot; title=&quot;Nginx&quot;&gt;&lt;/a&gt;Nginx&lt;/h1&gt;&lt;h2 id=&quot;1-Nginx概述&quot;&gt;&lt;a href=&quot;#1-Nginx概述&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="项目部署" scheme="http://example.com/categories/%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
    
    
    <category term="项目部署" scheme="http://example.com/tags/%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
    
    <category term="Nginx" scheme="http://example.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Selenium</title>
    <link href="http://example.com/2022/05/05/Selenium/"/>
    <id>http://example.com/2022/05/05/Selenium/</id>
    <published>2022-05-05T03:21:25.000Z</published>
    <updated>2022-06-08T01:28:38.867Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a>Selenium</h1><h2 id="1-使用步骤"><a href="#1-使用步骤" class="headerlink" title="1. 使用步骤"></a>1. 使用步骤</h2><h3 id="Selenium-IDE-安装及使用"><a href="#Selenium-IDE-安装及使用" class="headerlink" title="Selenium IDE 安装及使用"></a>Selenium IDE 安装及使用</h3><blockquote><p>可以不用写脚本，用来录制测试人员在网页的操作，然后保存操作，最后重新测试的时候可以重新执行测试。</p></blockquote><p><img src="/img/selenium/image-20220507093355571.png" alt="image-20220507093355571"></p><blockquote><ol><li><p>录制</p><p><img src="/img/selenium/image-20220507093651179.png" alt="image-20220507093651179"></p><p><img src="/img/selenium/image-20220507093734073.png" alt="image-20220507093734073"></p><p><img src="/img/selenium/image-20220507093823924.png" alt="image-20220507093823924"></p></li><li><p>执行</p><p><img src="/img/selenium/image-20220507093842285.png" alt="image-20220507093842285"></p></li><li><p>保存</p></li></ol></blockquote><h3 id="Selenium-WebServer安装及使用"><a href="#Selenium-WebServer安装及使用" class="headerlink" title="Selenium WebServer安装及使用"></a>Selenium WebServer安装及使用</h3><h6 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;selenium-java&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.141.59&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h6 id="元素操作"><a href="#元素操作" class="headerlink" title="元素操作"></a>元素操作</h6><blockquote><ol><li>clear（）</li><li>click（）</li><li>sendKeys（）</li></ol></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 连接火狐</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">openFirefox</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 设置火狐浏览器exe位置</span></span><br><span class="line">    System.setProperty(<span class="string">&quot;webdriver.firefox.bin&quot;</span>,<span class="string">&quot;D:\\soft\\FireFox\\firefox.exe&quot;</span>);</span><br><span class="line">    <span class="comment">// 下载火狐浏览器驱动geckodriver保证火狐能够看得懂我们的代码</span></span><br><span class="line">    System.setProperty(<span class="string">&quot;webdriver.gecko.driver&quot;</span>,<span class="string">&quot;src/main/resources/geckodriver.exe&quot;</span>);</span><br><span class="line">    <span class="type">FirefoxDriver</span> <span class="variable">firefoxDriver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FirefoxDriver</span>();</span><br><span class="line">    firefoxDriver.get(<span class="string">&quot;https://wthah.github.io/link/&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 连接谷歌</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">openChrome</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 下载谷歌驱动</span></span><br><span class="line">    System.setProperty(<span class="string">&quot;webdriver.chrome.driver&quot;</span>,<span class="string">&quot;src/main/resources/chromedriver.exe&quot;</span>);</span><br><span class="line">    <span class="comment">// 1. 打开浏览器</span></span><br><span class="line">    <span class="type">ChromeDriver</span> <span class="variable">chromeDriver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChromeDriver</span>();</span><br><span class="line">    <span class="comment">// 2. 访问网站</span></span><br><span class="line">    chromeDriver.get(<span class="string">&quot;https://wthah.github.io/link/&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        openChrome();</span><br><span class="line">    <span class="comment">// 填写输入框</span></span><br><span class="line">        chromeDriver.findElement(By.id(<span class="string">&quot;kw&quot;</span>)).sendKeys(<span class="string">&quot;1234&quot;</span>);</span><br><span class="line">        <span class="comment">// 强制睡眠3s</span></span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">    <span class="comment">// 清空输入框</span></span><br><span class="line">        chromeDriver.findElement(By.id(<span class="string">&quot;kw&quot;</span>)).clear();</span><br><span class="line">    <span class="comment">// 定位kw输入框</span></span><br><span class="line">        <span class="type">WebElement</span> <span class="variable">webElement</span> <span class="operator">=</span> chromeDriver.findElement(By.id(<span class="string">&quot;kw&quot;</span>));</span><br><span class="line">        <span class="comment">// getTagName</span></span><br><span class="line">        System.out.println(webElement.getTagName());</span><br><span class="line">        <span class="comment">// getAttribute</span></span><br><span class="line">        System.out.println(webElement.getAttribute(<span class="string">&quot;maxlength&quot;</span>));</span><br><span class="line">        <span class="comment">// getText</span></span><br><span class="line">        System.out.println(webElement.getText());</span><br><span class="line">        <span class="comment">// isDisplayed</span></span><br><span class="line">        System.out.println(webElement.getText());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="元素定位"><a href="#元素定位" class="headerlink" title="元素定位"></a>元素定位</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        openChrome();</span><br><span class="line">        chromeDriver.findElement(By.id(<span class="string">&quot;kw&quot;</span>)).sendKeys(<span class="string">&quot;Megumi&quot;</span>);</span><br><span class="line">        chromeDriver.findElement(By.id(<span class="string">&quot;su&quot;</span>)).click();</span><br><span class="line">        <span class="comment">// 定位name</span></span><br><span class="line">        <span class="comment">// 定位tagname</span></span><br><span class="line">        <span class="comment">// 定位classname</span></span><br><span class="line">        <span class="comment">// 定位LinkText</span></span><br><span class="line">        chromeDriver.findElement(By.linkText(<span class="string">&quot;新闻&quot;</span>)).click();</span><br><span class="line">        <span class="comment">// 定位patialLinkText</span></span><br><span class="line">        chromeDriver.findElement(By.partialLinkText(<span class="string">&quot;新&quot;</span>)).click();</span><br><span class="line">        <span class="comment">// css元素定位（略写）</span></span><br><span class="line">        <span class="comment">// xpath元素定位 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>快速获取xpath和css方法：</code> </p><p><img src="/img/selenium/image-20220523092008542.png" alt="image-20220523092008542"></p><p><img src="/img/selenium/image-20220523092119130.png" alt="image-20220523092119130"></p><p><code>xpath手写：</code><a href="https://blog.csdn.net/weixin_49981930/article/details/123093827?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165326893816780357228898%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165326893816780357228898&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-123093827-null-null.142%5Ev10%5Epc_search_result_control_group,157%5Ev4%5Econtrol&amp;utm_term=selenium+xpath%E5%AE%9A%E4%BD%8D&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/weixin_49981930/article/details/123093827?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165326893816780357228898%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165326893816780357228898&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-123093827-null-null.142^v10^pc_search_result_control_group,157^v4^control&amp;utm_term=selenium+xpath%E5%AE%9A%E4%BD%8D&amp;spm=1018.2226.3001.4187</a> </p></blockquote><h6 id="driver操作"><a href="#driver操作" class="headerlink" title="driver操作"></a>driver操作</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        openChrome();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// url，title，退出页面</span></span><br><span class="line">        System.out.println(chromeDriver.getCurrentUrl());</span><br><span class="line">        System.out.println(chromeDriver.getTitle());</span><br><span class="line">        System.out.println(chromeDriver.getPageSource());</span><br><span class="line">        chromeDriver.quit();</span><br><span class="line">        chromeDriver.close();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 句柄获得</span></span><br><span class="line">        chromeDriver.findElement(By.id(<span class="string">&quot;kw&quot;</span>)).sendKeys(<span class="string">&quot;腾讯课堂&quot;</span>);</span><br><span class="line">        chromeDriver.findElement(By.id(<span class="string">&quot;su&quot;</span>)).click();</span><br><span class="line">        System.out.println(<span class="string">&quot;打开前的句柄&quot;</span>+chromeDriver.getWindowHandle());</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        chromeDriver.findElement(By.linkText(<span class="string">&quot;官方&quot;</span>)).click();</span><br><span class="line">        System.out.println(<span class="string">&quot;打开后的句柄&quot;</span>+chromeDriver.getWindowHandle());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// options菜单操作对象（屏幕大小控制）</span></span><br><span class="line">        WebDriver.<span class="type">Options</span> <span class="variable">options</span> <span class="operator">=</span> chromeDriver.manage();</span><br><span class="line">        options.window().fullscreen();</span><br><span class="line">        <span class="type">Dimension</span> <span class="variable">dimension</span> <span class="operator">=</span> options.window().getSize();</span><br><span class="line">        System.out.println(dimension.getHeight());</span><br><span class="line">        System.out.println(dimension.getWidth());</span><br><span class="line">        System.out.println(options.window().getPosition().getX());</span><br><span class="line">        System.out.println(options.window().getPosition().getY());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// navigate（前进后退）</span></span><br><span class="line">        WebDriver.<span class="type">Navigation</span> <span class="variable">navigation</span> <span class="operator">=</span> chromeDriver.navigate();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        navigation.to(<span class="string">&quot;https://Wthah.github.io&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        navigation.refresh();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        navigation.back();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        navigation.forward();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="三种等待方式"><a href="#三种等待方式" class="headerlink" title="三种等待方式"></a>三种等待方式</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        openChrome();</span><br><span class="line">        <span class="comment">// 隐式等待（所有操作都要等待固定时间）</span></span><br><span class="line">        chromeDriver.manage().timeouts().implicitlyWait(<span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line">        chromeDriver.get(<span class="string">&quot;https://baidu.com&quot;</span>);</span><br><span class="line">        chromeDriver.findElement(By.id(<span class="string">&quot;kw&quot;</span>)).sendKeys(<span class="string">&quot;腾讯课堂&quot;</span>);</span><br><span class="line">        chromeDriver.findElement(By.id(<span class="string">&quot;su&quot;</span>)).click();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 硬性等待（单个操作强制等待）</span></span><br><span class="line">        Thread.sleep(<span class="number">30000</span>);</span><br><span class="line">        chromeDriver.findElement(By.xpath(<span class="string">&quot;//a[text() = &#x27;-综合性在线终身学习平台&#x27;]&quot;</span>)).click();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//显示等待（等条件出现了在继续执行后续代码）</span></span><br><span class="line">        <span class="type">WebDriverWait</span> <span class="variable">webDriverWait</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WebDriverWait</span>(chromeDriver,<span class="number">5</span>);</span><br><span class="line">        webDriverWait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(<span class="string">&quot;//a[text() = &#x27;-综合性在线终身学习平台&#x27;]&quot;</span>)));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="特殊组件（并不完整）"><a href="#特殊组件（并不完整）" class="headerlink" title="特殊组件（并不完整）"></a>特殊组件（并不完整）</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        openChrome();</span><br><span class="line">        <span class="comment">// alert</span></span><br><span class="line">        <span class="comment">// 找到alert</span></span><br><span class="line">        <span class="type">Alert</span> <span class="variable">alert</span> <span class="operator">=</span> chromeDriver.switchTo().alert();</span><br><span class="line">        alert.accept();</span><br><span class="line">        alert.dismiss();</span><br><span class="line">        System.out.println(alert.getText());</span><br><span class="line">        <span class="comment">// confirm</span></span><br><span class="line">        <span class="comment">// 找到confirm</span></span><br><span class="line">        chromeDriver.switchTo().alert();</span><br><span class="line">        alert.accept();</span><br><span class="line">        alert.dismiss();</span><br><span class="line">        alert.getText();</span><br><span class="line">        <span class="comment">// iframe</span></span><br><span class="line">        <span class="comment">// 在默认页面输入数据</span></span><br><span class="line">        chromeDriver.findElement(By.id(<span class="string">&quot;aa&quot;</span>)).sendKeys(<span class="string">&quot;aa&quot;</span>);;</span><br><span class="line">        chromeDriver.switchTo().frame(<span class="string">&quot;bframe&quot;</span>);</span><br><span class="line">        chromeDriver.findElement(By.id(<span class="string">&quot;bb&quot;</span>)).sendKeys(<span class="string">&quot;bb&quot;</span>);</span><br><span class="line">        chromeDriver.switchTo().defaultContent();</span><br><span class="line">        <span class="comment">//window切换</span></span><br><span class="line">        chromeDriver.findElement(By.id(<span class="string">&quot;aa&quot;</span>)).sendKeys(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"></span><br><span class="line">        chromeDriver.findElement(By.id(<span class="string">&quot;b&quot;</span>)).click();;</span><br><span class="line">        <span class="comment">// 句柄切换</span></span><br><span class="line">        <span class="comment">// 切换到b之后获取所有窗口的句柄</span></span><br><span class="line">        Set&lt;String&gt; handles = chromeDriver.getWindowHandles();</span><br><span class="line">        <span class="keyword">for</span>(String handle: handles)&#123;</span><br><span class="line">            chromeDriver.switchTo().window(handle);</span><br><span class="line">            <span class="keyword">if</span>(chromeDriver.getTitle().equals(<span class="string">&quot;***&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// select</span></span><br><span class="line">        chromeDriver.findElement(By.className(<span class="string">&quot;setting-text&quot;</span>)).click();</span><br><span class="line">        chromeDriver.findElement(By.xpath(<span class="string">&quot;//a[text()=&#x27;高级搜索&#x27;]&quot;</span>)).click();</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        <span class="type">WebElement</span> <span class="variable">webElement</span> <span class="operator">=</span> chromeDriver.findElement(By.name(<span class="string">&quot;qpc&quot;</span>));</span><br><span class="line">        <span class="type">Select</span> <span class="variable">select</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Select</span>(webElement);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Testng生成log"><a href="#Testng生成log" class="headerlink" title="Testng生成log"></a>Testng生成log</h3><h6 id="导入maven"><a href="#导入maven" class="headerlink" title="导入maven"></a>导入maven</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.testng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>testng<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.14.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.uncommons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>reportng<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.inject<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guice<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="导入插件"><a href="#导入插件" class="headerlink" title="导入插件"></a>导入插件</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">suiteXmlFiles</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">suiteXmlFile</span>&gt;</span>xmlfile/testng.xml<span class="tag">&lt;/<span class="name">suiteXmlFile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">suiteXmlFiles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.19.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>usedefaultlisteners<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>listener<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.uncommons.reportng.HTMLReporter, org.uncommons.reportng.JUnitXMLReporter<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">workingDirectory</span>&gt;</span>target/<span class="tag">&lt;/<span class="name">workingDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="编写test-xml"><a href="#编写test-xml" class="headerlink" title="编写test.xml"></a>编写test.xml</h6><p><img src="/img/selenium/image-20220523093157027.png" alt="image-20220523093157027"></p><h6 id="添加日志"><a href="#添加日志" class="headerlink" title="添加日志"></a>添加日志</h6><p><img src="/img/selenium/image-20220523093315958.png" alt="image-20220523093315958"></p><h6 id="运行xml，查看输出"><a href="#运行xml，查看输出" class="headerlink" title="运行xml，查看输出"></a>运行xml，查看输出</h6><p><img src="/img/selenium/image-20220523093408760.png" alt="image-20220523093408760"></p><h6 id="输出一般在项目根目录下的test-output中的html文件里边"><a href="#输出一般在项目根目录下的test-output中的html文件里边" class="headerlink" title="输出一般在项目根目录下的test-output中的html文件里边"></a>输出一般在项目根目录下的test-output中的html文件里边</h6><p><code>index.html</code></p><p><img src="/img/selenium/image-20220523093814801.png" alt="image-20220523093814801"></p><p><img src="/img/selenium/image-20220523093914166.png" alt="image-20220523093914166"></p><p><img src="/img/selenium/image-20220523093938810.png" alt="image-20220523093938810"></p><h6 id="testng的使用"><a href="#testng的使用" class="headerlink" title="testng的使用"></a>testng的使用</h6><p>这篇包含<code>testng注释</code>和使用<code>全部测试和部分测试的xml</code>如何编写</p><blockquote><p><a href="https://blog.csdn.net/weixin_39909877/article/details/108696188?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165327012316781483779829%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165327012316781483779829&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-108696188-null-null.142%5Ev10%5Epc_search_result_control_group,157%5Ev4%5Econtrol&amp;utm_term=testng&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/weixin_39909877/article/details/108696188?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165327012316781483779829%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165327012316781483779829&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-108696188-null-null.142^v10^pc_search_result_control_group,157^v4^control&amp;utm_term=testng&amp;spm=1018.2226.3001.4187</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Selenium&quot;&gt;&lt;a href=&quot;#Selenium&quot; class=&quot;headerlink&quot; title=&quot;Selenium&quot;&gt;&lt;/a&gt;Selenium&lt;/h1&gt;&lt;h2 id=&quot;1-使用步骤&quot;&gt;&lt;a href=&quot;#1-使用步骤&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="自动化测试" scheme="http://example.com/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="Selenium" scheme="http://example.com/tags/Selenium/"/>
    
    <category term="自动化测试" scheme="http://example.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>软件过程管理</title>
    <link href="http://example.com/2022/04/21/%E8%BD%AF%E4%BB%B6%E8%BF%87%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    <id>http://example.com/2022/04/21/%E8%BD%AF%E4%BB%B6%E8%BF%87%E7%A8%8B%E7%AE%A1%E7%90%86/</id>
    <published>2022-04-21T03:21:25.000Z</published>
    <updated>2022-06-08T01:28:38.875Z</updated>
    
    <content type="html"><![CDATA[<h1 id="软件过程管理"><a href="#软件过程管理" class="headerlink" title="软件过程管理"></a>软件过程管理</h1><h2 id="项目管理概念"><a href="#项目管理概念" class="headerlink" title="项目管理概念"></a>项目管理概念</h2><blockquote><p>是以人为中心进行的协调活动</p></blockquote><h6 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h6><p>一种管理活动，一种管理学科</p><p>PMRC:<code>临时性</code>的专门的<code>柔性</code>组织，高效率的计划、组织、指导</p><p>PMI：把各种只是技能、手段和技术应用于项目活动之中，以达到项目的要求</p><h6 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h6><p>围绕项目计划、组织、质量、费用、进度</p><p>与部门管理最大区别：注重于<code>综合性管理</code>，并且强调时间期限</p><p>通过不完全确定的过程，再确定的期限内，生产出不完全确定的产品或完成不完全确定的任务</p><h6 id="作业管理："><a href="#作业管理：" class="headerlink" title="作业管理："></a>作业管理：</h6><p>追求惯例性、追求效率</p><h6 id="知识体系："><a href="#知识体系：" class="headerlink" title="知识体系："></a>知识体系：</h6><p>四大核心知识领域、五大辅助知识领域、工具和技术</p><h6 id="十大知识领域："><a href="#十大知识领域：" class="headerlink" title="十大知识领域："></a>十大知识领域：</h6><p>基准计划：范围、时间、费用、质量</p><p>协调资源：人力、采购、沟通</p><p>目标一致：整体管理</p><p>防范于未然：风险管理</p><p>识别相关方：干系人管理</p><h6 id="项目管理的沿革"><a href="#项目管理的沿革" class="headerlink" title="项目管理的沿革"></a>项目管理的沿革</h6><p>潜意识的项目管理</p><p><code>传统项目管理的形成</code>：项目实施的环节</p><p>项目管理的传播和现代化</p><p><code>现代项目管理的发展</code>：注重人的因素、柔性、综合性、使利益者满意</p><h2 id="IT概述"><a href="#IT概述" class="headerlink" title="IT概述"></a>IT概述</h2><h6 id="信息技术："><a href="#信息技术：" class="headerlink" title="信息技术："></a>信息技术：</h6><p>拓展人类处理信息能力的技术</p><h6 id="信息的属性："><a href="#信息的属性：" class="headerlink" title="信息的属性："></a>信息的属性：</h6><p>客观性、相对性、价值性、传输性、时效性、转换性</p><h6 id="软件的分类"><a href="#软件的分类" class="headerlink" title="软件的分类"></a>软件的分类</h6><p>按照软件功能划分：</p><p>系统软件、支撑软件、应用软件</p><p>按软件工作方式划分：</p><p>实时处理、分时处理、交互式、批处理软件</p><p>按规模、使用频率</p><h6 id="软件的特点："><a href="#软件的特点：" class="headerlink" title="软件的特点："></a>软件的特点：</h6><p>抽象性、生产过程的特殊性、缺陷检测的困难性、软件维护的复杂性、软件对环境的依赖性、系统开销的主导性、与社会因素的关联性</p><h2 id="软件项目管理"><a href="#软件项目管理" class="headerlink" title="软件项目管理"></a>软件项目管理</h2><h2 id="项目群和项目组合管理"><a href="#项目群和项目组合管理" class="headerlink" title="项目群和项目组合管理"></a>项目群和项目组合管理</h2><h6 id="项目群："><a href="#项目群：" class="headerlink" title="项目群："></a>项目群：</h6><p>多个相互关联项目的集合：<code>相互关联，项目之间有相似性</code> 使用协同的方法进行管理</p><h6 id="项目群经理："><a href="#项目群经理：" class="headerlink" title="项目群经理："></a>项目群经理：</h6><h6 id="项目组合管理："><a href="#项目组合管理：" class="headerlink" title="项目组合管理："></a>项目组合管理：</h6><p>对有项目和项目群有机组合的整体所</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;软件过程管理&quot;&gt;&lt;a href=&quot;#软件过程管理&quot; class=&quot;headerlink&quot; title=&quot;软件过程管理&quot;&gt;&lt;/a&gt;软件过程管理&lt;/h1&gt;&lt;h2 id=&quot;项目管理概念&quot;&gt;&lt;a href=&quot;#项目管理概念&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="项目管理" scheme="http://example.com/categories/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
    
    <category term="软件过程管理" scheme="http://example.com/tags/%E8%BD%AF%E4%BB%B6%E8%BF%87%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>SQL调优</title>
    <link href="http://example.com/2022/04/19/Mysql%E8%B0%83%E4%BC%98/"/>
    <id>http://example.com/2022/04/19/Mysql%E8%B0%83%E4%BC%98/</id>
    <published>2022-04-19T03:21:25.000Z</published>
    <updated>2022-06-08T01:28:38.864Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mysql高级-day01"><a href="#Mysql高级-day01" class="headerlink" title="Mysql高级-day01"></a>Mysql高级-day01</h1><h3 id="MySQL高级课程简介"><a href="#MySQL高级课程简介" class="headerlink" title="MySQL高级课程简介"></a>MySQL高级课程简介</h3><table><thead><tr><th align="center">序号</th><th>Day01</th><th>Day02</th><th>Day03</th><th>Day04</th></tr></thead><tbody><tr><td align="center">1</td><td>Linux系统安装MySQL</td><td>体系结构</td><td>应用优化</td><td>MySQL 常用工具</td></tr><tr><td align="center">2</td><td>索引</td><td>存储引擎</td><td>查询缓存优化</td><td>MySQL 日志</td></tr><tr><td align="center">3</td><td>视图</td><td>优化SQL步骤</td><td>内存管理及优化</td><td>MySQL 主从复制</td></tr><tr><td align="center">4</td><td>存储过程和函数</td><td>索引使用</td><td>MySQL锁问题</td><td>综合案例</td></tr><tr><td align="center">5</td><td>触发器</td><td>SQL优化</td><td>常用SQL技巧</td><td></td></tr></tbody></table><h3 id="1-Linux-系统安装MySQL"><a href="#1-Linux-系统安装MySQL" class="headerlink" title="1. Linux 系统安装MySQL"></a>1. Linux 系统安装MySQL</h3><h4 id="1-1-下载Linux-安装包"><a href="#1-1-下载Linux-安装包" class="headerlink" title="1.1 下载Linux 安装包"></a>1.1 下载Linux 安装包</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://dev.mysql.com/downloads/mysql/5.7.html#downloads</span><br></pre></td></tr></table></figure><p><img src="/img/sql/1555661091565.png" alt="1555661091565"> </p><h4 id="1-2-安装MySQL"><a href="#1-2-安装MySQL" class="headerlink" title="1.2 安装MySQL"></a>1.2 安装MySQL</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1). 卸载 centos 中预安装的 mysql</span><br><span class="line"></span><br><span class="line">rpm -qa | grep -i mysql</span><br><span class="line"></span><br><span class="line">rpm -e mysql-libs-5.1.71-1.el6.x86_64 --nodeps</span><br><span class="line"></span><br><span class="line">2). 上传 mysql 的安装包</span><br><span class="line"></span><br><span class="line">alt + p -------&gt; put  E:/test/MySQL-5.6.22-1.el6.i686.rpm-bundle.tar</span><br><span class="line"></span><br><span class="line">3). 解压 mysql 的安装包 </span><br><span class="line"></span><br><span class="line">mkdir mysql</span><br><span class="line"></span><br><span class="line">tar -xvf MySQL-5.6.22-1.el6.i686.rpm-bundle.tar -C /root/mysql</span><br><span class="line"></span><br><span class="line">4). 安装依赖包 </span><br><span class="line"></span><br><span class="line">yum -y install libaio.so.1 libgcc_s.so.1 libstdc++.so.6 libncurses.so.5 --setopt=protected_multilib=false</span><br><span class="line"></span><br><span class="line">yum  update libstdc++-4.4.7-4.el6.x86_64</span><br><span class="line"></span><br><span class="line">5). 安装 mysql-client</span><br><span class="line"></span><br><span class="line">rpm -ivh MySQL-client-5.6.22-1.el6.i686.rpm</span><br><span class="line"></span><br><span class="line">6). 安装 mysql-server</span><br><span class="line"></span><br><span class="line">rpm -ivh MySQL-server-5.6.22-1.el6.i686.rpm</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1-3-启动-MySQL-服务"><a href="#1-3-启动-MySQL-服务" class="headerlink" title="1.3 启动 MySQL 服务"></a>1.3 启动 MySQL 服务</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">service mysql <span class="keyword">start</span></span><br><span class="line"></span><br><span class="line">service mysql stop</span><br><span class="line"></span><br><span class="line">service mysql status</span><br><span class="line"></span><br><span class="line">service mysql restart</span><br></pre></td></tr></table></figure><h4 id="1-4-登录MySQL"><a href="#1-4-登录MySQL" class="headerlink" title="1.4 登录MySQL"></a>1.4 登录MySQL</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql 安装完成之后, 会自动生成一个随机的密码, 并且保存在一个密码文件中 : /root/.mysql_secret</span><br><span class="line"></span><br><span class="line">mysql -u root -p </span><br><span class="line"></span><br><span class="line">登录之后, 修改密码 :</span><br><span class="line"></span><br><span class="line">set password = password(&#x27;itcast&#x27;);</span><br><span class="line"></span><br><span class="line">授权远程访问 : </span><br><span class="line"></span><br><span class="line">grant all privileges on *.* to &#x27;root&#x27; @&#x27;%&#x27; identified by &#x27;itcast&#x27;;</span><br><span class="line">flush privileges;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-索引"><a href="#2-索引" class="headerlink" title="2. 索引"></a>2. 索引</h3><h4 id="2-1-索引概述"><a href="#2-1-索引概述" class="headerlink" title="2.1 索引概述"></a>2.1 索引概述</h4><p>MySQL官方对索引的定义为：索引（index）是帮助MySQL高效获取数据的数据结构（有序）。在数据之外，数据库系统还维护者满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据， 这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引。如下面的&#x3D;&#x3D;示意图&#x3D;&#x3D;所示 : </p><p><img src="/img/sql/1555902055367.png" alt="1555902055367"> </p><p>左边是数据表，一共有两列七条记录，最左边的是数据记录的物理地址（注意逻辑上相邻的记录在磁盘上也并不是一定物理相邻的）。为了加快Col2的查找，可以维护一个右边所示的二叉查找树，每个节点分别包含索引键值和一个指向对应数据记录物理地址的指针，这样就可以运用二叉查找快速获取到相应数据。</p><p>一般来说索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储在磁盘上。索引是数据库中用来提高性能的最常用的工具。</p><h4 id="2-2-索引优势劣势"><a href="#2-2-索引优势劣势" class="headerlink" title="2.2 索引优势劣势"></a>2.2 索引优势劣势</h4><p>优势</p><p>1） 类似于书籍的目录索引，提高数据检索的效率，降低数据库的IO成本。</p><p>2） 通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗。</p><p>劣势</p><p>1） 实际上索引也是一张表，该表中保存了主键与索引字段，并指向实体类的记录，所以索引列也是要占用空间的。</p><p>2） 虽然索引大大提高了查询效率，同时却也降低更新表的速度，如对表进行INSERT、UPDATE、DELETE。因为更新表时，MySQL 不仅要保存数据，还要保存一下索引文件每次更新添加了索引列的字段，都会调整因为更新所带来的键值变化后的索引信息。</p><h4 id="2-3-索引结构"><a href="#2-3-索引结构" class="headerlink" title="2.3 索引结构"></a>2.3 索引结构</h4><p>索引是在MySQL的存储引擎层中实现的，而不是在服务器层实现的。所以每种存储引擎的索引都不一定完全相同，也不是所有的存储引擎都支持所有的索引类型的。MySQL目前提供了以下4种索引：</p><ul><li>BTREE 索引 ： 最常见的索引类型，大部分索引都支持 B 树索引。</li><li>HASH 索引：只有Memory引擎支持 ， 使用场景简单 。</li><li>R-tree 索引（空间索引）：空间索引是MyISAM引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少，不做特别介绍。</li><li>Full-text （全文索引） ：全文索引也是MyISAM的一个特殊索引类型，主要用于全文索引，InnoDB从Mysql5.6版本开始支持全文索引。</li></ul><center><b>MyISAM、InnoDB、Memory三种存储引擎对各种索引类型的支持</b></center><table><thead><tr><th>索引</th><th>InnoDB引擎</th><th>MyISAM引擎</th><th>Memory引擎</th></tr></thead><tbody><tr><td>BTREE索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>HASH 索引</td><td>不支持</td><td>不支持</td><td>支持</td></tr><tr><td>R-tree 索引</td><td>不支持</td><td>支持</td><td>不支持</td></tr><tr><td>Full-text</td><td>5.6版本之后支持</td><td>支持</td><td>不支持</td></tr></tbody></table><p>我们平常所说的索引，如果没有特别指明，都是指B+树（多路搜索树，并不一定是二叉的）结构组织的索引。其中聚集索引、复合索引、前缀索引、唯一索引默认都是使用 B+tree 索引，统称为 索引。</p><h5 id="2-3-1-BTREE-结构"><a href="#2-3-1-BTREE-结构" class="headerlink" title="2.3.1 BTREE 结构"></a>2.3.1 BTREE 结构</h5><p>BTree又叫多路平衡搜索树，一颗m叉的BTree特性如下：</p><ul><li>树中每个节点最多包含m个孩子。</li><li>除根节点与叶子节点外，每个节点至少有[ceil(m&#x2F;2)]个孩子。</li><li>若根节点不是叶子节点，则至少有两个孩子。</li><li>所有的叶子节点都在同一层。</li><li>每个非叶子节点由n个key与n+1个指针组成，其中[ceil(m&#x2F;2)-1] &lt;&#x3D; n &lt;&#x3D; m-1</li></ul><p>以5叉BTree为例，key的数量：公式推导[ceil(m&#x2F;2)-1] &lt;&#x3D; n &lt;&#x3D; m-1。所以 2 &lt;&#x3D; n &lt;&#x3D;4 。当n&gt;4时，中间节点分裂到父节点，两边节点分裂。</p><p>插入 C N G A H E K Q M F W L T Z D P R X Y S 数据为例。</p><p>演变过程如下：</p><p>1). 插入前4个字母 C N G A </p><p><img src="/img/sql/1555944126588.png" alt="1555944126588"> </p><p>2). 插入H，n&gt;4，中间元素G字母向上分裂到新的节点</p><p><img src="/img/sql/1555944549825.png" alt="1555944549825"> </p><p>3). 插入E，K，Q不需要分裂</p><p><img src="/img/sql/1555944596893.png" alt="1555944596893"> </p><p>4). 插入M，中间元素M字母向上分裂到父节点G</p><p><img src="/img/sql/1555944652560.png" alt="1555944652560"> </p><p>5). 插入F，W，L，T不需要分裂</p><p><img src="/img/sql/1555944686928.png" alt="1555944686928"> </p><p>6). 插入Z，中间元素T向上分裂到父节点中 </p><p><img src="/img/sql/1555944713486.png" alt="1555944713486"> </p><p>7). 插入D，中间元素D向上分裂到父节点中。然后插入P，R，X，Y不需要分裂</p><p><img src="/img/sql/1555944749984.png" alt="1555944749984"> </p><p>8). 最后插入S，NPQR节点n&gt;5，中间节点Q向上分裂，但分裂后父节点DGMT的n&gt;5，中间节点M向上分裂</p><p><img src="/img/sql/1555944848294.png" alt="1555944848294"> </p><p>到此，该BTREE树就已经构建完成了， BTREE树 和 二叉树 相比， 查询数据的效率更高， 因为对于相同的数据量来说，BTREE的层级结构比二叉树小，因此搜索速度快。</p><h5 id="2-3-3-B-TREE-结构"><a href="#2-3-3-B-TREE-结构" class="headerlink" title="2.3.3 B+TREE 结构"></a>2.3.3 B+TREE 结构</h5><p>B+Tree为BTree的变种，B+Tree与BTree的区别为：</p><p>1). n叉B+Tree最多含有n个key，而BTree最多含有n-1个key。</p><p>2). B+Tree的叶子节点保存所有的key信息，依key大小顺序排列。</p><p>3). 所有的非叶子节点都可以看作是key的索引部分。</p><p><img src="/img/sql/00001.jpg" alt="1555906287178"> </p><p>由于B+Tree只有叶子节点保存key信息，查询任何key都要从root走到叶子。所以B+Tree的查询效率更加稳定。</p><h5 id="2-3-3-MySQL中的B-Tree"><a href="#2-3-3-MySQL中的B-Tree" class="headerlink" title="2.3.3 MySQL中的B+Tree"></a>2.3.3 MySQL中的B+Tree</h5><p>MySql索引数据结构对经典的B+Tree进行了优化。在原B+Tree的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的B+Tree，提高区间访问的性能。</p><p>MySQL中的 B+Tree 索引结构示意图: </p><p><img src="/img/sql/1555906287178.png" alt="1555906287178">  </p><h4 id="2-4-索引分类"><a href="#2-4-索引分类" class="headerlink" title="2.4 索引分类"></a>2.4 索引分类</h4><p>1） 单值索引 ：即一个索引只包含单个列，一个表可以有多个单列索引</p><p>2） 唯一索引 ：索引列的值必须唯一，但允许有空值</p><p>3） 复合索引 ：即一个索引包含多个列</p><h4 id="2-5-索引语法"><a href="#2-5-索引语法" class="headerlink" title="2.5 索引语法"></a>2.5 索引语法</h4><p>索引在创建表的时候，可以同时创建， 也可以随时增加新的索引。</p><p>准备环境:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database demo_01 <span class="keyword">default</span> charset<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line">use demo_01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `city` (</span><br><span class="line">  `city_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `city_name` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `country_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`city_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `country` (</span><br><span class="line">  `country_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `country_name` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`country_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `city` (`city_id`, `city_name`, `country_id`) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;西安&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `city` (`city_id`, `city_name`, `country_id`) <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;NewYork&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `city` (`city_id`, `city_name`, `country_id`) <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;北京&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `city` (`city_id`, `city_name`, `country_id`) <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;上海&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `country` (`country_id`, `country_name`) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;China&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `country` (`country_id`, `country_name`) <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;America&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `country` (`country_id`, `country_name`) <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;Japan&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `country` (`country_id`, `country_name`) <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;UK&#x27;</span>);</span><br></pre></td></tr></table></figure><h5 id="2-5-1-创建索引"><a href="#2-5-1-创建索引" class="headerlink" title="2.5.1 创建索引"></a>2.5.1 创建索引</h5><p>语法 ： </p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">UNIQUE</span><span class="operator">|</span>FULLTEXT<span class="operator">|</span>SPATIAL]  INDEX index_name </span><br><span class="line">[<span class="keyword">USING</span>  index_type]</span><br><span class="line"><span class="keyword">ON</span> tbl_name(index_col_name,...)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">index_col_name : column_name[(length)][<span class="keyword">ASC</span> <span class="operator">|</span> <span class="keyword">DESC</span>]</span><br></pre></td></tr></table></figure><p>示例 ： 为city表中的city_name字段创建索引 ；</p><p><img src="/img/sql/1551438009843.png" alt="1551438009843">    ​  </p><p>​</p><h5 id="2-5-2-查看索引"><a href="#2-5-2-查看索引" class="headerlink" title="2.5.2 查看索引"></a>2.5.2 查看索引</h5><p>语法： </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show index  from  table_name;</span><br></pre></td></tr></table></figure><p>示例：查看city表中的索引信息；</p><p><img src="/img/sql/1551440511890.png" alt="1551440511890"> </p><p><img src="/img/sql/1551440544483.png" alt="1551440544483">  </p><h5 id="2-5-3-删除索引"><a href="#2-5-3-删除索引" class="headerlink" title="2.5.3 删除索引"></a>2.5.3 删除索引</h5><p>语法 ：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP  INDEX  index_name  ON  tbl_name;</span><br></pre></td></tr></table></figure><p>示例 ： 想要删除city表上的索引idx_city_name，可以操作如下：</p><p><img src="/img/sql/1551438238293.png" alt="1551438238293">  </p><h5 id="2-5-4-ALTER命令"><a href="#2-5-4-ALTER命令" class="headerlink" title="2.5.4 ALTER命令"></a>2.5.4 ALTER命令</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1). alter  table  tb_name  add  primary  key(column_list); </span><br><span class="line"></span><br><span class="line">该语句添加一个主键，这意味着索引值必须是唯一的，且不能为NULL</span><br><span class="line"></span><br><span class="line">2). alter  table  tb_name  add  unique index_name(column_list);</span><br><span class="line"></span><br><span class="line">这条语句创建索引的值必须是唯一的（除了NULL外，NULL可能会出现多次）</span><br><span class="line"></span><br><span class="line">3). alter  table  tb_name  add  index index_name(column_list);</span><br><span class="line"></span><br><span class="line">添加普通索引， 索引值可以出现多次。</span><br><span class="line"></span><br><span class="line">4). alter  table  tb_name  add  fulltext  index_name(column_list);</span><br><span class="line"></span><br><span class="line">该语句指定了索引为FULLTEXT， 用于全文索引</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-6-索引设计原则"><a href="#2-6-索引设计原则" class="headerlink" title="2.6 索引设计原则"></a>2.6 索引设计原则</h4><p>​索引的设计可以遵循一些已有的原则，创建索引的时候请尽量考虑符合这些原则，便于提升索引的使用效率，更高效的使用索引。</p><ul><li><p>对查询频次较高，且数据量比较大的表建立索引。</p></li><li><p>索引字段的选择，最佳候选列应当从where子句的条件中提取，如果where子句中的组合比较多，那么应当挑选最常用、过滤效果最好的列的组合。</p></li><li><p>使用唯一索引，区分度越高，使用索引的效率越高。</p></li><li><p>索引可以有效的提升查询数据的效率，但索引数量不是多多益善，索引越多，维护索引的代价自然也就水涨船高。对于插入、更新、删除等DML操作比较频繁的表来说，索引过多，会引入相当高的维护代价，降低DML操作的效率，增加相应操作的时间消耗。另外索引过多的话，MySQL也会犯选择困难病，虽然最终仍然会找到一个可用的索引，但无疑提高了选择的代价。</p></li><li><p>使用短索引，索引创建之后也是使用硬盘来存储的，因此提升索引访问的I&#x2F;O效率，也可以提升总体的访问效率。假如构成索引的字段总长度比较短，那么在给定大小的存储块内可以存储更多的索引值，相应的可以有效的提升MySQL访问索引的I&#x2F;O效率。</p></li><li><p>利用最左前缀，N个列组合而成的组合索引，那么相当于是创建了N个索引，如果查询时where子句中使用了组成该索引的前几个字段，那么这条查询SQL可以利用组合索引来提升查询效率。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">创建复合索引:</span><br><span class="line"></span><br><span class="line">CREATE INDEX idx_name_email_status ON tb_seller(NAME,email,STATUS);</span><br><span class="line"></span><br><span class="line">就相当于</span><br><span class="line">对name 创建索引 ;</span><br><span class="line">对name , email 创建了索引 ;</span><br><span class="line">对name , email, status 创建了索引 ;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-视图"><a href="#3-视图" class="headerlink" title="3. 视图"></a>3. 视图</h3><h4 id="3-1-视图概述"><a href="#3-1-视图概述" class="headerlink" title="3.1 视图概述"></a>3.1 视图概述</h4><p>​视图（View）是一种虚拟存在的表。视图并不在数据库中实际存在，行和列数据来自定义视图的查询中使用的表，并且是在使用视图时动态生成的。通俗的讲，视图就是一条SELECT语句执行后返回的结果集。所以我们在创建视图的时候，主要的工作就落在创建这条SQL查询语句上。</p><p>视图相对于普通的表的优势主要包括以下几项。</p><ul><li>简单：使用视图的用户完全不需要关心后面对应的表的结构、关联条件和筛选条件，对用户来说已经是过滤好的复合条件的结果集。</li><li>安全：使用视图的用户只能访问他们被允许查询的结果集，对表的权限管理并不能限制到某个行某个列，但是通过视图就可以简单的实现。</li><li>数据独立：一旦视图的结构确定了，可以屏蔽表结构变化对用户的影响，源表增加列对视图没有影响；源表修改列名，则可以通过修改视图来解决，不会造成对访问者的影响。</li></ul><h4 id="3-2-创建或者修改视图"><a href="#3-2-创建或者修改视图" class="headerlink" title="3.2 创建或者修改视图"></a>3.2 创建或者修改视图</h4><p>创建视图的语法为：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">OR</span> REPLACE] [ALGORITHM <span class="operator">=</span> &#123;UNDEFINED <span class="operator">|</span> <span class="keyword">MERGE</span> <span class="operator">|</span> TEMPTABLE&#125;]</span><br><span class="line"></span><br><span class="line"><span class="keyword">VIEW</span> view_name [(column_list)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">AS</span> select_statement</span><br><span class="line"></span><br><span class="line">[<span class="keyword">WITH</span> [<span class="keyword">CASCADED</span> <span class="operator">|</span> <span class="keyword">LOCAL</span>] <span class="keyword">CHECK</span> OPTION]</span><br></pre></td></tr></table></figure><p>修改视图的语法为：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> [ALGORITHM <span class="operator">=</span> &#123;UNDEFINED <span class="operator">|</span> <span class="keyword">MERGE</span> <span class="operator">|</span> TEMPTABLE&#125;]</span><br><span class="line"></span><br><span class="line"><span class="keyword">VIEW</span> view_name [(column_list)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">AS</span> select_statement</span><br><span class="line"></span><br><span class="line">[<span class="keyword">WITH</span> [<span class="keyword">CASCADED</span> <span class="operator">|</span> <span class="keyword">LOCAL</span>] <span class="keyword">CHECK</span> OPTION]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">选项 : </span><br><span class="line">WITH [CASCADED | LOCAL] CHECK OPTION 决定了是否允许更新数据使记录不再满足视图的条件。</span><br><span class="line"></span><br><span class="line">LOCAL ： 只要满足本视图的条件就可以更新。</span><br><span class="line">CASCADED ： 必须满足所有针对该视图的所有视图的条件才可以更新。 默认值.</span><br></pre></td></tr></table></figure><p>示例 , 创建city_country_view视图 , 执行如下SQL : </p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">view</span> city_country_view </span><br><span class="line"><span class="keyword">as</span> </span><br><span class="line"><span class="keyword">select</span> t.<span class="operator">*</span>,c.country_name <span class="keyword">from</span> country c , city t <span class="keyword">where</span> c.country_id <span class="operator">=</span> t.country_id;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查询视图 : </p><p><img src="/img/sql/1551503428635.png" alt="1551503428635"> </p><h4 id="3-3-查看视图"><a href="#3-3-查看视图" class="headerlink" title="3.3 查看视图"></a>3.3 查看视图</h4><p>​从 MySQL 5.1 版本开始，使用 SHOW TABLES 命令的时候不仅显示表的名字，同时也会显示视图的名字，而不存在单独显示视图的 SHOW VIEWS 命令。</p><p><img src="/img/sql/1551537565159.png" alt="1551537565159"> </p><p>同样，在使用 SHOW TABLE STATUS 命令的时候，不但可以显示表的信息，同时也可以显示视图的信息。</p><p><img src="/img/sql/1551537646323.png" alt="1551537646323"> </p><p>如果需要查询某个视图的定义，可以使用 SHOW CREATE VIEW 命令进行查看 ： </p><p><img src="/img/sql/1551588962944.png" alt="1551588962944">  </p><h4 id="3-4-删除视图"><a href="#3-4-删除视图" class="headerlink" title="3.4 删除视图"></a>3.4 删除视图</h4><p>语法 : </p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> [IF <span class="keyword">EXISTS</span>] view_name [, view_name] ...[RESTRICT <span class="operator">|</span> CASCADE]</span><br></pre></td></tr></table></figure><p>示例 , 删除视图city_country_view :</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP VIEW city_country_view ;</span><br></pre></td></tr></table></figure><h3 id="4-存储过程和函数"><a href="#4-存储过程和函数" class="headerlink" title="4. 存储过程和函数"></a>4. 存储过程和函数</h3><h4 id="4-1-存储过程和函数概述"><a href="#4-1-存储过程和函数概述" class="headerlink" title="4.1 存储过程和函数概述"></a>4.1 存储过程和函数概述</h4><p>​存储过程和函数是  事先经过编译并存储在数据库中的一段 SQL 语句的集合，调用存储过程和函数可以简化应用开发人员的很多工作，减少数据在数据库和应用服务器之间的传输，对于提高数据处理的效率是有好处的。</p><p>​存储过程和函数的区别在于函数必须有返回值，而存储过程没有。</p><p>​函数 ： 是一个有返回值的过程 ；</p><p>​过程 ： 是一个没有返回值的函数 ；</p><h4 id="4-2-创建存储过程"><a href="#4-2-创建存储过程" class="headerlink" title="4.2 创建存储过程"></a>4.2 创建存储过程</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> procedure_name ([proc_parameter[,...]])</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="comment">-- SQL语句</span></span><br><span class="line"><span class="keyword">end</span> ;</span><br></pre></td></tr></table></figure><p>示例 ：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test1()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;Hello Mysql&#x27;</span> ;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><p><strong><font color="red">知识小贴士</font></strong></p><p>DELIMITER</p><p>​该关键字用来声明SQL语句的分隔符 , 告诉 MySQL 解释器，该段命令是否已经结束了，mysql是否可以执行了。默认情况下，delimiter是分号;。在命令行客户端中，如果有一行命令以分号结束，那么回车后，mysql将会执行该命令。</p><h4 id="4-3-调用存储过程"><a href="#4-3-调用存储过程" class="headerlink" title="4.3 调用存储过程"></a>4.3 调用存储过程</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">call</span> procedure_name() ;</span><br></pre></td></tr></table></figure><h4 id="4-4-查看存储过程"><a href="#4-4-查看存储过程" class="headerlink" title="4.4 查看存储过程"></a>4.4 查看存储过程</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询db_name数据库中的所有的存储过程</span></span><br><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> mysql.proc <span class="keyword">where</span> db<span class="operator">=</span><span class="string">&#x27;db_name&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询存储过程的状态信息</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">procedure</span> status;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询某个存储过程的定义</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">procedure</span> test.pro_test1 \G;</span><br></pre></td></tr></table></figure><h4 id="4-5-删除存储过程"><a href="#4-5-删除存储过程" class="headerlink" title="4.5 删除存储过程"></a>4.5 删除存储过程</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span>  [IF <span class="keyword">EXISTS</span>] sp_name ；</span><br></pre></td></tr></table></figure><h4 id="4-6-语法"><a href="#4-6-语法" class="headerlink" title="4.6 语法"></a>4.6 语法</h4><p>存储过程是可以编程的，意味着可以使用变量，表达式，控制结构 ， 来完成比较复杂的功能。</p><h5 id="4-6-1-变量"><a href="#4-6-1-变量" class="headerlink" title="4.6.1 变量"></a>4.6.1 变量</h5><ul><li>DECLARE</li></ul><p>  通过 DECLARE 可以定义一个局部变量，该变量的作用范围只能在 BEGIN…END 块中。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> var_name[,...] type [<span class="keyword">DEFAULT</span> <span class="keyword">value</span>]</span><br></pre></td></tr></table></figure><p>示例 : </p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test2() </span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line"><span class="keyword">declare</span> num <span class="type">int</span> <span class="keyword">default</span> <span class="number">5</span>;</span><br><span class="line"><span class="keyword">select</span> num<span class="operator">+</span> <span class="number">10</span>; </span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">delimiter ; </span><br></pre></td></tr></table></figure><ul><li>SET</li></ul><p>直接赋值使用 SET，可以赋常量或者赋表达式，具体语法如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET var_name = expr [, var_name = expr] ...</span><br></pre></td></tr></table></figure><p>示例 : </p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span>  <span class="keyword">PROCEDURE</span> pro_test3()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> NAME <span class="type">VARCHAR</span>(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">SET</span> NAME <span class="operator">=</span> <span class="string">&#x27;MYSQL&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> NAME ;</span><br><span class="line"><span class="keyword">END</span>$</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p>也可以通过select … into 方式进行赋值操作 :</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span>  <span class="keyword">PROCEDURE</span> pro_test5()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">declare</span>  countnum <span class="type">int</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">into</span> countnum <span class="keyword">from</span> city;</span><br><span class="line"><span class="keyword">select</span> countnum;</span><br><span class="line"><span class="keyword">END</span>$</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><h5 id="4-6-2-if条件判断"><a href="#4-6-2-if条件判断" class="headerlink" title="4.6.2 if条件判断"></a>4.6.2 if条件判断</h5><p>语法结构 : </p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">if search_condition <span class="keyword">then</span> statement_list</span><br><span class="line"></span><br><span class="line">[elseif search_condition <span class="keyword">then</span> statement_list] ...</span><br><span class="line"></span><br><span class="line">[<span class="keyword">else</span> statement_list]</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> if;</span><br></pre></td></tr></table></figure><p>需求： </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">根据定义的身高变量，判定当前身高的所属的身材类型 </span><br><span class="line"></span><br><span class="line">180 及以上 ----------&gt; 身材高挑</span><br><span class="line"></span><br><span class="line">170 - 180  ---------&gt; 标准身材</span><br><span class="line"></span><br><span class="line">170 以下  ----------&gt; 一般身材</span><br></pre></td></tr></table></figure><p>示例 : </p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test6()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">declare</span>  height  <span class="type">int</span>  <span class="keyword">default</span>  <span class="number">175</span>; </span><br><span class="line">  <span class="keyword">declare</span>  description  <span class="type">varchar</span>(<span class="number">50</span>);</span><br><span class="line">  </span><br><span class="line">  if  height <span class="operator">&gt;=</span> <span class="number">180</span>  <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">set</span> description <span class="operator">=</span> <span class="string">&#x27;身材高挑&#x27;</span>;</span><br><span class="line">  elseif height <span class="operator">&gt;=</span> <span class="number">170</span> <span class="keyword">and</span> height <span class="operator">&lt;</span> <span class="number">180</span>  <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">set</span> description <span class="operator">=</span> <span class="string">&#x27;标准身材&#x27;</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">set</span> description <span class="operator">=</span> <span class="string">&#x27;一般身材&#x27;</span>;</span><br><span class="line">  <span class="keyword">end</span> if;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">select</span> description ;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><p>调用结果为 : </p><p><img src="/img/sql/1552057035580.png" alt="1552057035580"> </p><h5 id="4-6-3-传递参数"><a href="#4-6-3-传递参数" class="headerlink" title="4.6.3 传递参数"></a>4.6.3 传递参数</h5><p>语法格式 : </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create procedure procedure_name([in/out/inout] 参数名   参数类型)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">IN :   该参数可以作为输入，也就是需要调用方传入值 , 默认</span><br><span class="line">OUT:   该参数作为输出，也就是该参数可以作为返回值</span><br><span class="line">INOUT: 既可以作为输入参数，也可以作为输出参数</span><br></pre></td></tr></table></figure><p><strong>IN - 输入</strong></p><p>需求 :</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">根据定义的身高变量，判定当前身高的所属的身材类型 </span><br></pre></td></tr></table></figure><p>示例  : </p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test5(<span class="keyword">in</span> height <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> description <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  if height <span class="operator">&gt;=</span> <span class="number">180</span> <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">set</span> description<span class="operator">=</span><span class="string">&#x27;身材高挑&#x27;</span>;</span><br><span class="line">  elseif height <span class="operator">&gt;=</span> <span class="number">170</span> <span class="keyword">and</span> height <span class="operator">&lt;</span> <span class="number">180</span> <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">set</span> description<span class="operator">=</span><span class="string">&#x27;标准身材&#x27;</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">set</span> description<span class="operator">=</span><span class="string">&#x27;一般身材&#x27;</span>;</span><br><span class="line">  <span class="keyword">end</span> if;</span><br><span class="line">  <span class="keyword">select</span> concat(<span class="string">&#x27;身高 &#x27;</span>, height , <span class="string">&#x27;对应的身材类型为:&#x27;</span>,description);</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><p><strong>OUT-输出</strong></p><p> 需求 :</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">根据传入的身高变量，获取当前身高的所属的身材类型  </span><br></pre></td></tr></table></figure><p>示例:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test5(<span class="keyword">in</span> height <span class="type">int</span> , <span class="keyword">out</span> description <span class="type">varchar</span>(<span class="number">100</span>))</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  if height <span class="operator">&gt;=</span> <span class="number">180</span> <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">set</span> description<span class="operator">=</span><span class="string">&#x27;身材高挑&#x27;</span>;</span><br><span class="line">  elseif height <span class="operator">&gt;=</span> <span class="number">170</span> <span class="keyword">and</span> height <span class="operator">&lt;</span> <span class="number">180</span> <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">set</span> description<span class="operator">=</span><span class="string">&#x27;标准身材&#x27;</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">set</span> description<span class="operator">=</span><span class="string">&#x27;一般身材&#x27;</span>;</span><br><span class="line">  <span class="keyword">end</span> if;</span><br><span class="line"><span class="keyword">end</span>$</span><br></pre></td></tr></table></figure><p>调用:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">call pro_test5(168, @description)$</span><br><span class="line"></span><br><span class="line">select @description$</span><br></pre></td></tr></table></figure><p><font color='red'><strong>小知识</strong> </font></p><p>@description :  这种变量要在变量名称前面加上“@”符号，叫做用户会话变量，代表整个会话过程他都是有作用的，这个类似于全局变量一样。</p><p>@@global.sort_buffer_size : 这种在变量前加上 “@@” 符号, 叫做 系统变量 </p><h5 id="4-6-4-case结构"><a href="#4-6-4-case结构" class="headerlink" title="4.6.4 case结构"></a>4.6.4 case结构</h5><p>语法结构 : </p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">方式一 : </span><br><span class="line"></span><br><span class="line"><span class="keyword">CASE</span> case_value</span><br><span class="line"></span><br><span class="line">  <span class="keyword">WHEN</span> when_value <span class="keyword">THEN</span> statement_list</span><br><span class="line">  </span><br><span class="line">  [<span class="keyword">WHEN</span> when_value <span class="keyword">THEN</span> statement_list] ...</span><br><span class="line">  </span><br><span class="line">  [<span class="keyword">ELSE</span> statement_list]</span><br><span class="line">  </span><br><span class="line"><span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">方式二 : </span><br><span class="line"></span><br><span class="line"><span class="keyword">CASE</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">WHEN</span> search_condition <span class="keyword">THEN</span> statement_list</span><br><span class="line">  </span><br><span class="line">  [<span class="keyword">WHEN</span> search_condition <span class="keyword">THEN</span> statement_list] ...</span><br><span class="line">  </span><br><span class="line">  [<span class="keyword">ELSE</span> statement_list]</span><br><span class="line">  </span><br><span class="line"><span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>需求:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给定一个月份, 然后计算出所在的季度</span><br></pre></td></tr></table></figure><p>示例  :</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test9(<span class="keyword">month</span> <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">declare</span> <span class="keyword">result</span> <span class="type">varchar</span>(<span class="number">20</span>);</span><br><span class="line">  <span class="keyword">case</span> </span><br><span class="line">    <span class="keyword">when</span> <span class="keyword">month</span> <span class="operator">&gt;=</span> <span class="number">1</span> <span class="keyword">and</span> <span class="keyword">month</span> <span class="operator">&lt;=</span><span class="number">3</span> <span class="keyword">then</span> </span><br><span class="line">      <span class="keyword">set</span> <span class="keyword">result</span> <span class="operator">=</span> <span class="string">&#x27;第一季度&#x27;</span>;</span><br><span class="line">    <span class="keyword">when</span> <span class="keyword">month</span> <span class="operator">&gt;=</span> <span class="number">4</span> <span class="keyword">and</span> <span class="keyword">month</span> <span class="operator">&lt;=</span><span class="number">6</span> <span class="keyword">then</span> </span><br><span class="line">      <span class="keyword">set</span> <span class="keyword">result</span> <span class="operator">=</span> <span class="string">&#x27;第二季度&#x27;</span>;</span><br><span class="line">    <span class="keyword">when</span> <span class="keyword">month</span> <span class="operator">&gt;=</span> <span class="number">7</span> <span class="keyword">and</span> <span class="keyword">month</span> <span class="operator">&lt;=</span><span class="number">9</span> <span class="keyword">then</span> </span><br><span class="line">      <span class="keyword">set</span> <span class="keyword">result</span> <span class="operator">=</span> <span class="string">&#x27;第三季度&#x27;</span>;</span><br><span class="line">    <span class="keyword">when</span> <span class="keyword">month</span> <span class="operator">&gt;=</span> <span class="number">10</span> <span class="keyword">and</span> <span class="keyword">month</span> <span class="operator">&lt;=</span><span class="number">12</span> <span class="keyword">then</span> </span><br><span class="line">      <span class="keyword">set</span> <span class="keyword">result</span> <span class="operator">=</span> <span class="string">&#x27;第四季度&#x27;</span>;</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">case</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">select</span> concat(<span class="string">&#x27;您输入的月份为 :&#x27;</span>, <span class="keyword">month</span> , <span class="string">&#x27; , 该月份为 : &#x27;</span> , <span class="keyword">result</span>) <span class="keyword">as</span> content ;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><h5 id="4-6-5-while循环"><a href="#4-6-5-while循环" class="headerlink" title="4.6.5 while循环"></a>4.6.5 while循环</h5><p>语法结构: </p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">while search_condition do</span><br><span class="line"></span><br><span class="line">statement_list</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> while;</span><br></pre></td></tr></table></figure><p>需求:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">计算从1加到n的值</span><br></pre></td></tr></table></figure><p>示例  : </p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test8(n <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">declare</span> total <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">declare</span> num <span class="type">int</span> <span class="keyword">default</span> <span class="number">1</span>;</span><br><span class="line">  while num<span class="operator">&lt;=</span>n do</span><br><span class="line">    <span class="keyword">set</span> total <span class="operator">=</span> total <span class="operator">+</span> num;</span><br><span class="line"><span class="keyword">set</span> num <span class="operator">=</span> num <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">end</span> while;</span><br><span class="line">  <span class="keyword">select</span> total;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><h5 id="4-6-6-repeat结构"><a href="#4-6-6-repeat结构" class="headerlink" title="4.6.6 repeat结构"></a>4.6.6 repeat结构</h5><p>有条件的循环控制语句, 当满足条件的时候退出循环 。while 是满足条件才执行，repeat 是满足条件就退出循环。</p><p>语法结构 : </p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">REPEAT</span><br><span class="line"></span><br><span class="line">  statement_list</span><br><span class="line"></span><br><span class="line">  UNTIL search_condition</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span> REPEAT;</span><br></pre></td></tr></table></figure><p>需求: </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">计算从1加到n的值</span><br></pre></td></tr></table></figure><p>示例  : </p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test10(n <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">declare</span> total <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  repeat </span><br><span class="line">    <span class="keyword">set</span> total <span class="operator">=</span> total <span class="operator">+</span> n;</span><br><span class="line">    <span class="keyword">set</span> n <span class="operator">=</span> n <span class="operator">-</span> <span class="number">1</span>;</span><br><span class="line">    until n<span class="operator">=</span><span class="number">0</span>  </span><br><span class="line">  <span class="keyword">end</span> repeat;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">select</span> total ;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><h5 id="4-6-7-loop语句"><a href="#4-6-7-loop语句" class="headerlink" title="4.6.7 loop语句"></a>4.6.7 loop语句</h5><p>LOOP 实现简单的循环，退出循环的条件需要使用其他的语句定义，通常可以使用 LEAVE 语句实现，具体语法如下：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[begin_label:] LOOP</span><br><span class="line"></span><br><span class="line">  statement_list</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span> LOOP [end_label]</span><br></pre></td></tr></table></figure><p>如果不在 statement_list 中增加退出循环的语句，那么 LOOP 语句可以用来实现简单的死循环。</p><h5 id="4-6-8-leave语句"><a href="#4-6-8-leave语句" class="headerlink" title="4.6.8 leave语句"></a>4.6.8 leave语句</h5><p>用来从标注的流程构造中退出，通常和 BEGIN … END 或者循环一起使用。下面是一个使用 LOOP 和 LEAVE 的简单例子 , 退出循环：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> pro_test11(n <span class="type">int</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">declare</span> total <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  ins: LOOP</span><br><span class="line">    </span><br><span class="line">    IF n <span class="operator">&lt;=</span> <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">      leave ins;</span><br><span class="line">    <span class="keyword">END</span> IF;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">set</span> total <span class="operator">=</span> total <span class="operator">+</span> n;</span><br><span class="line">    <span class="keyword">set</span> n <span class="operator">=</span> n <span class="operator">-</span> <span class="number">1</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">END</span> LOOP ins;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">select</span> total;</span><br><span class="line"><span class="keyword">END</span>$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><h5 id="4-6-9-游标-x2F-光标"><a href="#4-6-9-游标-x2F-光标" class="headerlink" title="4.6.9 游标&#x2F;光标"></a>4.6.9 游标&#x2F;光标</h5><p>游标是用来存储查询结果集的数据类型 , 在存储过程和函数中可以使用光标对结果集进行循环的处理。光标的使用包括光标的声明、OPEN、FETCH 和 CLOSE，其语法分别如下。</p><p>声明光标：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> cursor_name <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> select_statement ;</span><br></pre></td></tr></table></figure><p>OPEN 光标：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">OPEN</span> cursor_name ;</span><br></pre></td></tr></table></figure><p>FETCH 光标：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FETCH</span> cursor_name <span class="keyword">INTO</span> var_name [, var_name] ...</span><br></pre></td></tr></table></figure><p>CLOSE 光标：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CLOSE</span> cursor_name ;</span><br></pre></td></tr></table></figure><p>示例 : </p><p>初始化脚本:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp(</span><br><span class="line">  id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="keyword">null</span> auto_increment ,</span><br><span class="line">  name <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">  age <span class="type">int</span>(<span class="number">11</span>) comment <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">  salary <span class="type">int</span>(<span class="number">11</span>) comment <span class="string">&#x27;薪水&#x27;</span>,</span><br><span class="line">  <span class="keyword">primary</span> key(`id`)</span><br><span class="line">)engine<span class="operator">=</span>innodb <span class="keyword">default</span> charset<span class="operator">=</span>utf8 ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp(id,name,age,salary) <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;金毛狮王&#x27;</span>,<span class="number">55</span>,<span class="number">3800</span>),(<span class="keyword">null</span>,<span class="string">&#x27;白眉鹰王&#x27;</span>,<span class="number">60</span>,<span class="number">4000</span>),(<span class="keyword">null</span>,<span class="string">&#x27;青翼蝠王&#x27;</span>,<span class="number">38</span>,<span class="number">2800</span>),(<span class="keyword">null</span>,<span class="string">&#x27;紫衫龙王&#x27;</span>,<span class="number">42</span>,<span class="number">1800</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询emp表中数据, 并逐行获取进行展示</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test11()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">declare</span> e_id <span class="type">int</span>(<span class="number">11</span>);</span><br><span class="line">  <span class="keyword">declare</span> e_name <span class="type">varchar</span>(<span class="number">50</span>);</span><br><span class="line">  <span class="keyword">declare</span> e_age <span class="type">int</span>(<span class="number">11</span>);</span><br><span class="line">  <span class="keyword">declare</span> e_salary <span class="type">int</span>(<span class="number">11</span>);</span><br><span class="line">  <span class="keyword">declare</span> emp_result <span class="keyword">cursor</span> <span class="keyword">for</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">open</span> emp_result;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">fetch</span> emp_result <span class="keyword">into</span> e_id,e_name,e_age,e_salary;</span><br><span class="line">  <span class="keyword">select</span> concat(<span class="string">&#x27;id=&#x27;</span>,e_id , <span class="string">&#x27;, name=&#x27;</span>,e_name, <span class="string">&#x27;, age=&#x27;</span>, e_age, <span class="string">&#x27;, 薪资为: &#x27;</span>,e_salary);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">fetch</span> emp_result <span class="keyword">into</span> e_id,e_name,e_age,e_salary;</span><br><span class="line">  <span class="keyword">select</span> concat(<span class="string">&#x27;id=&#x27;</span>,e_id , <span class="string">&#x27;, name=&#x27;</span>,e_name, <span class="string">&#x27;, age=&#x27;</span>, e_age, <span class="string">&#x27;, 薪资为: &#x27;</span>,e_salary);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">fetch</span> emp_result <span class="keyword">into</span> e_id,e_name,e_age,e_salary;</span><br><span class="line">  <span class="keyword">select</span> concat(<span class="string">&#x27;id=&#x27;</span>,e_id , <span class="string">&#x27;, name=&#x27;</span>,e_name, <span class="string">&#x27;, age=&#x27;</span>, e_age, <span class="string">&#x27;, 薪资为: &#x27;</span>,e_salary);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">fetch</span> emp_result <span class="keyword">into</span> e_id,e_name,e_age,e_salary;</span><br><span class="line">  <span class="keyword">select</span> concat(<span class="string">&#x27;id=&#x27;</span>,e_id , <span class="string">&#x27;, name=&#x27;</span>,e_name, <span class="string">&#x27;, age=&#x27;</span>, e_age, <span class="string">&#x27;, 薪资为: &#x27;</span>,e_salary);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">fetch</span> emp_result <span class="keyword">into</span> e_id,e_name,e_age,e_salary;</span><br><span class="line">  <span class="keyword">select</span> concat(<span class="string">&#x27;id=&#x27;</span>,e_id , <span class="string">&#x27;, name=&#x27;</span>,e_name, <span class="string">&#x27;, age=&#x27;</span>, e_age, <span class="string">&#x27;, 薪资为: &#x27;</span>,e_salary);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">close</span> emp_result;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过循环结构 , 获取游标中的数据 : </p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test12()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">DECLARE</span> id <span class="type">int</span>(<span class="number">11</span>);</span><br><span class="line">  <span class="keyword">DECLARE</span> name <span class="type">varchar</span>(<span class="number">50</span>);</span><br><span class="line">  <span class="keyword">DECLARE</span> age <span class="type">int</span>(<span class="number">11</span>);</span><br><span class="line">  <span class="keyword">DECLARE</span> salary <span class="type">int</span>(<span class="number">11</span>);</span><br><span class="line">  <span class="keyword">DECLARE</span> has_data <span class="type">int</span> <span class="keyword">default</span> <span class="number">1</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">DECLARE</span> emp_result <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp;</span><br><span class="line">  <span class="keyword">DECLARE</span> EXIT HANDLER <span class="keyword">FOR</span> <span class="keyword">NOT</span> FOUND <span class="keyword">set</span> has_data <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">open</span> emp_result;</span><br><span class="line">  </span><br><span class="line">  repeat</span><br><span class="line">    <span class="keyword">fetch</span> emp_result <span class="keyword">into</span> id , name , age , salary;</span><br><span class="line">    <span class="keyword">select</span> concat(<span class="string">&#x27;id为&#x27;</span>,id, <span class="string">&#x27;, name 为&#x27;</span> ,name , <span class="string">&#x27;, age为 &#x27;</span> ,age , <span class="string">&#x27;, 薪水为: &#x27;</span>, salary);</span><br><span class="line">    until has_data <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">end</span> repeat;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">close</span> emp_result;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">DELIMITER ; </span><br></pre></td></tr></table></figure><h4 id="4-7-存储函数"><a href="#4-7-存储函数" class="headerlink" title="4.7 存储函数"></a>4.7 存储函数</h4><p>语法结构:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE FUNCTION function_name([param type ... ]) </span><br><span class="line">RETURNS type </span><br><span class="line">BEGIN</span><br><span class="line">...</span><br><span class="line">END;</span><br></pre></td></tr></table></figure><p>案例 : </p><p>定义一个存储过程, 请求满足条件的总记录数 ;</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> count_city(countryId <span class="type">int</span>)</span><br><span class="line"><span class="keyword">returns</span> <span class="type">int</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">declare</span> cnum <span class="type">int</span> ;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">into</span> cnum <span class="keyword">from</span> city <span class="keyword">where</span> country_id <span class="operator">=</span> countryId;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> cnum;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><p>调用: </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select count_city(1);</span><br><span class="line"></span><br><span class="line">select count_city(2);</span><br></pre></td></tr></table></figure><h3 id="5-触发器"><a href="#5-触发器" class="headerlink" title="5. 触发器"></a>5. 触发器</h3><h4 id="5-1-介绍"><a href="#5-1-介绍" class="headerlink" title="5.1 介绍"></a>5.1 介绍</h4><p>触发器是与表有关的数据库对象，指在 insert&#x2F;update&#x2F;delete 之前或之后，触发并执行触发器中定义的SQL语句集合。触发器的这种特性可以协助应用在数据库端确保数据的完整性 , 日志记录 , 数据校验等操作 。</p><p>使用别名 OLD 和 NEW 来引用触发器中发生变化的记录内容，这与其他的数据库是相似的。现在触发器还只支持行级触发，不支持语句级触发。</p><table><thead><tr><th>触发器类型</th><th>NEW 和 OLD的使用</th></tr></thead><tbody><tr><td>INSERT 型触发器</td><td>NEW 表示将要或者已经新增的数据</td></tr><tr><td>UPDATE 型触发器</td><td>OLD 表示修改之前的数据 , NEW 表示将要或已经修改后的数据</td></tr><tr><td>DELETE 型触发器</td><td>OLD 表示将要或者已经删除的数据</td></tr></tbody></table><h4 id="5-2-创建触发器"><a href="#5-2-创建触发器" class="headerlink" title="5.2 创建触发器"></a>5.2 创建触发器</h4><p>语法结构 : </p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> trigger_name </span><br><span class="line"></span><br><span class="line">before<span class="operator">/</span>after <span class="keyword">insert</span><span class="operator">/</span><span class="keyword">update</span><span class="operator">/</span><span class="keyword">delete</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">on</span> tbl_name </span><br><span class="line"></span><br><span class="line">[ <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span> ]  <span class="comment">-- 行级触发器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">trigger_stmt ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>示例 </p><p>需求</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">通过触发器记录 emp 表的数据变更日志 , 包含增加, 修改 , 删除 ;</span><br></pre></td></tr></table></figure><p>首先创建一张日志表 : </p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp_logs(</span><br><span class="line">  id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="keyword">null</span> auto_increment,</span><br><span class="line">  operation <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;操作类型, insert/update/delete&#x27;</span>,</span><br><span class="line">  operate_time datetime <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;操作时间&#x27;</span>,</span><br><span class="line">  operate_id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;操作表的ID&#x27;</span>,</span><br><span class="line">  operate_params <span class="type">varchar</span>(<span class="number">500</span>) comment <span class="string">&#x27;操作参数&#x27;</span>,</span><br><span class="line">  <span class="keyword">primary</span> key(`id`)</span><br><span class="line">)engine<span class="operator">=</span>innodb <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><p>创建 insert 型触发器，完成插入数据时的日志记录 : </p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> emp_logs_insert_trigger</span><br><span class="line">after <span class="keyword">insert</span> </span><br><span class="line"><span class="keyword">on</span> emp </span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span> </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> emp_logs (id,operation,operate_time,operate_id,operate_params) <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;insert&#x27;</span>,now(),new.id,concat(<span class="string">&#x27;插入后(id:&#x27;</span>,new.id,<span class="string">&#x27;, name:&#x27;</span>,new.name,<span class="string">&#x27;, age:&#x27;</span>,new.age,<span class="string">&#x27;, salary:&#x27;</span>,new.salary,<span class="string">&#x27;)&#x27;</span>));</span><br><span class="line"><span class="keyword">end</span> $</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p>创建 update 型触发器，完成更新数据时的日志记录 : </p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> emp_logs_update_trigger</span><br><span class="line">after <span class="keyword">update</span> </span><br><span class="line"><span class="keyword">on</span> emp </span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span> </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> emp_logs (id,operation,operate_time,operate_id,operate_params) <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;update&#x27;</span>,now(),new.id,concat(<span class="string">&#x27;修改前(id:&#x27;</span>,old.id,<span class="string">&#x27;, name:&#x27;</span>,old.name,<span class="string">&#x27;, age:&#x27;</span>,old.age,<span class="string">&#x27;, salary:&#x27;</span>,old.salary,<span class="string">&#x27;) , 修改后(id&#x27;</span>,new.id, <span class="string">&#x27;name:&#x27;</span>,new.name,<span class="string">&#x27;, age:&#x27;</span>,new.age,<span class="string">&#x27;, salary:&#x27;</span>,new.salary,<span class="string">&#x27;)&#x27;</span>));                                                                      </span><br><span class="line"><span class="keyword">end</span> $</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p>创建delete 行的触发器 , 完成删除数据时的日志记录 : </p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> emp_logs_delete_trigger</span><br><span class="line">after <span class="keyword">delete</span> </span><br><span class="line"><span class="keyword">on</span> emp </span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span> </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> emp_logs (id,operation,operate_time,operate_id,operate_params) <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;delete&#x27;</span>,now(),old.id,concat(<span class="string">&#x27;删除前(id:&#x27;</span>,old.id,<span class="string">&#x27;, name:&#x27;</span>,old.name,<span class="string">&#x27;, age:&#x27;</span>,old.age,<span class="string">&#x27;, salary:&#x27;</span>,old.salary,<span class="string">&#x27;)&#x27;</span>));                                                                      </span><br><span class="line"><span class="keyword">end</span> $</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp(id,name,age,salary) <span class="keyword">values</span>(<span class="keyword">null</span>, <span class="string">&#x27;光明左使&#x27;</span>,<span class="number">30</span>,<span class="number">3500</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp(id,name,age,salary) <span class="keyword">values</span>(<span class="keyword">null</span>, <span class="string">&#x27;光明右使&#x27;</span>,<span class="number">33</span>,<span class="number">3200</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> emp <span class="keyword">set</span> age <span class="operator">=</span> <span class="number">39</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> emp <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure><h4 id="5-3-删除触发器"><a href="#5-3-删除触发器" class="headerlink" title="5.3 删除触发器"></a>5.3 删除触发器</h4><p>语法结构 : </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop trigger [schema_name.]trigger_name</span><br></pre></td></tr></table></figure><p>如果没有指定 schema_name，默认为当前数据库 。</p><h4 id="5-4-查看触发器"><a href="#5-4-查看触发器" class="headerlink" title="5.4 查看触发器"></a>5.4 查看触发器</h4><p>可以通过执行 SHOW TRIGGERS 命令查看触发器的状态、语法等信息。</p><p>语法结构 ： </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show triggers ；</span><br></pre></td></tr></table></figure><h1 id="Mysql高级-day02"><a href="#Mysql高级-day02" class="headerlink" title="Mysql高级-day02"></a>Mysql高级-day02</h1><h3 id="1-Mysql的体系结构概览"><a href="#1-Mysql的体系结构概览" class="headerlink" title="1. Mysql的体系结构概览"></a>1. Mysql的体系结构概览</h3><p><img src="/img/sql/000001.jpg" alt="171214401286615"> </p><p>整个MySQL Server由以下组成</p><ul><li>Connection Pool : 连接池组件</li><li>Management Services &amp; Utilities : 管理服务和工具组件</li><li>SQL Interface : SQL接口组件</li><li>Parser : 查询分析器组件</li><li>Optimizer : 优化器组件</li><li>Caches &amp; Buffers : 缓冲池组件</li><li>Pluggable Storage Engines : 存储引擎</li><li>File System : 文件系统</li></ul><p>1） 连接层</p><p>最上层是一些客户端和链接服务，包含本地sock 通信和大多数基于客户端&#x2F;服务端工具实现的类似于 TCP&#x2F;IP的通信。主要完成一些类似于连接处理、授权认证、及相关的安全方案。在该层上引入了线程池的概念，为通过认证安全接入的客户端提供线程。同样在该层上可以实现基于SSL的安全链接。服务器也会为安全接入的每个客户端验证它所具有的操作权限。</p><p>2） 服务层</p><p>第二层架构主要完成大多数的核心服务功能，如SQL接口，并完成缓存的查询，SQL的分析和优化，部分内置函数的执行。所有跨存储引擎的功能也在这一层实现，如 过程、函数等。在该层，服务器会解析查询并创建相应的内部解析树，并对其完成相应的优化如确定表的查询的顺序，是否利用索引等， 最后生成相应的执行操作。如果是select语句，服务器还会查询内部的缓存，如果缓存空间足够大，这样在解决大量读操作的环境中能够很好的提升系统的性能。</p><p>3） 引擎层</p><p>存储引擎层， 存储引擎真正的负责了MySQL中数据的存储和提取，服务器通过API和存储引擎进行通信。不同的存储引擎具有不同的功能，这样我们可以根据自己的需要，来选取合适的存储引擎。</p><p>4）存储层</p><p>数据存储层， 主要是将数据存储在文件系统之上，并完成与存储引擎的交互。</p><p>和其他数据库相比，MySQL有点与众不同，它的架构可以在多种不同场景中应用并发挥良好作用。主要体现在存储引擎上，插件式的存储引擎架构，将查询处理和其他的系统任务以及数据的存储提取分离。这种架构可以根据业务的需求和实际需要选择合适的存储引擎。</p><h3 id="2-存储引擎"><a href="#2-存储引擎" class="headerlink" title="2. 存储引擎"></a>2. 存储引擎</h3><h4 id="2-1-存储引擎概述"><a href="#2-1-存储引擎概述" class="headerlink" title="2.1 存储引擎概述"></a>2.1 存储引擎概述</h4><p>​和大多数的数据库不同, MySQL中有一个存储引擎的概念, 针对不同的存储需求可以选择最优的存储引擎。</p><p>​存储引擎就是存储数据，建立索引，更新查询数据等等技术的实现方式 。存储引擎是基于表的，而不是基于库的。所以存储引擎也可被称为表类型。</p><p>​Oracle，SqlServer等数据库只有一种存储引擎。MySQL提供了插件式的存储引擎架构。所以MySQL存在多种存储引擎，可以根据需要使用相应引擎，或者编写存储引擎。</p><p>​MySQL5.0支持的存储引擎包含 ： InnoDB 、MyISAM 、BDB、MEMORY、MERGE、EXAMPLE、NDB Cluster、ARCHIVE、CSV、BLACKHOLE、FEDERATED等，其中InnoDB和BDB提供事务安全表，其他存储引擎是非事务安全表。</p><p>可以通过指定 show engines ， 来查询当前数据库支持的存储引擎 ： </p><p><img src="/img/sql/1551186043529.png" alt="1551186043529"> </p><p>创建新表时如果不指定存储引擎，那么系统就会使用默认的存储引擎，MySQL5.5之前的默认存储引擎是MyISAM，5.5之后就改为了InnoDB。</p><p>查看Mysql数据库默认的存储引擎 ， 指令 ：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show variables like &#x27;%storage_engine%&#x27; ； </span><br></pre></td></tr></table></figure><p><img src="/img/sql/1556086372754.png" alt="1556086372754">   </p><h4 id="2-2-各种存储引擎特性"><a href="#2-2-各种存储引擎特性" class="headerlink" title="2.2 各种存储引擎特性"></a>2.2 各种存储引擎特性</h4><p>下面重点介绍几种常用的存储引擎， 并对比各个存储引擎之间的区别， 如下表所示 ： </p><table><thead><tr><th>特点</th><th>InnoDB</th><th>MyISAM</th><th>MEMORY</th><th>MERGE</th><th>NDB</th></tr></thead><tbody><tr><td>存储限制</td><td>64TB</td><td>有</td><td>有</td><td>没有</td><td>有</td></tr><tr><td>事务安全</td><td>&#x3D;&#x3D;支持&#x3D;&#x3D;</td><td></td><td></td><td></td><td></td></tr><tr><td>锁机制</td><td>&#x3D;&#x3D;行锁(适合高并发)&#x3D;&#x3D;</td><td>&#x3D;&#x3D;表锁&#x3D;&#x3D;</td><td>表锁</td><td>表锁</td><td>行锁</td></tr><tr><td>B树索引</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>哈希索引</td><td></td><td></td><td>支持</td><td></td><td></td></tr><tr><td>全文索引</td><td>支持(5.6版本之后)</td><td>支持</td><td></td><td></td><td></td></tr><tr><td>集群索引</td><td>支持</td><td></td><td></td><td></td><td></td></tr><tr><td>数据索引</td><td>支持</td><td></td><td>支持</td><td></td><td>支持</td></tr><tr><td>索引缓存</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>数据可压缩</td><td></td><td>支持</td><td></td><td></td><td></td></tr><tr><td>空间使用</td><td>高</td><td>低</td><td>N&#x2F;A</td><td>低</td><td>低</td></tr><tr><td>内存使用</td><td>高</td><td>低</td><td>中等</td><td>低</td><td>高</td></tr><tr><td>批量插入速度</td><td>低</td><td>高</td><td>高</td><td>高</td><td>高</td></tr><tr><td>支持外键</td><td>&#x3D;&#x3D;支持&#x3D;&#x3D;</td><td></td><td></td><td></td><td></td></tr></tbody></table><p>下面我们将重点介绍最长使用的两种存储引擎： InnoDB、MyISAM ， 另外两种 MEMORY、MERGE ， 了解即可。</p><h5 id="2-2-1-InnoDB"><a href="#2-2-1-InnoDB" class="headerlink" title="2.2.1 InnoDB"></a>2.2.1 InnoDB</h5><p>​InnoDB存储引擎是Mysql的默认存储引擎。InnoDB存储引擎提供了具有提交、回滚、崩溃恢复能力的事务安全。但是对比MyISAM的存储引擎，InnoDB写的处理效率差一些，并且会占用更多的磁盘空间以保留数据和索引。</p><p>InnoDB存储引擎不同于其他存储引擎的特点 ： </p><p><strong>事务控制</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table goods_innodb(</span><br><span class="line">id int NOT NULL AUTO_INCREMENT,</span><br><span class="line">name varchar(20) NOT NULL,</span><br><span class="line">    primary key(id)</span><br><span class="line">)ENGINE=innodb DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start transaction;</span><br><span class="line"></span><br><span class="line">insert into goods_innodb(id,name)values(null,&#x27;Meta20&#x27;);</span><br><span class="line"></span><br><span class="line">commit;</span><br></pre></td></tr></table></figure><p><img src="/img/sql/1556075130115.png" alt="1556075130115"> </p><p>测试，发现在InnoDB中是存在事务的 ；</p><p><strong>外键约束</strong></p><p>​MySQL支持外键的存储引擎只有InnoDB ， 在创建外键的时候， 要求父表必须有对应的索引 ， 子表在创建外键的时候， 也会自动的创建对应的索引。</p><p>​下面两张表中 ， country_innodb是父表 ， country_id为主键索引，city_innodb表是子表，country_id字段为外键，对应于country_innodb表的主键country_id 。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> country_innodb(</span><br><span class="line">country_id <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    country_name <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">primary</span> key(country_id)</span><br><span class="line">)ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> city_innodb(</span><br><span class="line">city_id <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    city_name <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    country_id <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">primary</span> key(city_id),</span><br><span class="line">    key idx_fk_country_id(country_id),</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> `fk_city_country` <span class="keyword">FOREIGN</span> KEY(country_id) <span class="keyword">REFERENCES</span> country_innodb(country_id) <span class="keyword">ON</span> <span class="keyword">DELETE</span> RESTRICT <span class="keyword">ON</span> <span class="keyword">UPDATE</span> CASCADE</span><br><span class="line">)ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> country_innodb <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;China&#x27;</span>),(<span class="keyword">null</span>,<span class="string">&#x27;America&#x27;</span>),(<span class="keyword">null</span>,<span class="string">&#x27;Japan&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> city_innodb <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;Xian&#x27;</span>,<span class="number">1</span>),(<span class="keyword">null</span>,<span class="string">&#x27;NewYork&#x27;</span>,<span class="number">2</span>),(<span class="keyword">null</span>,<span class="string">&#x27;BeiJing&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在创建索引时， 可以指定在删除、更新父表时，对子表进行的相应操作，包括 RESTRICT、CASCADE、SET NULL 和 NO ACTION。</p><p>RESTRICT和NO ACTION相同， 是指限制在子表有关联记录的情况下， 父表不能更新；</p><p>CASCADE表示父表在更新或者删除时，更新或者删除子表对应的记录；</p><p>SET NULL 则表示父表在更新或者删除的时候，子表的对应字段被SET NULL 。</p><p>针对上面创建的两个表， 子表的外键指定是ON DELETE RESTRICT ON UPDATE CASCADE 方式的， 那么在主表删除记录的时候， 如果子表有对应记录， 则不允许删除， 主表在更新记录的时候， 如果子表有对应记录， 则子表对应更新 。</p><p>表中数据如下图所示 ： </p><p><img src="/img/sql/1556087540767.png" alt="1556087540767"> </p><p>外键信息可以使用如下两种方式查看 ： </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show create table city_innodb ;</span><br></pre></td></tr></table></figure><p><img src="/img/sql/1556087611295.png" alt="1556087611295"> </p><p>删除country_id为1 的country数据： </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete from country_innodb where country_id = 1;</span><br></pre></td></tr></table></figure><p><img src="/img/sql/1556087719145.png" alt="1556087719145"> </p><p>更新主表country表的字段 country_id : </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update country_innodb set country_id = 100 where country_id = 1;</span><br></pre></td></tr></table></figure><p><img src="/img/sql/1556087759615.png" alt="1556087759615">  </p><p>更新后， 子表的数据信息为 ： </p><p><img src="/img/sql/1556087793738.png" alt="1556087793738">  </p><p><strong>存储方式</strong></p><p>InnoDB 存储表和索引有以下两种方式 ： </p><p>①. 使用共享表空间存储， 这种方式创建的表的表结构保存在.frm文件中， 数据和索引保存在 innodb_data_home_dir 和 innodb_data_file_path定义的表空间中，可以是多个文件。</p><p>②. 使用多表空间存储， 这种方式创建的表的表结构仍然存在 .frm 文件中，但是每个表的数据和索引单独保存在 .ibd 中。</p><p><img src="/img/sql/1556075336630.png" alt="1556075336630"> </p><h5 id="2-2-2-MyISAM"><a href="#2-2-2-MyISAM" class="headerlink" title="2.2.2 MyISAM"></a>2.2.2 MyISAM</h5><p>​MyISAM 不支持事务、也不支持外键，其优势是访问的速度快，对事务的完整性没有要求或者以SELECT、INSERT为主的应用基本上都可以使用这个引擎来创建表 。有以下两个比较重要的特点： </p><p><strong>不支持事务</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> goods_myisam(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">primary</span> key(id)</span><br><span class="line">)ENGINE<span class="operator">=</span>myisam <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><p><img src="/../../../../../../%E6%95%99%E5%AD%A6%E8%B5%84%E6%96%99/%E8%AF%BE%E7%A8%8B%E8%90%A5%E9%94%80/Mysql%E9%AB%98%E7%BA%A7/%E8%AF%BE%E7%A8%8B%E8%B5%84%E6%96%99/day-02/%E6%96%87%E6%A1%A3/img/sql/1551347590309.png" alt="1551347590309"> </p><p>通过测试，我们发现，在MyISAM存储引擎中，是没有事务控制的 ；</p><p><strong>文件存储方式</strong></p><p>每个MyISAM在磁盘上存储成3个文件，其文件名都和表名相同，但拓展名分别是 ： </p><p>.frm (存储表定义)；</p><p>.MYD(MYData , 存储数据)；</p><p>.MYI(MYIndex , 存储索引)；</p><p><img src="/img/sql/1556075073836.png" alt="1556075073836"> </p><h5 id="2-2-3-MEMORY"><a href="#2-2-3-MEMORY" class="headerlink" title="2.2.3 MEMORY"></a>2.2.3 MEMORY</h5><p>​Memory存储引擎将表的数据存放在内存中。每个MEMORY表实际对应一个磁盘文件，格式是.frm ，该文件中只存储表的结构，而其数据文件，都是存储在内存中，这样有利于数据的快速处理，提高整个表的效率。MEMORY 类型的表访问非常地快，因为他的数据是存放在内存中的，并且默认使用HASH索引 ， 但是服务一旦关闭，表中的数据就会丢失。</p><h5 id="2-2-4-MERGE"><a href="#2-2-4-MERGE" class="headerlink" title="2.2.4 MERGE"></a>2.2.4 MERGE</h5><p>​MERGE存储引擎是一组MyISAM表的组合，这些MyISAM表必须结构完全相同，MERGE表本身并没有存储数据，对MERGE类型的表可以进行查询、更新、删除操作，这些操作实际上是对内部的MyISAM表进行的。</p><p>​对于MERGE类型表的插入操作，是通过INSERT_METHOD子句定义插入的表，可以有3个不同的值，使用FIRST 或 LAST 值使得插入操作被相应地作用在第一或者最后一个表上，不定义这个子句或者定义为NO，表示不能对这个MERGE表执行插入操作。</p><p>​可以对MERGE表进行DROP操作，但是这个操作只是删除MERGE表的定义，对内部的表是没有任何影响的。</p><p><img src="/img/sql/1556076359503.png" alt="1556076359503"> </p><p>下面是一个创建和使用MERGE表的示例 ： </p><p>1）. 创建3个测试表 order_1990, order_1991, order_all , 其中order_all是前两个表的MERGE表 ： </p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> order_1990(</span><br><span class="line">order_id <span class="type">int</span> ,</span><br><span class="line">order_money <span class="keyword">double</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">order_address <span class="type">varchar</span>(<span class="number">50</span>),</span><br><span class="line"><span class="keyword">primary</span> key (order_id)</span><br><span class="line">)engine <span class="operator">=</span> myisam <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> order_1991(</span><br><span class="line">order_id <span class="type">int</span> ,</span><br><span class="line">order_money <span class="keyword">double</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">order_address <span class="type">varchar</span>(<span class="number">50</span>),</span><br><span class="line"><span class="keyword">primary</span> key (order_id)</span><br><span class="line">)engine <span class="operator">=</span> myisam <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> order_all(</span><br><span class="line">order_id <span class="type">int</span> ,</span><br><span class="line">order_money <span class="keyword">double</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">order_address <span class="type">varchar</span>(<span class="number">50</span>),</span><br><span class="line"><span class="keyword">primary</span> key (order_id)</span><br><span class="line">)engine <span class="operator">=</span> <span class="keyword">merge</span> <span class="keyword">union</span> <span class="operator">=</span> (order_1990,order_1991) INSERT_METHOD<span class="operator">=</span><span class="keyword">LAST</span> <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2）. 分别向两张表中插入记录 </p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> order_1990 <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">100.0</span>,<span class="string">&#x27;北京&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> order_1990 <span class="keyword">values</span>(<span class="number">2</span>,<span class="number">100.0</span>,<span class="string">&#x27;上海&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> order_1991 <span class="keyword">values</span>(<span class="number">10</span>,<span class="number">200.0</span>,<span class="string">&#x27;北京&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> order_1991 <span class="keyword">values</span>(<span class="number">11</span>,<span class="number">200.0</span>,<span class="string">&#x27;上海&#x27;</span>);</span><br></pre></td></tr></table></figure><p>3）. 查询3张表中的数据。</p><p>order_1990中的数据 ： </p><p><img src="/img/sql/1551408083254.png" alt="1551408083254"> </p><p>order_1991中的数据 ： </p><p><img src="/img/sql/1551408133323.png" alt="1551408133323">  </p><p>order_all中的数据 ：</p><p><img src="/img/sql/1551408216185.png" alt="1551408216185"> </p><p>​ </p><p>4）. 往order_all中插入一条记录 ，由于在MERGE表定义时，INSERT_METHOD 选择的是LAST，那么插入的数据会想最后一张表中插入。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> order_all <span class="keyword">values</span>(<span class="number">100</span>,<span class="number">10000.0</span>,<span class="string">&#x27;西安&#x27;</span>)；</span><br></pre></td></tr></table></figure><p><img src="/img/sql/1551408519889.png" alt="1551408519889">  </p><h4 id="2-3-存储引擎的选择"><a href="#2-3-存储引擎的选择" class="headerlink" title="2.3 存储引擎的选择"></a>2.3 存储引擎的选择</h4><p>​在选择存储引擎时，应该根据应用系统的特点选择合适的存储引擎。对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合。以下是几种常用的存储引擎的使用环境。</p><ul><li>InnoDB : 是Mysql的默认存储引擎，用于事务处理应用程序，支持外键。如果应用对事务的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询意外，还包含很多的更新、删除操作，那么InnoDB存储引擎是比较合适的选择。InnoDB存储引擎除了有效的降低由于删除和更新导致的锁定， 还可以确保事务的完整提交和回滚，对于类似于计费系统或者财务系统等对数据准确性要求比较高的系统，InnoDB是最合适的选择。</li><li>MyISAM ： 如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不是很高，那么选择这个存储引擎是非常合适的。</li><li>MEMORY：将所有数据保存在RAM中，在需要快速定位记录和其他类似数据环境下，可以提供几块的访问。MEMORY的缺陷就是对表的大小有限制，太大的表无法缓存在内存中，其次是要确保表的数据可以恢复，数据库异常终止后表中的数据是可以恢复的。MEMORY表通常用于更新不太频繁的小表，用以快速得到访问结果。</li><li>MERGE：用于将一系列等同的MyISAM表以逻辑方式组合在一起，并作为一个对象引用他们。MERGE表的优点在于可以突破对单个MyISAM表的大小限制，并且通过将不同的表分布在多个磁盘上，可以有效的改善MERGE表的访问效率。这对于存储诸如数据仓储等VLDB环境十分合适。</li></ul><h3 id="3-优化SQL步骤"><a href="#3-优化SQL步骤" class="headerlink" title="3. 优化SQL步骤"></a>3. 优化SQL步骤</h3><p>在应用的的开发过程中，由于初期数据量小，开发人员写 SQL 语句时更重视功能上的实现，但是当应用系统正式上线后，随着生产数据量的急剧增长，很多 SQL 语句开始逐渐显露出性能问题，对生产的影响也越来越大，此时这些有问题的 SQL 语句就成为整个系统性能的瓶颈，因此我们必须要对它们进行优化，本章将详细介绍在 MySQL 中优化 SQL 语句的方法。</p><p>当面对一个有 SQL 性能问题的数据库时，我们应该从何处入手来进行系统的分析，使得能够尽快定位问题 SQL 并尽快解决问题。</p><h4 id="3-1-查看SQL执行频率"><a href="#3-1-查看SQL执行频率" class="headerlink" title="3.1 查看SQL执行频率"></a>3.1 查看SQL执行频率</h4><p>MySQL 客户端连接成功后，通过 show [session|global] status 命令可以提供服务器状态信息。show [session|global] status 可以根据需要加上参数“session”或者“global”来显示 session 级（当前连接）的计结果和 global 级（自数据库上次启动至今）的统计结果。如果不写，默认使用参数是“session”。</p><p>下面的命令显示了当前 session 中所有统计参数的值：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show status like &#x27;Com_______&#x27;;</span><br></pre></td></tr></table></figure><p><img src="/img/sql/1552487172501.png" alt="1552487172501">  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show status like &#x27;Innodb_rows_%&#x27;;</span><br></pre></td></tr></table></figure><p><img src="/img/sql/1552487245859.png" alt="1552487245859"></p><p>Com_xxx 表示每个 xxx 语句执行的次数，我们通常比较关心的是以下几个统计参数。</p><table><thead><tr><th align="left">参数</th><th>含义</th></tr></thead><tbody><tr><td align="left">Com_select</td><td>执行 select 操作的次数，一次查询只累加 1。</td></tr><tr><td align="left">Com_insert</td><td>执行 INSERT 操作的次数，对于批量插入的 INSERT 操作，只累加一次。</td></tr><tr><td align="left">Com_update</td><td>执行 UPDATE 操作的次数。</td></tr><tr><td align="left">Com_delete</td><td>执行 DELETE 操作的次数。</td></tr><tr><td align="left">Innodb_rows_read</td><td>select 查询返回的行数。</td></tr><tr><td align="left">Innodb_rows_inserted</td><td>执行 INSERT 操作插入的行数。</td></tr><tr><td align="left">Innodb_rows_updated</td><td>执行 UPDATE 操作更新的行数。</td></tr><tr><td align="left">Innodb_rows_deleted</td><td>执行 DELETE 操作删除的行数。</td></tr><tr><td align="left">Connections</td><td>试图连接 MySQL 服务器的次数。</td></tr><tr><td align="left">Uptime</td><td>服务器工作时间。</td></tr><tr><td align="left">Slow_queries</td><td>慢查询的次数。</td></tr></tbody></table><p>Com_***      :  这些参数对于所有存储引擎的表操作都会进行累计。</p><p>Innodb_*** :  这几个参数只是针对InnoDB 存储引擎的，累加的算法也略有不同。</p><h4 id="3-2-定位低效率执行SQL"><a href="#3-2-定位低效率执行SQL" class="headerlink" title="3.2 定位低效率执行SQL"></a>3.2 定位低效率执行SQL</h4><p>可以通过以下两种方式定位执行效率较低的 SQL 语句。</p><ul><li>慢查询日志 : 通过慢查询日志定位那些执行效率较低的 SQL 语句，用–log-slow-queries[&#x3D;file_name]选项启动时，mysqld 写一个包含所有执行时间超过 long_query_time 秒的 SQL 语句的日志文件。具体可以查看本书第 26 章中日志管理的相关部分。</li><li>show processlist  : 慢查询日志在查询结束以后才纪录，所以在应用反映执行效率出现问题的时候查询慢查询日志并不能定位问题，可以使用show processlist命令查看当前MySQL在进行的线程，包括线程的状态、是否锁表等，可以实时地查看 SQL 的执行情况，同时对一些锁表操作进行优化。</li></ul><p><img src="/img/sql/1556098544349.png" alt="1556098544349"> </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1） id列，用户登录mysql时，系统分配的&quot;connection_id&quot;，可以使用函数connection_id()查看</span><br><span class="line"></span><br><span class="line">2） user列，显示当前用户。如果不是root，这个命令就只显示用户权限范围的sql语句</span><br><span class="line"></span><br><span class="line">3） host列，显示这个语句是从哪个ip的哪个端口上发的，可以用来跟踪出现问题语句的用户</span><br><span class="line"></span><br><span class="line">4） db列，显示这个进程目前连接的是哪个数据库</span><br><span class="line"></span><br><span class="line">5） command列，显示当前连接的执行的命令，一般取值为休眠（sleep），查询（query），连接（connect）等</span><br><span class="line"></span><br><span class="line">6） time列，显示这个状态持续的时间，单位是秒</span><br><span class="line"></span><br><span class="line">7） state列，显示使用当前连接的sql语句的状态，很重要的列。state描述的是语句执行中的某一个状态。一个sql语句，以查询为例，可能需要经过copying to tmp table、sorting result、sending data等状态才可以完成</span><br><span class="line"></span><br><span class="line">8） info列，显示这个sql语句，是判断问题语句的一个重要依据</span><br></pre></td></tr></table></figure><h4 id="3-3-explain分析执行计划"><a href="#3-3-explain分析执行计划" class="headerlink" title="3.3 explain分析执行计划"></a>3.3 explain分析执行计划</h4><p>通过以上步骤查询到效率低的 SQL 语句后，可以通过 EXPLAIN或者 DESC命令获取 MySQL如何执行 SELECT 语句的信息，包括在 SELECT 语句执行过程中表如何连接和连接的顺序。</p><p>查询SQL语句的执行计划 ： </p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain  <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_item <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><img src="/img/sql/1552487489859.png" alt="1552487489859"></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain  <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_item <span class="keyword">where</span> title <span class="operator">=</span> <span class="string">&#x27;阿尔卡特 (OT-979) 冰川白 联通3G手机3&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="/img/sql/1552487526919.png" alt="1552487526919">  </p><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>id</td><td>select查询的序列号，是一组数字，表示的是查询中执行select子句或者是操作表的顺序。</td></tr><tr><td>select_type</td><td>表示 SELECT 的类型，常见的取值有 SIMPLE（简单表，即不使用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION 中的第二个或者后面的查询语句）、SUBQUERY（子查询中的第一个 SELECT）等</td></tr><tr><td>table</td><td>输出结果集的表</td></tr><tr><td>type</td><td>表示表的连接类型，性能由好到差的连接类型为( system  —&gt;  const  —–&gt;  eq_ref  ——&gt;  ref  ——-&gt;  ref_or_null—-&gt;  index_merge  —&gt;  index_subquery  —–&gt;  range  —–&gt;  index  ——&gt; all )</td></tr><tr><td>possible_keys</td><td>表示查询时，可能使用的索引</td></tr><tr><td>key</td><td>表示实际使用的索引</td></tr><tr><td>key_len</td><td>索引字段的长度</td></tr><tr><td>rows</td><td>扫描行的数量</td></tr><tr><td>extra</td><td>执行情况的说明和描述</td></tr></tbody></table><h5 id="3-3-1-环境准备"><a href="#3-3-1-环境准备" class="headerlink" title="3.3.1 环境准备"></a>3.3.1 环境准备</h5><p><img src="/img/sql/1556122799330.png" alt="1556122799330"> </p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_role` (</span><br><span class="line">  `id` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `role_name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `role_code` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `description` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `unique_role_name` (`role_name`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_user` (</span><br><span class="line">  `id` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">96</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `unique_user_username` (`username`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `user_role` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> auto_increment ,</span><br><span class="line">  `user_id` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `role_id` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  KEY `fk_ur_user_id` (`user_id`),</span><br><span class="line">  KEY `fk_ur_role_id` (`role_id`),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `fk_ur_role_id` <span class="keyword">FOREIGN</span> KEY (`role_id`) <span class="keyword">REFERENCES</span> `t_role` (`id`) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">NO</span> ACTION <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">NO</span> ACTION,</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `fk_ur_user_id` <span class="keyword">FOREIGN</span> KEY (`user_id`) <span class="keyword">REFERENCES</span> `t_user` (`id`) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">NO</span> ACTION <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">NO</span> ACTION</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `t_user` (`id`, `username`, `password`, `name`) <span class="keyword">values</span>(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;super&#x27;</span>,<span class="string">&#x27;$2a$10$TJ4TmCdK.X4wv/tCqHW14.w70U3CC33CeVncD3SLmyMXMknstqKRe&#x27;</span>,<span class="string">&#x27;超级管理员&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `t_user` (`id`, `username`, `password`, `name`) <span class="keyword">values</span>(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;$2a$10$TJ4TmCdK.X4wv/tCqHW14.w70U3CC33CeVncD3SLmyMXMknstqKRe&#x27;</span>,<span class="string">&#x27;系统管理员&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `t_user` (`id`, `username`, `password`, `name`) <span class="keyword">values</span>(<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;itcast&#x27;</span>,<span class="string">&#x27;$2a$10$8qmaHgUFUAmPR5pOuWhYWOr291WJYjHelUlYn07k5ELF8ZCrW0Cui&#x27;</span>,<span class="string">&#x27;test02&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `t_user` (`id`, `username`, `password`, `name`) <span class="keyword">values</span>(<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;stu1&#x27;</span>,<span class="string">&#x27;$2a$10$pLtt2KDAFpwTWLjNsmTEi.oU1yOZyIn9XkziK/y/spH5rftCpUMZa&#x27;</span>,<span class="string">&#x27;学生1&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `t_user` (`id`, `username`, `password`, `name`) <span class="keyword">values</span>(<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;stu2&#x27;</span>,<span class="string">&#x27;$2a$10$nxPKkYSez7uz2YQYUnwhR.z57km3yqKn3Hr/p1FR6ZKgc18u.Tvqm&#x27;</span>,<span class="string">&#x27;学生2&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `t_user` (`id`, `username`, `password`, `name`) <span class="keyword">values</span>(<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;t1&#x27;</span>,<span class="string">&#x27;$2a$10$TJ4TmCdK.X4wv/tCqHW14.w70U3CC33CeVncD3SLmyMXMknstqKRe&#x27;</span>,<span class="string">&#x27;老师1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_role` (`id`, `role_name`, `role_code`, `description`) <span class="keyword">VALUES</span>(<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;学生&#x27;</span>,<span class="string">&#x27;student&#x27;</span>,<span class="string">&#x27;学生&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_role` (`id`, `role_name`, `role_code`, `description`) <span class="keyword">VALUES</span>(<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;老师&#x27;</span>,<span class="string">&#x27;teacher&#x27;</span>,<span class="string">&#x27;老师&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_role` (`id`, `role_name`, `role_code`, `description`) <span class="keyword">VALUES</span>(<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;教学管理员&#x27;</span>,<span class="string">&#x27;teachmanager&#x27;</span>,<span class="string">&#x27;教学管理员&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_role` (`id`, `role_name`, `role_code`, `description`) <span class="keyword">VALUES</span>(<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;管理员&#x27;</span>,<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;管理员&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_role` (`id`, `role_name`, `role_code`, `description`) <span class="keyword">VALUES</span>(<span class="string">&#x27;10&#x27;</span>,<span class="string">&#x27;超级管理员&#x27;</span>,<span class="string">&#x27;super&#x27;</span>,<span class="string">&#x27;超级管理员&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_role(id,user_id,role_id) <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;5&#x27;</span>),(<span class="keyword">NULL</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;7&#x27;</span>),(<span class="keyword">NULL</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;8&#x27;</span>),(<span class="keyword">NULL</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;9&#x27;</span>),(<span class="keyword">NULL</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;8&#x27;</span>),(<span class="keyword">NULL</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;10&#x27;</span>) ;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3-3-2-explain-之-id"><a href="#3-3-2-explain-之-id" class="headerlink" title="3.3.2 explain 之 id"></a>3.3.2 explain 之 id</h5><p>id 字段是 select查询的序列号，是一组数字，表示的是查询中执行select子句或者是操作表的顺序。id 情况有三种 ： </p><p>1） id 相同表示加载表的顺序是从上到下。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">explain select * from t_role r, t_user u, user_role ur where r.id = ur.role_id and u.id = ur.user_id ;</span><br></pre></td></tr></table></figure><p><img src="/img/sql/1556102471304.png" alt="1556102471304"></p><p>2） id 不同id值越大，优先级越高，越先被执行。 </p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_role <span class="keyword">WHERE</span> id <span class="operator">=</span> (<span class="keyword">SELECT</span> role_id <span class="keyword">FROM</span> user_role <span class="keyword">WHERE</span> user_id <span class="operator">=</span> (<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> t_user <span class="keyword">WHERE</span> username <span class="operator">=</span> <span class="string">&#x27;stu1&#x27;</span>))</span><br></pre></td></tr></table></figure><p><img src="/img/sql/1556103009534.png" alt="1556103009534"> </p><p>3） id 有相同，也有不同，同时存在。id相同的可以认为是一组，从上往下顺序执行；在所有的组中，id的值越大，优先级越高，越先执行。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_role r , (<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> user_role ur <span class="keyword">WHERE</span> ur.`user_id` <span class="operator">=</span> <span class="string">&#x27;2&#x27;</span>) a <span class="keyword">WHERE</span> r.id <span class="operator">=</span> a.role_id ; </span><br></pre></td></tr></table></figure><p><img src="/img/sql/1556103294182.png" alt="1556103294182"> </p><h5 id="3-3-3-explain-之-select-type"><a href="#3-3-3-explain-之-select-type" class="headerlink" title="3.3.3 explain 之 select_type"></a>3.3.3 explain 之 select_type</h5><p> 表示 SELECT 的类型，常见的取值，如下表所示：</p><table><thead><tr><th>select_type</th><th>含义</th></tr></thead><tbody><tr><td>SIMPLE</td><td>简单的select查询，查询中不包含子查询或者UNION</td></tr><tr><td>PRIMARY</td><td>查询中若包含任何复杂的子查询，最外层查询标记为该标识</td></tr><tr><td>SUBQUERY</td><td>在SELECT 或 WHERE 列表中包含了子查询</td></tr><tr><td>DERIVED</td><td>在FROM 列表中包含的子查询，被标记为 DERIVED（衍生） MYSQL会递归执行这些子查询，把结果放在临时表中</td></tr><tr><td>UNION</td><td>若第二个SELECT出现在UNION之后，则标记为UNION ； 若UNION包含在FROM子句的子查询中，外层SELECT将被标记为 ： DERIVED</td></tr><tr><td>UNION RESULT</td><td>从UNION表获取结果的SELECT</td></tr></tbody></table><h5 id="3-3-4-explain-之-table"><a href="#3-3-4-explain-之-table" class="headerlink" title="3.3.4 explain 之 table"></a>3.3.4 explain 之 table</h5><p>展示这一行的数据是关于哪一张表的 </p><h5 id="3-3-5-explain-之-type"><a href="#3-3-5-explain-之-type" class="headerlink" title="3.3.5 explain 之 type"></a>3.3.5 explain 之 type</h5><p>type 显示的是访问类型，是较为重要的一个指标，可取值为： </p><table><thead><tr><th>type</th><th>含义</th></tr></thead><tbody><tr><td>NULL</td><td>MySQL不访问任何表，索引，直接返回结果</td></tr><tr><td>system</td><td>表只有一行记录(等于系统表)，这是const类型的特例，一般不会出现</td></tr><tr><td>const</td><td>表示通过索引一次就找到了，const 用于比较primary key 或者 unique 索引。因为只匹配一行数据，所以很快。如将主键置于where列表中，MySQL 就能将该查询转换为一个常亮。const于将 “主键” 或 “唯一” 索引的所有部分与常量值进行比较</td></tr><tr><td>eq_ref</td><td>类似ref，区别在于使用的是唯一索引，使用主键的关联查询，关联查询出的记录只有一条。常见于主键或唯一索引扫描</td></tr><tr><td>ref</td><td>非唯一性索引扫描，返回匹配某个单独值的所有行。本质上也是一种索引访问，返回所有匹配某个单独值的所有行（多个）</td></tr><tr><td>range</td><td>只检索给定返回的行，使用一个索引来选择行。 where 之后出现 between ， &lt; , &gt; , in 等操作。</td></tr><tr><td>index</td><td>index 与 ALL的区别为  index 类型只是遍历了索引树， 通常比ALL 快， ALL 是遍历数据文件。</td></tr><tr><td>all</td><td>将遍历全表以找到匹配的行</td></tr></tbody></table><p>结果值从最好到最坏以此是：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NULL &gt; system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; ALL</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;一般来说， 我们需要保证查询至少达到 range 级别， 最好达到ref 。&#x3D;&#x3D;</p><h5 id="3-3-6-explain-之-key"><a href="#3-3-6-explain-之-key" class="headerlink" title="3.3.6 explain 之  key"></a>3.3.6 explain 之  key</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">possible_keys : 显示可能应用在这张表的索引， 一个或多个。 </span><br><span class="line"></span><br><span class="line">key ： 实际使用的索引， 如果为NULL， 则没有使用索引。</span><br><span class="line"></span><br><span class="line">key_len : 表示索引中使用的字节数， 该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下， 长度越短越好 。</span><br></pre></td></tr></table></figure><h5 id="3-3-7-explain-之-rows"><a href="#3-3-7-explain-之-rows" class="headerlink" title="3.3.7 explain 之 rows"></a>3.3.7 explain 之 rows</h5><p>扫描行的数量。</p><h5 id="3-3-8-explain-之-extra"><a href="#3-3-8-explain-之-extra" class="headerlink" title="3.3.8 explain 之 extra"></a>3.3.8 explain 之 extra</h5><p>其他的额外的执行计划信息，在该列展示 。</p><table><thead><tr><th>extra</th><th>含义</th></tr></thead><tbody><tr><td>using  filesort</td><td>说明mysql会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行读取， 称为 “文件排序”, 效率低。</td></tr><tr><td>using  temporary</td><td>使用了临时表保存中间结果，MySQL在对查询结果排序时使用临时表。常见于 order by 和 group by； 效率低</td></tr><tr><td>using  index</td><td>表示相应的select操作使用了覆盖索引， 避免访问表的数据行， 效率不错。</td></tr></tbody></table><h4 id="3-4-show-profile分析SQL"><a href="#3-4-show-profile分析SQL" class="headerlink" title="3.4 show profile分析SQL"></a>3.4 show profile分析SQL</h4><p>Mysql从5.0.37版本开始增加了对 show profiles 和 show profile 语句的支持。show profiles 能够在做SQL优化时帮助我们了解时间都耗费到哪里去了。</p><p>通过 have_profiling 参数，能够看到当前MySQL是否支持profile：</p><p><img src="/img/sql/1552488401999.png" alt="1552488401999"> </p><p>默认profiling是关闭的，可以通过set语句在Session级别开启profiling：</p><p><img src="/img/sql/1552488372405.png" alt="1552488372405"> </p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> profiling<span class="operator">=</span><span class="number">1</span>; <span class="operator">/</span><span class="operator">/</span>开启profiling 开关；</span><br></pre></td></tr></table></figure><p>通过profile，我们能够更清楚地了解SQL执行的过程。</p><p>首先，我们可以执行一系列的操作，如下图所示：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line"></span><br><span class="line">use db01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> tables;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_item <span class="keyword">where</span> id <span class="operator">&lt;</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> tb_item;</span><br></pre></td></tr></table></figure><p>执行完上述命令之后，再执行show profiles 指令， 来查看SQL语句执行的耗时：</p><p><img src="/img/sql/1552489017940.png" alt="1552489017940">  </p><p>通过show  profile for  query  query_id 语句可以查看到该SQL执行过程中每个线程的状态和消耗的时间：</p><p><img src="/img/sql/1552489053763.png" alt="1552489053763"> </p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">TIP ：</span><br><span class="line">Sending data 状态表示MySQL线程开始访问数据行并把结果返回给客户端，而不仅仅是返回个客户端。由于在Sending data状态下，MySQL线程往往需要做大量的磁盘读取操作，所以经常是整各查询中耗时最长的状态。</span><br></pre></td></tr></table></figure><p>在获取到最消耗时间的线程状态后，MySQL支持进一步选择all、cpu、block io 、context switch、page faults等明细类型类查看MySQL在使用什么资源上耗费了过高的时间。例如，选择查看CPU的耗费时间  ：</p><p><img src="/img/sql/1552489671119.png" alt="1552489671119"> </p><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>Status</td><td>sql 语句执行的状态</td></tr><tr><td>Duration</td><td>sql 执行过程中每一个步骤的耗时</td></tr><tr><td>CPU_user</td><td>当前用户占有的cpu</td></tr><tr><td>CPU_system</td><td>系统占有的cpu</td></tr></tbody></table><h4 id="3-5-trace分析优化器执行计划"><a href="#3-5-trace分析优化器执行计划" class="headerlink" title="3.5 trace分析优化器执行计划"></a>3.5 trace分析优化器执行计划</h4><p>MySQL5.6提供了对SQL的跟踪trace, 通过trace文件能够进一步了解为什么优化器选择A计划, 而不是选择B计划。</p><p>打开trace ， 设置格式为 JSON，并设置trace最大能够使用的内存大小，避免解析过程中因为默认内存过小而不能够完整展示。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> optimizer_trace<span class="operator">=</span>&quot;enabled=on&quot;,end_markers_in_json<span class="operator">=</span><span class="keyword">on</span>;</span><br><span class="line"><span class="keyword">set</span> optimizer_trace_max_mem_size<span class="operator">=</span><span class="number">1000000</span>;</span><br></pre></td></tr></table></figure><p>执行SQL语句 ：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_item <span class="keyword">where</span> id <span class="operator">&lt;</span> <span class="number">4</span>;</span><br></pre></td></tr></table></figure><p>最后， 检查information_schema.optimizer_trace就可以知道MySQL是如何执行SQL的 ：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.optimizer_trace\G;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">*************************** <span class="number">1.</span> row ***************************</span><br><span class="line">QUERY<span class="punctuation">:</span> select * from tb_item where id &lt; <span class="number">4</span></span><br><span class="line">TRACE<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;steps&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;join_preparation&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;select#&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;steps&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;expanded_query&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/* select#1 */ select `tb_item`.`id` AS `id`,`tb_item`.`title` AS `title`,`tb_item`.`price` AS `price`,`tb_item`.`num` AS `num`,`tb_item`.`categoryid` AS `categoryid`,`tb_item`.`status` AS `status`,`tb_item`.`sellerid` AS `sellerid`,`tb_item`.`createtime` AS `createtime`,`tb_item`.`updatetime` AS `updatetime` from `tb_item` where (`tb_item`.`id` &lt; 4)&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span> <span class="comment">/* steps */</span></span><br><span class="line">      <span class="punctuation">&#125;</span> <span class="comment">/* join_preparation */</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;join_optimization&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;select#&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;steps&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;condition_processing&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;condition&quot;</span><span class="punctuation">:</span> <span class="string">&quot;WHERE&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;original_condition&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(`tb_item`.`id` &lt; 4)&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;steps&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                  <span class="attr">&quot;transformation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;equality_propagation&quot;</span><span class="punctuation">,</span></span><br><span class="line">                  <span class="attr">&quot;resulting_condition&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(`tb_item`.`id` &lt; 4)&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                  <span class="attr">&quot;transformation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;constant_propagation&quot;</span><span class="punctuation">,</span></span><br><span class="line">                  <span class="attr">&quot;resulting_condition&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(`tb_item`.`id` &lt; 4)&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                  <span class="attr">&quot;transformation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;trivial_condition_removal&quot;</span><span class="punctuation">,</span></span><br><span class="line">                  <span class="attr">&quot;resulting_condition&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(`tb_item`.`id` &lt; 4)&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">              <span class="punctuation">]</span> <span class="comment">/* steps */</span></span><br><span class="line">            <span class="punctuation">&#125;</span> <span class="comment">/* condition_processing */</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;table_dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">              <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;table&quot;</span><span class="punctuation">:</span> <span class="string">&quot;`tb_item`&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;row_may_be_null&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;map_bit&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;depends_on_map_bits&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">]</span> <span class="comment">/* depends_on_map_bits */</span></span><br><span class="line">              <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span> <span class="comment">/* table_dependencies */</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;ref_optimizer_key_uses&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">]</span> <span class="comment">/* ref_optimizer_key_uses */</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;rows_estimation&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">              <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;table&quot;</span><span class="punctuation">:</span> <span class="string">&quot;`tb_item`&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;range_analysis&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                  <span class="attr">&quot;table_scan&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;rows&quot;</span><span class="punctuation">:</span> <span class="number">9816098</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;cost&quot;</span><span class="punctuation">:</span> <span class="number">2.04e6</span></span><br><span class="line">                  <span class="punctuation">&#125;</span> <span class="comment">/* table_scan */</span><span class="punctuation">,</span></span><br><span class="line">                  <span class="attr">&quot;potential_range_indices&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="punctuation">&#123;</span></span><br><span class="line">                      <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PRIMARY&quot;</span><span class="punctuation">,</span></span><br><span class="line">                      <span class="attr">&quot;usable&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">                      <span class="attr">&quot;key_parts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                        <span class="string">&quot;id&quot;</span></span><br><span class="line">                      <span class="punctuation">]</span> <span class="comment">/* key_parts */</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                  <span class="punctuation">]</span> <span class="comment">/* potential_range_indices */</span><span class="punctuation">,</span></span><br><span class="line">                  <span class="attr">&quot;setup_range_conditions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                  <span class="punctuation">]</span> <span class="comment">/* setup_range_conditions */</span><span class="punctuation">,</span></span><br><span class="line">                  <span class="attr">&quot;group_index_range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;chosen&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;cause&quot;</span><span class="punctuation">:</span> <span class="string">&quot;not_group_by_or_distinct&quot;</span></span><br><span class="line">                  <span class="punctuation">&#125;</span> <span class="comment">/* group_index_range */</span><span class="punctuation">,</span></span><br><span class="line">                  <span class="attr">&quot;analyzing_range_alternatives&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;range_scan_alternatives&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                      <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PRIMARY&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;ranges&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                          <span class="string">&quot;id &lt; 4&quot;</span></span><br><span class="line">                        <span class="punctuation">]</span> <span class="comment">/* ranges */</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;index_dives_for_eq_ranges&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;rowid_ordered&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;using_mrr&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;index_only&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;rows&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;cost&quot;</span><span class="punctuation">:</span> <span class="number">1.6154</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;chosen&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">                      <span class="punctuation">&#125;</span></span><br><span class="line">                    <span class="punctuation">]</span> <span class="comment">/* range_scan_alternatives */</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;analyzing_roworder_intersect&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                      <span class="attr">&quot;usable&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">                      <span class="attr">&quot;cause&quot;</span><span class="punctuation">:</span> <span class="string">&quot;too_few_roworder_scans&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span> <span class="comment">/* analyzing_roworder_intersect */</span></span><br><span class="line">                  <span class="punctuation">&#125;</span> <span class="comment">/* analyzing_range_alternatives */</span><span class="punctuation">,</span></span><br><span class="line">                  <span class="attr">&quot;chosen_range_access_summary&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;range_access_plan&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;range_scan&quot;</span><span class="punctuation">,</span></span><br><span class="line">                      <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PRIMARY&quot;</span><span class="punctuation">,</span></span><br><span class="line">                      <span class="attr">&quot;rows&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">                      <span class="attr">&quot;ranges&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                        <span class="string">&quot;id &lt; 4&quot;</span></span><br><span class="line">                      <span class="punctuation">]</span> <span class="comment">/* ranges */</span></span><br><span class="line">                    <span class="punctuation">&#125;</span> <span class="comment">/* range_access_plan */</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;rows_for_plan&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;cost_for_plan&quot;</span><span class="punctuation">:</span> <span class="number">1.6154</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;chosen&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">                  <span class="punctuation">&#125;</span> <span class="comment">/* chosen_range_access_summary */</span></span><br><span class="line">                <span class="punctuation">&#125;</span> <span class="comment">/* range_analysis */</span></span><br><span class="line">              <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span> <span class="comment">/* rows_estimation */</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;considered_execution_plans&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">              <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;plan_prefix&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">]</span> <span class="comment">/* plan_prefix */</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;table&quot;</span><span class="punctuation">:</span> <span class="string">&quot;`tb_item`&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;best_access_path&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                  <span class="attr">&quot;considered_access_paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="punctuation">&#123;</span></span><br><span class="line">                      <span class="attr">&quot;access_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;range&quot;</span><span class="punctuation">,</span></span><br><span class="line">                      <span class="attr">&quot;rows&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">                      <span class="attr">&quot;cost&quot;</span><span class="punctuation">:</span> <span class="number">2.2154</span><span class="punctuation">,</span></span><br><span class="line">                      <span class="attr">&quot;chosen&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                  <span class="punctuation">]</span> <span class="comment">/* considered_access_paths */</span></span><br><span class="line">                <span class="punctuation">&#125;</span> <span class="comment">/* best_access_path */</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;cost_for_plan&quot;</span><span class="punctuation">:</span> <span class="number">2.2154</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;rows_for_plan&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;chosen&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">              <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span> <span class="comment">/* considered_execution_plans */</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;attaching_conditions_to_tables&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;original_condition&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(`tb_item`.`id` &lt; 4)&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;attached_conditions_computation&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">              <span class="punctuation">]</span> <span class="comment">/* attached_conditions_computation */</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;attached_conditions_summary&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                  <span class="attr">&quot;table&quot;</span><span class="punctuation">:</span> <span class="string">&quot;`tb_item`&quot;</span><span class="punctuation">,</span></span><br><span class="line">                  <span class="attr">&quot;attached&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(`tb_item`.`id` &lt; 4)&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">              <span class="punctuation">]</span> <span class="comment">/* attached_conditions_summary */</span></span><br><span class="line">            <span class="punctuation">&#125;</span> <span class="comment">/* attaching_conditions_to_tables */</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;refine_plan&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">              <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;table&quot;</span><span class="punctuation">:</span> <span class="string">&quot;`tb_item`&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;access_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;range&quot;</span></span><br><span class="line">              <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span> <span class="comment">/* refine_plan */</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span> <span class="comment">/* steps */</span></span><br><span class="line">      <span class="punctuation">&#125;</span> <span class="comment">/* join_optimization */</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;join_execution&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;select#&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;steps&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">]</span> <span class="comment">/* steps */</span></span><br><span class="line">      <span class="punctuation">&#125;</span> <span class="comment">/* join_execution */</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span> <span class="comment">/* steps */</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="4-索引的使用"><a href="#4-索引的使用" class="headerlink" title="4. 索引的使用"></a>4. 索引的使用</h3><p>索引是数据库优化最常用也是最重要的手段之一, 通过索引通常可以帮助用户解决大多数的MySQL的性能优化问题。</p><h4 id="4-1-验证索引提升查询效率"><a href="#4-1-验证索引提升查询效率" class="headerlink" title="4.1 验证索引提升查询效率"></a>4.1 验证索引提升查询效率</h4><p>在我们准备的表结构tb_item 中， 一共存储了 300 万记录；</p><p>A. 根据ID查询 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from tb_item where id = 1999\G;</span><br></pre></td></tr></table></figure><p><img src="/../../../../../../%E6%95%99%E5%AD%A6%E8%B5%84%E6%96%99/%E8%AF%BE%E7%A8%8B%E8%90%A5%E9%94%80/Mysql%E9%AB%98%E7%BA%A7/%E8%AF%BE%E7%A8%8B%E8%B5%84%E6%96%99/day-02/%E6%96%87%E6%A1%A3/img/sql/1553261992653.png" alt="1553261992653"> </p><p>查询速度很快， 接近0s ， 主要的原因是因为id为主键， 有索引；</p><p><img src="/../../../../../../%E6%95%99%E5%AD%A6%E8%B5%84%E6%96%99/%E8%AF%BE%E7%A8%8B%E8%90%A5%E9%94%80/Mysql%E9%AB%98%E7%BA%A7/%E8%AF%BE%E7%A8%8B%E8%B5%84%E6%96%99/day-02/%E6%96%87%E6%A1%A3/img/sql/1553262044466.png" alt="1553262044466"> </p><p>2). 根据 title 进行精确查询</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_item <span class="keyword">where</span> title <span class="operator">=</span> <span class="string">&#x27;iphoneX 移动3G 32G941&#x27;</span>\G; </span><br></pre></td></tr></table></figure><p><img src="/../../../../../../%E6%95%99%E5%AD%A6%E8%B5%84%E6%96%99/%E8%AF%BE%E7%A8%8B%E8%90%A5%E9%94%80/Mysql%E9%AB%98%E7%BA%A7/%E8%AF%BE%E7%A8%8B%E8%B5%84%E6%96%99/day-02/%E6%96%87%E6%A1%A3/img/sql/1553262215900.png" alt="1553262215900"> </p><p>查看SQL语句的执行计划 ： </p><p><img src="/../../../../../../%E6%95%99%E5%AD%A6%E8%B5%84%E6%96%99/%E8%AF%BE%E7%A8%8B%E8%90%A5%E9%94%80/Mysql%E9%AB%98%E7%BA%A7/%E8%AF%BE%E7%A8%8B%E8%B5%84%E6%96%99/day-02/%E6%96%87%E6%A1%A3/img/sql/1553262469785.png" alt="1553262469785"> </p><p>处理方案 ， 针对title字段， 创建索引 ： </p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> index idx_item_title <span class="keyword">on</span> tb_item(title);</span><br></pre></td></tr></table></figure><p><img src="/../../../../../../%E6%95%99%E5%AD%A6%E8%B5%84%E6%96%99/%E8%AF%BE%E7%A8%8B%E8%90%A5%E9%94%80/Mysql%E9%AB%98%E7%BA%A7/%E8%AF%BE%E7%A8%8B%E8%B5%84%E6%96%99/day-02/%E6%96%87%E6%A1%A3/img/sql/1553263229523.png" alt="1553263229523"> </p><p>索引创建完成之后，再次进行查询 ： </p><p><img src="/../../../../../../%E6%95%99%E5%AD%A6%E8%B5%84%E6%96%99/%E8%AF%BE%E7%A8%8B%E8%90%A5%E9%94%80/Mysql%E9%AB%98%E7%BA%A7/%E8%AF%BE%E7%A8%8B%E8%B5%84%E6%96%99/day-02/%E6%96%87%E6%A1%A3/img/sql/1553263302706.png" alt="1553263302706"> </p><p>通过explain ， 查看执行计划，执行SQL时使用了刚才创建的索引 </p><p><img src="/../../../../../../%E6%95%99%E5%AD%A6%E8%B5%84%E6%96%99/%E8%AF%BE%E7%A8%8B%E8%90%A5%E9%94%80/Mysql%E9%AB%98%E7%BA%A7/%E8%AF%BE%E7%A8%8B%E8%B5%84%E6%96%99/day-02/%E6%96%87%E6%A1%A3/img/sql/1553263355262.png" alt="1553263355262"> </p><h4 id="4-2-索引的使用"><a href="#4-2-索引的使用" class="headerlink" title="4.2 索引的使用"></a>4.2 索引的使用</h4><h5 id="4-2-1-准备环境"><a href="#4-2-1-准备环境" class="headerlink" title="4.2.1 准备环境"></a>4.2.1 准备环境</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `tb_seller` (</span><br><span class="line">`sellerid` <span class="type">varchar</span> (<span class="number">100</span>),</span><br><span class="line">`name` <span class="type">varchar</span> (<span class="number">100</span>),</span><br><span class="line">`nickname` <span class="type">varchar</span> (<span class="number">50</span>),</span><br><span class="line">`password` <span class="type">varchar</span> (<span class="number">60</span>),</span><br><span class="line">`status` <span class="type">varchar</span> (<span class="number">1</span>),</span><br><span class="line">`address` <span class="type">varchar</span> (<span class="number">100</span>),</span><br><span class="line">`createtime` datetime,</span><br><span class="line">    <span class="keyword">primary</span> key(`sellerid`)</span><br><span class="line">)engine<span class="operator">=</span>innodb <span class="keyword">default</span> charset<span class="operator">=</span>utf8mb4; </span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `tb_seller` (`sellerid`, `name`, `nickname`, `password`, `status`, `address`, `createtime`) <span class="keyword">values</span>(<span class="string">&#x27;alibaba&#x27;</span>,<span class="string">&#x27;阿里巴巴&#x27;</span>,<span class="string">&#x27;阿里小店&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `tb_seller` (`sellerid`, `name`, `nickname`, `password`, `status`, `address`, `createtime`) <span class="keyword">values</span>(<span class="string">&#x27;baidu&#x27;</span>,<span class="string">&#x27;百度科技有限公司&#x27;</span>,<span class="string">&#x27;百度小店&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `tb_seller` (`sellerid`, `name`, `nickname`, `password`, `status`, `address`, `createtime`) <span class="keyword">values</span>(<span class="string">&#x27;huawei&#x27;</span>,<span class="string">&#x27;华为科技有限公司&#x27;</span>,<span class="string">&#x27;华为小店&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `tb_seller` (`sellerid`, `name`, `nickname`, `password`, `status`, `address`, `createtime`) <span class="keyword">values</span>(<span class="string">&#x27;itcast&#x27;</span>,<span class="string">&#x27;传智播客教育科技有限公司&#x27;</span>,<span class="string">&#x27;传智播客&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `tb_seller` (`sellerid`, `name`, `nickname`, `password`, `status`, `address`, `createtime`) <span class="keyword">values</span>(<span class="string">&#x27;itheima&#x27;</span>,<span class="string">&#x27;黑马程序员&#x27;</span>,<span class="string">&#x27;黑马程序员&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `tb_seller` (`sellerid`, `name`, `nickname`, `password`, `status`, `address`, `createtime`) <span class="keyword">values</span>(<span class="string">&#x27;luoji&#x27;</span>,<span class="string">&#x27;罗技科技有限公司&#x27;</span>,<span class="string">&#x27;罗技小店&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `tb_seller` (`sellerid`, `name`, `nickname`, `password`, `status`, `address`, `createtime`) <span class="keyword">values</span>(<span class="string">&#x27;oppo&#x27;</span>,<span class="string">&#x27;OPPO科技有限公司&#x27;</span>,<span class="string">&#x27;OPPO官方旗舰店&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `tb_seller` (`sellerid`, `name`, `nickname`, `password`, `status`, `address`, `createtime`) <span class="keyword">values</span>(<span class="string">&#x27;ourpalm&#x27;</span>,<span class="string">&#x27;掌趣科技股份有限公司&#x27;</span>,<span class="string">&#x27;掌趣小店&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `tb_seller` (`sellerid`, `name`, `nickname`, `password`, `status`, `address`, `createtime`) <span class="keyword">values</span>(<span class="string">&#x27;qiandu&#x27;</span>,<span class="string">&#x27;千度科技&#x27;</span>,<span class="string">&#x27;千度小店&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `tb_seller` (`sellerid`, `name`, `nickname`, `password`, `status`, `address`, `createtime`) <span class="keyword">values</span>(<span class="string">&#x27;sina&#x27;</span>,<span class="string">&#x27;新浪科技有限公司&#x27;</span>,<span class="string">&#x27;新浪官方旗舰店&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `tb_seller` (`sellerid`, `name`, `nickname`, `password`, `status`, `address`, `createtime`) <span class="keyword">values</span>(<span class="string">&#x27;xiaomi&#x27;</span>,<span class="string">&#x27;小米科技&#x27;</span>,<span class="string">&#x27;小米官方旗舰店&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;西安市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `tb_seller` (`sellerid`, `name`, `nickname`, `password`, `status`, `address`, `createtime`) <span class="keyword">values</span>(<span class="string">&#x27;yijia&#x27;</span>,<span class="string">&#x27;宜家家居&#x27;</span>,<span class="string">&#x27;宜家家居旗舰店&#x27;</span>,<span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;北京市&#x27;</span>,<span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> index idx_seller_name_sta_addr <span class="keyword">on</span> tb_seller(name,status,address);</span><br></pre></td></tr></table></figure><h5 id="4-2-2-避免索引失效"><a href="#4-2-2-避免索引失效" class="headerlink" title="4.2.2 避免索引失效"></a>4.2.2 避免索引失效</h5><p>1).  全值匹配 ，对索引中所有列都指定具体值。</p><p>改情况下，索引生效，执行效率高。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_seller <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;小米科技&#x27;</span> <span class="keyword">and</span> status<span class="operator">=</span><span class="string">&#x27;1&#x27;</span> <span class="keyword">and</span> address<span class="operator">=</span><span class="string">&#x27;北京市&#x27;</span>\G;</span><br></pre></td></tr></table></figure><p><img src="/img/sql/1556170997921.png" alt="1556170997921"> </p><p>2). 最左前缀法则</p><p>如果索引了多列，要遵守最左前缀法则。指的是查询从索引的最左前列开始，并且不跳过索引中的列。</p><p>匹配最左前缀法则，走索引：</p><p><img src="/img/sql/1556171348995.png" alt="1556171348995">  </p><p>违法最左前缀法则 ， 索引失效：</p><p><img src="/img/sql/1556171428140.png" alt="1556171428140"> </p><p>如果符合最左法则，但是出现跳跃某一列，只有最左列索引生效：</p><p><img src="/img/sql/1556171662203.png" alt="1556171662203"> </p><p>3). 范围查询右边的列，不能使用索引 。</p><p><img src="/img/sql/1556172256791.png" alt="1556172256791"> </p><p>根据前面的两个字段name ， status 查询是走索引的， 但是最后一个条件address 没有用到索引。</p><p>4). 不要在索引列上进行运算操作， 索引将失效。</p><p><img src="/img/sql/1556172813715.png" alt="1556172813715"> </p><p>5). 字符串不加单引号，造成索引失效。</p><p><img src="/img/sql/1556172967493.png" alt="1556172967493"> </p><p>由于，在查询是，没有对字符串加单引号，MySQL的查询优化器，会自动的进行类型转换，造成索引失效。</p><p>6). 尽量使用覆盖索引，避免select *</p><p>尽量使用覆盖索引（只访问索引的查询（索引列完全包含查询列）），减少select * 。</p><p><img src="/img/sql/1556173928299.png" alt="1556173928299"> </p><p>如果查询列，超出索引列，也会降低性能。</p><p><img src="/img/sql/1556173986068.png" alt="1556173986068"> </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TIP : </span><br><span class="line"></span><br><span class="line">    using index ：使用覆盖索引的时候就会出现</span><br><span class="line"></span><br><span class="line">    using where：在查找使用索引的情况下，需要回表去查询所需的数据</span><br><span class="line"></span><br><span class="line">    using index condition：查找使用了索引，但是需要回表查询数据</span><br><span class="line"></span><br><span class="line">    using index ; using where：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询数据</span><br></pre></td></tr></table></figure><p>7). 用or分割开的条件， 如果or前的条件中的列有索引，而后面的列中没有索引，那么涉及的索引都不会被用到。</p><p>示例，name字段是索引列 ， 而createtime不是索引列，中间是or进行连接是不走索引的 ： </p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_seller <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;黑马程序员&#x27;</span> <span class="keyword">or</span> createtime <span class="operator">=</span> <span class="string">&#x27;2088-01-01 12:00:00&#x27;</span>\G;</span><br></pre></td></tr></table></figure><p><img src="/img/sql/1556174994440.png" alt="1556174994440"> </p><p>8).  以%开头的Like模糊查询，索引失效。</p><p>如果仅仅是尾部模糊匹配，索引不会失效。如果是头部模糊匹配，索引失效。</p><p><img src="/img/sql/1556175114369.png" alt="1556175114369"> </p><p>解决方案 ： </p><p>通过覆盖索引来解决 </p><p><img src="/img/sql/1556247686483.png" alt="1556247686483"> </p><p>9). 如果MySQL评估使用索引比全表更慢，则不使用索引。</p><p><img src="/img/sql/1556175445210.png" alt="1556175445210"> </p><p>10). is  NULL ， is NOT NULL  <font color='red'>有时</font>索引失效。</p><p><img src="/img/sql/1556180634889.png" alt="1556180634889">  </p><p>11). in 走索引， not in 索引失效。</p><p><img src="/img/sql/1556249602732.png" alt="1556249602732">  </p><p>12). 单列索引和复合索引。</p><p>尽量使用复合索引，而少使用单列索引 。</p><p>创建复合索引 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create index idx_name_sta_address on tb_seller(name, status, address);</span><br><span class="line"></span><br><span class="line">就相当于创建了三个索引 ： </span><br><span class="line">name</span><br><span class="line">name + status</span><br><span class="line">name + status + address</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建单列索引 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create index idx_seller_name on tb_seller(name);</span><br><span class="line">create index idx_seller_status on tb_seller(status);</span><br><span class="line">create index idx_seller_address on tb_seller(address);</span><br></pre></td></tr></table></figure><p>数据库会选择一个最优的索引（辨识度最高索引）来使用，并不会使用全部索引 。</p><h4 id="4-3-查看索引使用情况"><a href="#4-3-查看索引使用情况" class="headerlink" title="4.3 查看索引使用情况"></a>4.3 查看索引使用情况</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> status <span class="keyword">like</span> <span class="string">&#x27;Handler_read%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> status <span class="keyword">like</span> <span class="string">&#x27;Handler_read%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="/img/sql/1552885364563.png" alt="1552885364563"> </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Handler_read_first：索引中第一条被读的次数。如果较高，表示服务器正执行大量全索引扫描（这个值越低越好）。</span><br><span class="line"></span><br><span class="line">Handler_read_key：如果索引正在工作，这个值代表一个行被索引值读的次数，如果值越低，表示索引得到的性能改善不高，因为索引不经常使用（这个值越高越好）。</span><br><span class="line"></span><br><span class="line">Handler_read_next ：按照键顺序读下一行的请求数。如果你用范围约束或如果执行索引扫描来查询索引列，该值增加。</span><br><span class="line"></span><br><span class="line">Handler_read_prev：按照键顺序读前一行的请求数。该读方法主要用于优化ORDER BY ... DESC。</span><br><span class="line"></span><br><span class="line">Handler_read_rnd ：根据固定位置读一行的请求数。如果你正执行大量查询并需要对结果进行排序该值较高。你可能使用了大量需要MySQL扫描整个表的查询或你的连接没有正确使用键。这个值较高，意味着运行效率低，应该建立索引来补救。</span><br><span class="line"></span><br><span class="line">Handler_read_rnd_next：在数据文件中读下一行的请求数。如果你正进行大量的表扫描，该值较高。通常说明你的表索引不正确或写入的查询没有利用索引。</span><br></pre></td></tr></table></figure><h3 id="5-SQL优化"><a href="#5-SQL优化" class="headerlink" title="5. SQL优化"></a>5. SQL优化</h3><h4 id="5-1-大批量插入数据"><a href="#5-1-大批量插入数据" class="headerlink" title="5.1 大批量插入数据"></a>5.1 大批量插入数据</h4><p>环境准备 ： </p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_user_2` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">96</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `birthday` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `sex` <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `email` <span class="type">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `phone` <span class="type">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `qq` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `status` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户状态&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `unique_user_username` (`username`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 ;</span><br></pre></td></tr></table></figure><p>当使用load 命令导入数据的时候，适当的设置可以提高导入的效率。</p><p><img src="/img/sql/1556269346488.png" alt="1556269346488"> </p><p>对于 InnoDB 类型的表，有以下几种方式可以提高导入的效率：</p><p>1） 主键顺序插入</p><p>因为InnoDB类型的表是按照主键的顺序保存的，所以将导入的数据按照主键的顺序排列，可以有效的提高导入数据的效率。如果InnoDB表没有主键，那么系统会自动默认创建一个内部列作为主键，所以如果可以给表创建一个主键，将可以利用这点，来提高导入数据的效率。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">脚本文件介绍 :</span><br><span class="line">sql1.log  ----&gt; 主键有序</span><br><span class="line">sql2.log  ----&gt; 主键无序</span><br></pre></td></tr></table></figure><p>插入ID顺序排列数据：</p><p><img src="/img/sql/1555771750567.png" alt="1555771750567"></p><p>插入ID无序排列数据：</p><p><img src="/img/sql/1555771959734.png" alt="1555771959734"> </p><p>2） 关闭唯一性校验</p><p>在导入数据前执行 SET UNIQUE_CHECKS&#x3D;0，关闭唯一性校验，在导入结束后执行SET UNIQUE_CHECKS&#x3D;1，恢复唯一性校验，可以提高导入的效率。</p><p><img src="/img/sql/1555772132736.png" alt="1555772132736"> </p><p>3） 手动提交事务</p><p>如果应用使用自动提交的方式，建议在导入前执行 SET AUTOCOMMIT&#x3D;0，关闭自动提交，导入结束后再执行 SET AUTOCOMMIT&#x3D;1，打开自动提交，也可以提高导入的效率。</p><p><img src="/img/sql/1555772351208.png" alt="1555772351208"></p><h4 id="5-2-优化insert语句"><a href="#5-2-优化insert语句" class="headerlink" title="5.2 优化insert语句"></a>5.2 优化insert语句</h4><p>当进行数据的insert操作的时候，可以考虑采用以下几种优化方案。</p><ul><li><p>如果需要同时对一张表插入很多行数据时，应该尽量使用多个值表的insert语句，这种方式将大大的缩减客户端与数据库之间的连接、关闭等消耗。使得效率比分开执行的单个insert语句快。</p><p>示例， 原始方式为：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;Tom&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;Cat&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;Jerry&#x27;</span>);</span><br></pre></td></tr></table></figure><p>优化后的方案为 ： </p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;Tom&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;Cat&#x27;</span>)，(<span class="number">3</span>,<span class="string">&#x27;Jerry&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>在事务中进行数据插入。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;Tom&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;Cat&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;Jerry&#x27;</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure></li><li><p>数据有序插入</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;Tim&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;Tom&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;Jerry&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">5</span>,<span class="string">&#x27;Rose&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;Cat&#x27;</span>);</span><br></pre></td></tr></table></figure><p>优化后</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;Tom&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;Cat&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;Jerry&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;Tim&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">5</span>,<span class="string">&#x27;Rose&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-3-优化order-by语句"><a href="#5-3-优化order-by语句" class="headerlink" title="5.3 优化order by语句"></a>5.3 优化order by语句</h4><h5 id="5-3-1-环境准备"><a href="#5-3-1-环境准备" class="headerlink" title="5.3.1 环境准备"></a>5.3.1 环境准备</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `emp` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span>(<span class="number">3</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `salary` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB  <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `emp` (`id`, `name`, `age`, `salary`) <span class="keyword">values</span>(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;Tom&#x27;</span>,<span class="string">&#x27;25&#x27;</span>,<span class="string">&#x27;2300&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `emp` (`id`, `name`, `age`, `salary`) <span class="keyword">values</span>(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;Jerry&#x27;</span>,<span class="string">&#x27;30&#x27;</span>,<span class="string">&#x27;3500&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `emp` (`id`, `name`, `age`, `salary`) <span class="keyword">values</span>(<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;Luci&#x27;</span>,<span class="string">&#x27;25&#x27;</span>,<span class="string">&#x27;2800&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `emp` (`id`, `name`, `age`, `salary`) <span class="keyword">values</span>(<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;Jay&#x27;</span>,<span class="string">&#x27;36&#x27;</span>,<span class="string">&#x27;3500&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `emp` (`id`, `name`, `age`, `salary`) <span class="keyword">values</span>(<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;Tom2&#x27;</span>,<span class="string">&#x27;21&#x27;</span>,<span class="string">&#x27;2200&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `emp` (`id`, `name`, `age`, `salary`) <span class="keyword">values</span>(<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;Jerry2&#x27;</span>,<span class="string">&#x27;31&#x27;</span>,<span class="string">&#x27;3300&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `emp` (`id`, `name`, `age`, `salary`) <span class="keyword">values</span>(<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;Luci2&#x27;</span>,<span class="string">&#x27;26&#x27;</span>,<span class="string">&#x27;2700&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `emp` (`id`, `name`, `age`, `salary`) <span class="keyword">values</span>(<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;Jay2&#x27;</span>,<span class="string">&#x27;33&#x27;</span>,<span class="string">&#x27;3500&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `emp` (`id`, `name`, `age`, `salary`) <span class="keyword">values</span>(<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;Tom3&#x27;</span>,<span class="string">&#x27;23&#x27;</span>,<span class="string">&#x27;2400&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `emp` (`id`, `name`, `age`, `salary`) <span class="keyword">values</span>(<span class="string">&#x27;10&#x27;</span>,<span class="string">&#x27;Jerry3&#x27;</span>,<span class="string">&#x27;32&#x27;</span>,<span class="string">&#x27;3100&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `emp` (`id`, `name`, `age`, `salary`) <span class="keyword">values</span>(<span class="string">&#x27;11&#x27;</span>,<span class="string">&#x27;Luci3&#x27;</span>,<span class="string">&#x27;26&#x27;</span>,<span class="string">&#x27;2900&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `emp` (`id`, `name`, `age`, `salary`) <span class="keyword">values</span>(<span class="string">&#x27;12&#x27;</span>,<span class="string">&#x27;Jay3&#x27;</span>,<span class="string">&#x27;37&#x27;</span>,<span class="string">&#x27;4500&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> index idx_emp_age_salary <span class="keyword">on</span> emp(age,salary);</span><br></pre></td></tr></table></figure><h5 id="5-3-2-两种排序方式"><a href="#5-3-2-两种排序方式" class="headerlink" title="5.3.2 两种排序方式"></a>5.3.2 两种排序方式</h5><p>1). 第一种是通过对返回数据进行排序，也就是通常说的 filesort 排序，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序。</p><p><img src="/img/sql/1556335817763.png" alt="1556335817763"> </p><p>2). 第二种通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高。</p><p><img src="/img/sql/1556335866539.png" alt="1556335866539"> </p><p>多字段排序</p><p><img src="/img/sql/1556336352061.png" alt="1556336352061"> </p><p>了解了MySQL的排序方式，优化目标就清晰了：尽量减少额外的排序，通过索引直接返回有序数据。where 条件和Order by 使用相同的索引，并且Order By 的顺序和索引顺序相同， 并且Order  by 的字段都是升序，或者都是降序。否则肯定需要额外的操作，这样就会出现FileSort。</p><h5 id="5-3-3-Filesort-的优化"><a href="#5-3-3-Filesort-的优化" class="headerlink" title="5.3.3 Filesort 的优化"></a>5.3.3 Filesort 的优化</h5><p>通过创建合适的索引，能够减少 Filesort 的出现，但是在某些情况下，条件限制不能让Filesort消失，那就需要加快 Filesort的排序操作。对于Filesort ， MySQL 有两种排序算法：</p><p>1） 两次扫描算法 ：MySQL4.1 之前，使用该方式排序。首先根据条件取出排序字段和行指针信息，然后在排序区 sort buffer 中排序，如果sort buffer不够，则在临时表 temporary table 中存储排序结果。完成排序之后，再根据行指针回表读取记录，该操作可能会导致大量随机I&#x2F;O操作。</p><p>2）一次扫描算法：一次性取出满足条件的所有字段，然后在排序区 sort  buffer 中排序后直接输出结果集。排序时内存开销较大，但是排序效率比两次扫描算法要高。</p><p>MySQL 通过比较系统变量 max_length_for_sort_data 的大小和Query语句取出的字段总大小， 来判定是否那种排序算法，如果max_length_for_sort_data 更大，那么使用第二种优化之后的算法；否则使用第一种。</p><p>可以适当提高 sort_buffer_size  和 max_length_for_sort_data  系统变量，来增大排序区的大小，提高排序的效率。</p><p><img src="/img/sql/1556338367593.png" alt="1556338367593"> </p><h4 id="5-4-优化group-by-语句"><a href="#5-4-优化group-by-语句" class="headerlink" title="5.4 优化group by 语句"></a>5.4 优化group by 语句</h4><p>由于GROUP BY 实际上也同样会进行排序操作，而且与ORDER BY 相比，GROUP BY 主要只是多了排序之后的分组操作。当然，如果在分组的时候还使用了其他的一些聚合函数，那么还需要一些聚合函数的计算。所以，在GROUP BY 的实现过程中，与 ORDER BY 一样也可以利用到索引。</p><p>如果查询包含 group by 但是用户想要避免排序结果的消耗， 则可以执行order by null 禁止排序。如下 ：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> index idx_emp_age_salary <span class="keyword">on</span> emp;</span><br><span class="line"></span><br><span class="line">explain <span class="keyword">select</span> age,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> age;</span><br></pre></td></tr></table></figure><p><img src="/img/sql/1556339573979.png" alt="1556339573979">  </p><p>优化后</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> age,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> age <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><p><img src="/img/sql/1556339633161.png" alt="1556339633161">  </p><p>从上面的例子可以看出，第一个SQL语句需要进行”filesort”，而第二个SQL由于order  by  null 不需要进行 “filesort”， 而上文提过Filesort往往非常耗费时间。</p><p>创建索引 ：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> index idx_emp_age_salary <span class="keyword">on</span> emp(age,salary)；</span><br></pre></td></tr></table></figure><p><img src="/img/sql/1556339688158.png" alt="1556339688158"> </p><h4 id="5-5-优化嵌套查询"><a href="#5-5-优化嵌套查询" class="headerlink" title="5.5 优化嵌套查询"></a>5.5 优化嵌套查询</h4><p>Mysql4.1版本之后，开始支持SQL的子查询。这个技术可以使用SELECT语句来创建一个单列的查询结果，然后把这个结果作为过滤条件用在另一个查询中。使用子查询可以一次性的完成很多逻辑上需要多个步骤才能完成的SQL操作，同时也可以避免事务或者表锁死，并且写起来也很容易。但是，有些情况下，子查询是可以被更高效的连接（JOIN）替代。</p><p>示例 ，查找有角色的所有的用户信息 : </p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user <span class="keyword">where</span> id <span class="keyword">in</span> (<span class="keyword">select</span> user_id <span class="keyword">from</span> user_role );</span><br></pre></td></tr></table></figure><p>执行计划为 : </p><p><img src="/img/sql/1556359399199.png" alt="1556359399199">   </p><p>优化后 :</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user u , user_role ur <span class="keyword">where</span> u.id <span class="operator">=</span> ur.user_id;</span><br></pre></td></tr></table></figure><p><img src="/img/sql/1556359482142.png" alt="1556359482142">   </p><p>连接(Join)查询之所以更有效率一些 ，是因为MySQL不需要在内存中创建临时表来完成这个逻辑上需要两个步骤的查询工作。</p><h4 id="5-6-优化OR条件"><a href="#5-6-优化OR条件" class="headerlink" title="5.6 优化OR条件"></a>5.6 优化OR条件</h4><p>对于包含OR的查询子句，如果要利用索引，则OR之间的每个条件列都必须用到索引 ， 而且不能使用到复合索引； 如果没有索引，则应该考虑增加索引。</p><p>获取 emp 表中的所有的索引 ： </p><p><img src="/img/sql/1556354464657.png" alt="1556354464657">  </p><p>示例 ： </p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">or</span> age <span class="operator">=</span> <span class="number">30</span>;</span><br></pre></td></tr></table></figure><p><img src="/img/sql/1556354887509.png" alt="1556354887509"></p><p><img src="/img/sql/1556354920964.png" alt="1556354920964">  </p><p>建议使用 union 替换 or ： </p><p><img src="/img/sql/1556355027728.png" alt="1556355027728"> </p><p>我们来比较下重要指标，发现主要差别是 type 和 ref 这两项</p><p>type 显示的是访问类型，是较为重要的一个指标，结果值从好到坏依次是：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null  &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</span><br></pre></td></tr></table></figure><p>UNION 语句的 type 值为 ref，OR 语句的 type 值为 range，可以看到这是一个很明显的差距</p><p>UNION 语句的 ref 值为 const，OR 语句的 type 值为 null，const 表示是常量值引用，非常快</p><p>这两项的差距就说明了 UNION 要优于 OR 。</p><h4 id="5-7-优化分页查询"><a href="#5-7-优化分页查询" class="headerlink" title="5.7 优化分页查询"></a>5.7 优化分页查询</h4><p>一般分页查询时，通过创建覆盖索引能够比较好地提高性能。一个常见又非常头疼的问题就是 limit 2000000,10  ，此时需要MySQL排序前2000010 记录，仅仅返回2000000 - 2000010 的记录，其他记录丢弃，查询排序的代价非常大 。</p><p><img src="/img/sql/1556361314783.png" alt="1556361314783"> </p><h5 id="5-7-1-优化思路一"><a href="#5-7-1-优化思路一" class="headerlink" title="5.7.1 优化思路一"></a>5.7.1 优化思路一</h5><p>在索引上完成排序分页操作，最后根据主键关联回原表查询所需要的其他列内容。</p><p><img src="/img/sql/1556416102800.png" alt="1556416102800"> </p><h5 id="5-7-2-优化思路二"><a href="#5-7-2-优化思路二" class="headerlink" title="5.7.2 优化思路二"></a>5.7.2 优化思路二</h5><p>该方案适用于主键自增的表，可以把Limit 查询转换成某个位置的查询 。</p><p><img src="/img/sql/1556363928151.png" alt="1556363928151"> </p><h4 id="5-8-使用SQL提示"><a href="#5-8-使用SQL提示" class="headerlink" title="5.8 使用SQL提示"></a>5.8 使用SQL提示</h4><p>SQL提示，是优化数据库的一个重要手段，简单来说，就是在SQL语句中加入一些人为的提示来达到优化操作的目的。</p><h5 id="5-8-1-USE-INDEX"><a href="#5-8-1-USE-INDEX" class="headerlink" title="5.8.1 USE INDEX"></a>5.8.1 USE INDEX</h5><p>在查询语句中表名的后面，添加 use index 来提供希望MySQL去参考的索引列表，就可以让MySQL不再考虑其他可用的索引。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create index idx_seller_name on tb_seller(name);</span><br></pre></td></tr></table></figure><p><img src="/img/sql/1556370971576.png" alt="1556370971576"> </p><h5 id="5-8-2-IGNORE-INDEX"><a href="#5-8-2-IGNORE-INDEX" class="headerlink" title="5.8.2 IGNORE INDEX"></a>5.8.2 IGNORE INDEX</h5><p>如果用户只是单纯的想让MySQL忽略一个或者多个索引，则可以使用 ignore index 作为 hint 。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">explain select * from tb_seller ignore index(idx_seller_name) where name = &#x27;小米科技&#x27;;</span><br></pre></td></tr></table></figure><p><img src="/img/sql/1556371004594.png" alt="1556371004594"> </p><h5 id="5-8-3-FORCE-INDEX"><a href="#5-8-3-FORCE-INDEX" class="headerlink" title="5.8.3 FORCE INDEX"></a>5.8.3 FORCE INDEX</h5><p>为强制MySQL使用一个特定的索引，可在查询中使用 force index 作为hint 。 </p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> index idx_seller_address <span class="keyword">on</span> tb_seller(address);</span><br></pre></td></tr></table></figure><p><img src="/img/sql/1556371355788.png" alt="1556371355788"> </p><h1 id="Mysql高级-day03"><a href="#Mysql高级-day03" class="headerlink" title="Mysql高级-day03"></a>Mysql高级-day03</h1><h3 id="1-应用优化"><a href="#1-应用优化" class="headerlink" title="1. 应用优化"></a>1. 应用优化</h3><p>前面章节，我们介绍了很多数据库的优化措施。但是在实际生产环境中，由于数据库本身的性能局限，就必须要对前台的应用进行一些优化，来降低数据库的访问压力。</p><h4 id="1-1-使用连接池"><a href="#1-1-使用连接池" class="headerlink" title="1.1 使用连接池"></a>1.1 使用连接池</h4><p>对于访问数据库来说，建立连接的代价是比较昂贵的，因为我们频繁的创建关闭连接，是比较耗费资源的，我们有必要建立 数据库连接池，以提高访问的性能。</p><h4 id="1-2-减少对MySQL的访问"><a href="#1-2-减少对MySQL的访问" class="headerlink" title="1.2 减少对MySQL的访问"></a>1.2 减少对MySQL的访问</h4><h5 id="1-2-1-避免对数据进行重复检索"><a href="#1-2-1-避免对数据进行重复检索" class="headerlink" title="1.2.1 避免对数据进行重复检索"></a>1.2.1 避免对数据进行重复检索</h5><p>在编写应用代码时，需要能够理清对数据库的访问逻辑。能够一次连接就获取到结果的，就不用两次连接，这样可以大大减少对数据库无用的重复请求。</p><p>比如 ，需要获取书籍的id 和name字段 ， 则查询如下： </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select id , name from tb_book;</span><br></pre></td></tr></table></figure><p>之后，在业务逻辑中有需要获取到书籍状态信息， 则查询如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select id , status from tb_book;</span><br></pre></td></tr></table></figure><p>这样，就需要向数据库提交两次请求，数据库就要做两次查询操作。其实完全可以用一条SQL语句得到想要的结果。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select id, name , status from tb_book;</span><br></pre></td></tr></table></figure><h5 id="1-2-2-增加cache层"><a href="#1-2-2-增加cache层" class="headerlink" title="1.2.2 增加cache层"></a>1.2.2 增加cache层</h5><p>在应用中，我们可以在应用中增加 缓存 层来达到减轻数据库负担的目的。缓存层有很多种，也有很多实现方式，只要能达到降低数据库的负担又能满足应用需求就可以。</p><p>因此可以部分数据从数据库中抽取出来放到应用端以文本方式存储， 或者使用框架(Mybatis, Hibernate)提供的一级缓存&#x2F;二级缓存，或者使用redis数据库来缓存数据 。</p><h4 id="1-3-负载均衡"><a href="#1-3-负载均衡" class="headerlink" title="1.3 负载均衡"></a>1.3 负载均衡</h4><p>负载均衡是应用中使用非常普遍的一种优化方法，它的机制就是利用某种均衡算法，将固定的负载量分布到不同的服务器上， 以此来降低单台服务器的负载，达到优化的效果。</p><h5 id="1-3-1-利用MySQL复制分流查询"><a href="#1-3-1-利用MySQL复制分流查询" class="headerlink" title="1.3.1 利用MySQL复制分流查询"></a>1.3.1 利用MySQL复制分流查询</h5><p>通过MySQL的主从复制，实现读写分离，使增删改操作走主节点，查询操作走从节点，从而可以降低单台服务器的读写压力。</p><p><img src="C:\Users\Megumi\AppData\Local\Temp\BNZ.625e9629137ef770/img/sql\1.jpg" alt="1"> </p><h5 id="1-3-2-采用分布式数据库架构"><a href="#1-3-2-采用分布式数据库架构" class="headerlink" title="1.3.2 采用分布式数据库架构"></a>1.3.2 采用分布式数据库架构</h5><p>分布式数据库架构适合大数据量、负载高的情况，它有良好的拓展性和高可用性。通过在多台服务器之间分布数据，可以实现在多台服务器之间的负载均衡，提高访问效率。</p><h3 id="2-Mysql中查询缓存优化"><a href="#2-Mysql中查询缓存优化" class="headerlink" title="2. Mysql中查询缓存优化"></a>2. Mysql中查询缓存优化</h3><h4 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h4><p>开启Mysql的查询缓存，当执行完全相同的SQL语句的时候，服务器就会直接从缓存中读取结果，当数据被修改，之前的缓存会失效，修改比较频繁的表不适合做查询缓存。</p><h4 id="2-2-操作流程"><a href="#2-2-操作流程" class="headerlink" title="2.2 操作流程"></a>2.2 操作流程</h4><p> <img src="C:\Users\Megumi\AppData\Local\Temp\BNZ.625e9629137ef770/img/sql\20180919131632347.png" alt="20180919131632347"> </p><ol><li>客户端发送一条查询给服务器；</li><li>服务器先会检查查询缓存，如果命中了缓存，则立即返回存储在缓存中的结果。否则进入下一阶段；</li><li>服务器端进行SQL解析、预处理，再由优化器生成对应的执行计划；</li><li>MySQL根据优化器生成的执行计划，调用存储引擎的API来执行查询；</li><li>将结果返回给客户端。</li></ol><h4 id="2-3-查询缓存配置"><a href="#2-3-查询缓存配置" class="headerlink" title="2.3 查询缓存配置"></a>2.3 查询缓存配置</h4><ol><li><p>查看当前的MySQL数据库是否支持查询缓存：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;have_query_cache&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Megumi\AppData\Local\Temp\BNZ.625e9629137ef770/img/sql\1555249929012.png" alt="1555249929012"> </p></li><li><p>查看当前MySQL是否开启了查询缓存 ：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;query_cache_type&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Megumi\AppData\Local\Temp\BNZ.625e9629137ef770/img/sql\1555250015377.png" alt="1555250015377"> </p></li><li><p>查看查询缓存的占用大小 ：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;query_cache_size&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Megumi\AppData\Local\Temp\BNZ.625e9629137ef770/img/sql\1555250142451.png" alt="1555250142451">  </p></li><li><p>查看查询缓存的状态变量：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;Qcache%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Megumi\AppData\Local\Temp\BNZ.625e9629137ef770/img/sql\1555250443958.png" alt="1555250443958"> </p><p>各个变量的含义如下：</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>Qcache_free_blocks</td><td>查询缓存中的可用内存块数</td></tr><tr><td>Qcache_free_memory</td><td>查询缓存的可用内存量</td></tr><tr><td>Qcache_hits</td><td>查询缓存命中数</td></tr><tr><td>Qcache_inserts</td><td>添加到查询缓存的查询数</td></tr><tr><td>Qcache_lowmen_prunes</td><td>由于内存不足而从查询缓存中删除的查询数</td></tr><tr><td>Qcache_not_cached</td><td>非缓存查询的数量（由于 query_cache_type 设置而无法缓存或未缓存）</td></tr><tr><td>Qcache_queries_in_cache</td><td>查询缓存中注册的查询数</td></tr><tr><td>Qcache_total_blocks</td><td>查询缓存中的块总数</td></tr></tbody></table></li></ol><h4 id="2-4-开启查询缓存"><a href="#2-4-开启查询缓存" class="headerlink" title="2.4 开启查询缓存"></a>2.4 开启查询缓存</h4><p>MySQL的查询缓存默认是关闭的，需要手动配置参数 query_cache_type ， 来开启查询缓存。query_cache_type 该参数的可取值有三个 ：</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>OFF 或 0</td><td>查询缓存功能关闭</td></tr><tr><td>ON 或 1</td><td>查询缓存功能打开，SELECT的结果符合缓存条件即会缓存，否则，不予缓存，显式指定 SQL_NO_CACHE，不予缓存</td></tr><tr><td>DEMAND 或 2</td><td>查询缓存功能按需进行，显式指定 SQL_CACHE 的SELECT语句才会缓存；其它均不予缓存</td></tr></tbody></table><p>在 &#x2F;usr&#x2F;my.cnf 配置中，增加以下配置 ： </p><p><img src="C:\Users\Megumi\AppData\Local\Temp\BNZ.625e9629137ef770/img/sql\1555251383805.png" alt="1555251383805"> </p><p>配置完毕之后，重启服务既可生效 ；</p><p>然后就可以在命令行执行SQL语句进行验证 ，执行一条比较耗时的SQL语句，然后再多执行几次，查看后面几次的执行时间；获取通过查看查询缓存的缓存命中数，来判定是否走查询缓存。</p><h4 id="2-5-查询缓存SELECT选项"><a href="#2-5-查询缓存SELECT选项" class="headerlink" title="2.5 查询缓存SELECT选项"></a>2.5 查询缓存SELECT选项</h4><p>可以在SELECT语句中指定两个与查询缓存相关的选项 ：</p><p>SQL_CACHE : 如果查询结果是可缓存的，并且 query_cache_type 系统变量的值为ON或 DEMAND ，则缓存查询结果 。</p><p>SQL_NO_CACHE : 服务器不使用查询缓存。它既不检查查询缓存，也不检查结果是否已缓存，也不缓存查询结果。</p><p>例子：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> SQL_CACHE id, name <span class="keyword">FROM</span> customer;</span><br><span class="line"><span class="keyword">SELECT</span> SQL_NO_CACHE id, name <span class="keyword">FROM</span> customer;</span><br></pre></td></tr></table></figure><p>​</p><h4 id="2-6-查询缓存失效的情况"><a href="#2-6-查询缓存失效的情况" class="headerlink" title="2.6 查询缓存失效的情况"></a>2.6 查询缓存失效的情况</h4><p>1） SQL 语句不一致的情况， 要想命中查询缓存，查询的SQL语句必须一致。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">SQL1 : <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> tb_item;</span><br><span class="line">SQL2 : <span class="keyword">Select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> tb_item;</span><br></pre></td></tr></table></figure><p>2） 当查询语句中有一些不确定的时，则不会缓存。如 ： now() , current_date() , curdate() , curtime() , rand() , uuid() , user() , database() 。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">SQL1 : <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_item <span class="keyword">where</span> updatetime <span class="operator">&lt;</span> now() limit <span class="number">1</span>;</span><br><span class="line">SQL2 : <span class="keyword">select</span> <span class="keyword">user</span>();</span><br><span class="line">SQL3 : <span class="keyword">select</span> database();</span><br></pre></td></tr></table></figure><p>3） 不使用任何表查询语句。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">&#x27;A&#x27;</span>;</span><br></pre></td></tr></table></figure><p>4）  查询 mysql， information_schema或  performance_schema 数据库中的表时，不会走查询缓存。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.engines;</span><br></pre></td></tr></table></figure><p>5） 在存储的函数，触发器或事件的主体内执行的查询。</p><p>6） 如果表更改，则使用该表的所有高速缓存查询都将变为无效并从高速缓存中删除。这包括使用<code>MERGE</code>映射到已更改表的表的查询。一个表可以被许多类型的语句，如被改变 INSERT， UPDATE， DELETE， TRUNCATE TABLE， ALTER TABLE， DROP TABLE，或 DROP DATABASE 。</p><h3 id="3-Mysql内存管理及优化"><a href="#3-Mysql内存管理及优化" class="headerlink" title="3. Mysql内存管理及优化"></a>3. Mysql内存管理及优化</h3><h4 id="3-1-内存优化原则"><a href="#3-1-内存优化原则" class="headerlink" title="3.1 内存优化原则"></a>3.1 内存优化原则</h4><p>1） 将尽量多的内存分配给MySQL做缓存，但要给操作系统和其他程序预留足够内存。</p><p>2） MyISAM 存储引擎的数据文件读取依赖于操作系统自身的IO缓存，因此，如果有MyISAM表，就要预留更多的内存给操作系统做IO缓存。</p><p>3） 排序区、连接区等缓存是分配给每个数据库会话（session）专用的，其默认值的设置要根据最大连接数合理分配，如果设置太大，不但浪费资源，而且在并发连接较高时会导致物理内存耗尽。</p><h4 id="3-2-MyISAM-内存优化"><a href="#3-2-MyISAM-内存优化" class="headerlink" title="3.2 MyISAM 内存优化"></a>3.2 MyISAM 内存优化</h4><p>myisam存储引擎使用 key_buffer 缓存索引块，加速myisam索引的读写速度。对于myisam表的数据块，mysql没有特别的缓存机制，完全依赖于操作系统的IO缓存。</p><h5 id="key-buffer-size"><a href="#key-buffer-size" class="headerlink" title="key_buffer_size"></a>key_buffer_size</h5><p>key_buffer_size决定MyISAM索引块缓存区的大小，直接影响到MyISAM表的存取效率。可以在MySQL参数文件中设置key_buffer_size的值，对于一般MyISAM数据库，建议至少将1&#x2F;4可用内存分配给key_buffer_size。</p><p>在&#x2F;usr&#x2F;my.cnf 中做如下配置：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">key_buffer_size=512M</span><br></pre></td></tr></table></figure><h5 id="read-buffer-size"><a href="#read-buffer-size" class="headerlink" title="read_buffer_size"></a>read_buffer_size</h5><p>如果需要经常顺序扫描myisam表，可以通过增大read_buffer_size的值来改善性能。但需要注意的是read_buffer_size是每个session独占的，如果默认值设置太大，就会造成内存浪费。</p><h5 id="read-rnd-buffer-size"><a href="#read-rnd-buffer-size" class="headerlink" title="read_rnd_buffer_size"></a>read_rnd_buffer_size</h5><p>对于需要做排序的myisam表的查询，如带有order by子句的sql，适当增加 read_rnd_buffer_size 的值，可以改善此类的sql性能。但需要注意的是 read_rnd_buffer_size 是每个session独占的，如果默认值设置太大，就会造成内存浪费。</p><h4 id="3-3-InnoDB-内存优化"><a href="#3-3-InnoDB-内存优化" class="headerlink" title="3.3 InnoDB 内存优化"></a>3.3 InnoDB 内存优化</h4><p>innodb用一块内存区做IO缓存池，该缓存池不仅用来缓存innodb的索引块，而且也用来缓存innodb的数据块。</p><h5 id="innodb-buffer-pool-size"><a href="#innodb-buffer-pool-size" class="headerlink" title="innodb_buffer_pool_size"></a>innodb_buffer_pool_size</h5><p>该变量决定了 innodb 存储引擎表数据和索引数据的最大缓存区大小。在保证操作系统及其他程序有足够内存可用的情况下，innodb_buffer_pool_size 的值越大，缓存命中率越高，访问InnoDB表需要的磁盘I&#x2F;O 就越少，性能也就越高。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">innodb_buffer_pool_size=512M</span><br></pre></td></tr></table></figure><h5 id="innodb-log-buffer-size"><a href="#innodb-log-buffer-size" class="headerlink" title="innodb_log_buffer_size"></a>innodb_log_buffer_size</h5><p>决定了innodb重做日志缓存的大小，对于可能产生大量更新记录的大事务，增加innodb_log_buffer_size的大小，可以避免innodb在事务提交前就执行不必要的日志写入磁盘操作。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">innodb_log_buffer_size=10M</span><br></pre></td></tr></table></figure><h3 id="4-Mysql并发参数调整"><a href="#4-Mysql并发参数调整" class="headerlink" title="4. Mysql并发参数调整"></a>4. Mysql并发参数调整</h3><p>从实现上来说，MySQL Server 是多线程结构，包括后台线程和客户服务线程。多线程可以有效利用服务器资源，提高数据库的并发性能。在Mysql中，控制并发连接和线程的主要参数包括 max_connections、back_log、thread_cache_size、table_open_cahce。</p><h4 id="4-1-max-connections"><a href="#4-1-max-connections" class="headerlink" title="4.1 max_connections"></a>4.1 max_connections</h4><p>采用max_connections 控制允许连接到MySQL数据库的最大数量，默认值是 151。如果状态变量 connection_errors_max_connections 不为零，并且一直增长，则说明不断有连接请求因数据库连接数已达到允许最大值而失败，这是可以考虑增大max_connections 的值。</p><p>Mysql 最大可支持的连接数，取决于很多因素，包括给定操作系统平台的线程库的质量、内存大小、每个连接的负荷、CPU的处理速度，期望的响应时间等。在Linux 平台下，性能好的服务器，支持 500-1000 个连接不是难事，需要根据服务器性能进行评估设定。</p><h4 id="4-2-back-log"><a href="#4-2-back-log" class="headerlink" title="4.2 back_log"></a>4.2 back_log</h4><p>back_log 参数控制MySQL监听TCP端口时设置的积压请求栈大小。如果MySql的连接数达到max_connections时，新来的请求将会被存在堆栈中，以等待某一连接释放资源，该堆栈的数量即back_log，如果等待连接的数量超过back_log，将不被授予连接资源，将会报错。5.6.6 版本之前默认值为 50 ， 之后的版本默认为 50 + （max_connections &#x2F; 5）， 但最大不超过900。</p><p>如果需要数据库在较短的时间内处理大量连接请求， 可以考虑适当增大back_log 的值。</p><h4 id="4-3-table-open-cache"><a href="#4-3-table-open-cache" class="headerlink" title="4.3 table_open_cache"></a>4.3 table_open_cache</h4><p>该参数用来控制所有SQL语句执行线程可打开表缓存的数量， 而在执行SQL语句时，每一个SQL执行线程至少要打开 1 个表缓存。该参数的值应该根据设置的最大连接数 max_connections 以及每个连接执行关联查询中涉及的表的最大数量来设定 ：</p><p>​max_connections x N ；</p><h4 id="4-4-thread-cache-size"><a href="#4-4-thread-cache-size" class="headerlink" title="4.4 thread_cache_size"></a>4.4 thread_cache_size</h4><p>为了加快连接数据库的速度，MySQL 会缓存一定数量的客户服务线程以备重用，通过参数 thread_cache_size 可控制 MySQL 缓存客户服务线程的数量。</p><h4 id="4-5-innodb-lock-wait-timeout"><a href="#4-5-innodb-lock-wait-timeout" class="headerlink" title="4.5 innodb_lock_wait_timeout"></a>4.5 innodb_lock_wait_timeout</h4><p>该参数是用来设置InnoDB 事务等待行锁的时间，默认值是50ms ， 可以根据需要进行动态设置。对于需要快速反馈的业务系统来说，可以将行锁的等待时间调小，以避免事务长时间挂起； 对于后台运行的批量处理程序来说， 可以将行锁的等待时间调大， 以避免发生大的回滚操作。</p><h3 id="5-Mysql锁问题"><a href="#5-Mysql锁问题" class="headerlink" title="5. Mysql锁问题"></a>5. Mysql锁问题</h3><h4 id="5-1-锁概述"><a href="#5-1-锁概述" class="headerlink" title="5.1 锁概述"></a>5.1 锁概述</h4><p>锁是计算机协调多个进程或线程并发访问某一资源的机制（避免争抢）。</p><p>在数据库中，除传统的计算资源（如 CPU、RAM、I&#x2F;O 等）的争用以外，数据也是一种供许多用户共享的资源。如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。从这个角度来说，锁对数据库而言显得尤其重要，也更加复杂。</p><h4 id="5-2-锁分类"><a href="#5-2-锁分类" class="headerlink" title="5.2 锁分类"></a>5.2 锁分类</h4><p>从对数据操作的粒度分 ： </p><p>1） 表锁：操作时，会锁定整个表。</p><p>2） 行锁：操作时，会锁定当前操作行。</p><p>从对数据操作的类型分：</p><p>1） 读锁（共享锁）：针对同一份数据，多个读操作可以同时进行而不会互相影响。</p><p>2） 写锁（排它锁）：当前操作没有完成之前，它会阻断其他写锁和读锁。</p><h4 id="5-3-Mysql-锁"><a href="#5-3-Mysql-锁" class="headerlink" title="5.3 Mysql 锁"></a>5.3 Mysql 锁</h4><p>相对其他数据库而言，MySQL的锁机制比较简单，其最显著的特点是不同的存储引擎支持不同的锁机制。下表中罗列出了各存储引擎对锁的支持情况：</p><table><thead><tr><th>存储引擎</th><th>表级锁</th><th>行级锁</th><th>页面锁</th></tr></thead><tbody><tr><td>MyISAM</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>InnoDB</td><td>支持</td><td>支持</td><td>不支持</td></tr><tr><td>MEMORY</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>BDB</td><td>支持</td><td>不支持</td><td>支持</td></tr></tbody></table><p>MySQL这3种锁的特性可大致归纳如下 ：</p><table><thead><tr><th>锁类型</th><th>特点</th></tr></thead><tbody><tr><td>表级锁</td><td>偏向MyISAM 存储引擎，开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高,并发度最低。</td></tr><tr><td>行级锁</td><td>偏向InnoDB 存储引擎，开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低,并发度也最高。</td></tr><tr><td>页面锁</td><td>开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。</td></tr></tbody></table><p>从上述特点可见，很难笼统地说哪种锁更好，只能就具体应用的特点来说哪种锁更合适！仅从锁的角度来说：表级锁更适合于以查询为主，只有少量按索引条件更新数据的应用，如Web 应用；而行级锁则更适合于有大量按索引条件并发更新少量不同数据，同时又有并查询的应用，如一些在线事务处理（OLTP）系统。</p><h4 id="5-2-MyISAM-表锁"><a href="#5-2-MyISAM-表锁" class="headerlink" title="5.2 MyISAM 表锁"></a>5.2 MyISAM 表锁</h4><p>MyISAM 存储引擎只支持表锁，这也是MySQL开始几个版本中唯一支持的锁类型。</p><h5 id="5-2-1-如何加表锁"><a href="#5-2-1-如何加表锁" class="headerlink" title="5.2.1 如何加表锁"></a>5.2.1 如何加表锁</h5><p>MyISAM 在执行查询语句（SELECT）前，会自动给涉及的所有表加读锁，在执行更新操作（UPDATE、DELETE、INSERT 等）前，会自动给涉及的表加写锁，这个过程并不需要用户干预，因此，用户一般不需要直接用 LOCK TABLE 命令给 MyISAM 表显式加锁。</p><p>显示加表锁语法：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">加读锁 ： lock <span class="keyword">table</span> table_name read;</span><br><span class="line"></span><br><span class="line">加写锁 ： lock <span class="keyword">table</span> table_name write；</span><br></pre></td></tr></table></figure><h5 id="5-2-2-读锁案例"><a href="#5-2-2-读锁案例" class="headerlink" title="5.2.2 读锁案例"></a>5.2.2 读锁案例</h5><p>准备环境</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database demo_03 <span class="keyword">default</span> charset<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line">use demo_03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_book` (</span><br><span class="line">  `id` <span class="type">INT</span>(<span class="number">11</span>) auto_increment,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `publish_time` <span class="type">DATE</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `status` <span class="type">CHAR</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>myisam <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_book (id, name, publish_time, status) <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;java编程思想&#x27;</span>,<span class="string">&#x27;2088-08-01&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_book (id, name, publish_time, status) <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;solr编程思想&#x27;</span>,<span class="string">&#x27;2088-08-08&#x27;</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_user` (</span><br><span class="line">  `id` <span class="type">INT</span>(<span class="number">11</span>) auto_increment,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>myisam <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_user (id, name) <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;令狐冲&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_user (id, name) <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;田伯光&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>客户端 一 ：</p><p>1）获得tb_book 表的读锁 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lock table tb_book read;</span><br></pre></td></tr></table></figure><p>2） 执行查询操作</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from tb_book;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Megumi\AppData\Local\Temp\BNZ.625e9629137ef770/img/sql\1553906896564.png" alt="1553906896564"> </p><p>可以正常执行 ， 查询出数据。</p><p>客户端 二 ：</p><p>3） 执行查询操作</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from tb_book;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Megumi\AppData\Local\Temp\BNZ.625e9629137ef770/img/sql\1553907044500.png" alt="1553907044500"> </p><p>客户端 一 ：</p><p>4）查询未锁定的表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select name from tb_seller;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Megumi\AppData\Local\Temp\BNZ.625e9629137ef770/img/sql\1553908913515.png" alt="1553908913515"> </p><p>客户端 二 ：</p><p>5）查询未锁定的表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select name from tb_seller;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Megumi\AppData\Local\Temp\BNZ.625e9629137ef770/img/sql\1553908973840.png" alt="1553908973840"> </p><p>可以正常查询出未锁定的表；</p><p>客户端 一 ：</p><p>6） 执行插入操作 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into tb_book values(null,&#x27;Mysql高级&#x27;,&#x27;2088-01-01&#x27;,&#x27;1&#x27;);</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Megumi\AppData\Local\Temp\BNZ.625e9629137ef770/img/sql\1553907198462.png" alt="1553907198462"> </p><p>执行插入， 直接报错 ， 由于当前tb_book 获得的是 读锁， 不能执行更新操作。</p><p>客户端 二 ：</p><p>7） 执行插入操作 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into tb_book values(null,&#x27;Mysql高级&#x27;,&#x27;2088-01-01&#x27;,&#x27;1&#x27;);</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Megumi\AppData\Local\Temp\BNZ.625e9629137ef770/img/sql\1553907403957.png" alt="1553907403957"> </p><p>当在客户端一中释放锁指令 unlock tables  后 ， 客户端二中的 inesrt 语句 ， 立即执行 ；</p><h5 id="5-2-3-写锁案例"><a href="#5-2-3-写锁案例" class="headerlink" title="5.2.3 写锁案例"></a>5.2.3 写锁案例</h5><p>客户端 一 :</p><p>1）获得tb_book 表的写锁 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lock table tb_book write ;</span><br></pre></td></tr></table></figure><p>2）执行查询操作</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from tb_book ;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Megumi\AppData\Local\Temp\BNZ.625e9629137ef770/img/sql\1553907849829.png" alt="1553907849829"> </p><p>查询操作执行成功；</p><p>3）执行更新操作</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update tb_book set name = &#x27;java编程思想（第二版）&#x27; where id = 1;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Megumi\AppData\Local\Temp\BNZ.625e9629137ef770/img/sql\1553907875221.png" alt="1553907875221"> </p><p>更新操作执行成功 ；</p><p>客户端 二 :</p><p>4）执行查询操作</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from tb_book ;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Megumi\AppData\Local\Temp\BNZ.625e9629137ef770/img/sql\1553908019755.png" alt="1553908019755"> </p><p>当在客户端一中释放锁指令 unlock tables  后 ， 客户端二中的 select 语句 ， 立即执行 ；</p><p><img src="C:\Users\Megumi\AppData\Local\Temp\BNZ.625e9629137ef770/img/sql\1553908131373.png" alt="1553908131373"> </p><h5 id="5-2-4-结论"><a href="#5-2-4-结论" class="headerlink" title="5.2.4 结论"></a>5.2.4 结论</h5><p>锁模式的相互兼容性如表中所示：</p><p><img src="C:\教学资料\课程营销\Mysql高级\课程资料\day-03\文档/img/sql\1553905621992.png" alt="1553905621992"> </p><p>由上表可见： </p><p>​1） 对MyISAM 表的读操作，不会阻塞其他用户对同一表的读请求，但会阻塞对同一表的写请求；</p><p>​2） 对MyISAM 表的写操作，则会阻塞其他用户对同一表的读和写操作；</p><p>​简而言之，就是读锁会阻塞写，但是不会阻塞读。而写锁，则既会阻塞读，又会阻塞写。</p><p>此外，MyISAM 的读写锁调度是写优先，这也是MyISAM不适合做写为主的表的存储引擎的原因。因为写锁后，其他线程不能做任何操作，大量的更新会使查询很难得到锁，从而造成永远阻塞。</p><h5 id="5-2-5-查看锁的争用情况"><a href="#5-2-5-查看锁的争用情况" class="headerlink" title="5.2.5 查看锁的争用情况"></a>5.2.5 查看锁的争用情况</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show open tables；</span><br></pre></td></tr></table></figure><p><img src="C:\教学资料\课程营销\Mysql高级\课程资料\day-03\文档/img/sql\1556443073322.png" alt="1556443073322"> </p><p>In_user : 表当前被查询使用的次数。如果该数为零，则表是打开的，但是当前没有被使用。</p><p>Name_locked：表名称是否被锁定。名称锁定用于取消表或对表进行重命名等操作。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show status like &#x27;Table_locks%&#x27;;</span><br></pre></td></tr></table></figure><p><img src="C:\教学资料\课程营销\Mysql高级\课程资料\day-03\文档/img/sql\1556443170082.png" alt="1556443170082"> </p><p>Table_locks_immediate ： 指的是能够立即获得表级锁的次数，每立即获取锁，值加1。</p><p>Table_locks_waited ： 指的是不能立即获取表级锁而需要等待的次数，每等待一次，该值加1，此值高说明存在着较为严重的表级锁争用情况。</p><h4 id="5-3-InnoDB-行锁"><a href="#5-3-InnoDB-行锁" class="headerlink" title="5.3 InnoDB 行锁"></a>5.3 InnoDB 行锁</h4><h5 id="5-3-1-行锁介绍"><a href="#5-3-1-行锁介绍" class="headerlink" title="5.3.1 行锁介绍"></a>5.3.1 行锁介绍</h5><p>行锁特点 ：偏向InnoDB 存储引擎，开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低,并发度也最高。</p><p>InnoDB 与 MyISAM 的最大不同有两点：一是支持事务；二是 采用了行级锁。</p><h5 id="5-3-2-背景知识"><a href="#5-3-2-背景知识" class="headerlink" title="5.3.2 背景知识"></a>5.3.2 背景知识</h5><p><strong>事务及其ACID属性</strong></p><p>事务是由一组SQL语句组成的逻辑处理单元。</p><p>事务具有以下4个特性，简称为事务ACID属性。</p><table><thead><tr><th>ACID属性</th><th>含义</th></tr></thead><tbody><tr><td>原子性（Atomicity）</td><td>事务是一个原子操作单元，其对数据的修改，要么全部成功，要么全部失败。</td></tr><tr><td>一致性（Consistent）</td><td>在事务开始和完成时，数据都必须保持一致状态。</td></tr><tr><td>隔离性（Isolation）</td><td>数据库系统提供一定的隔离机制，保证事务在不受外部并发操作影响的 “独立” 环境下运行。</td></tr><tr><td>持久性（Durable）</td><td>事务完成之后，对于数据的修改是永久的。</td></tr></tbody></table><p><strong>并发事务处理带来的问题</strong></p><table><thead><tr><th>问题</th><th>含义</th></tr></thead><tbody><tr><td>丢失更新（Lost Update）</td><td>当两个或多个事务选择同一行，最初的事务修改的值，会被后面的事务修改的值覆盖。</td></tr><tr><td>脏读（Dirty Reads）</td><td>当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中，这时，另外一个事务也访问这个数据，然后使用了这个数据。</td></tr><tr><td>不可重复读（Non-Repeatable Reads）</td><td>一个事务在读取某些数据后的某个时间，再次读取以前读过的数据，却发现和以前读出的数据不一致。</td></tr><tr><td>幻读（Phantom Reads）</td><td>一个事务按照相同的查询条件重新读取以前查询过的数据，却发现其他事务插入了满足其查询条件的新数据。</td></tr></tbody></table><p><strong>事务隔离级别</strong></p><p>为了解决上述提到的事务并发问题，数据库提供一定的事务隔离机制来解决这个问题。数据库的事务隔离越严格，并发副作用越小，但付出的代价也就越大，因为事务隔离实质上就是使用事务在一定程度上“串行化” 进行，这显然与“并发” 是矛盾的。 </p><p>数据库的隔离级别有4个，由低到高依次为Read uncommitted、Read committed、Repeatable read、Serializable，这四个级别可以逐个解决脏写、脏读、不可重复读、幻读这几类问题。</p><table><thead><tr><th>隔离级别</th><th>丢失更新</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>Read uncommitted</td><td>×</td><td>√</td><td>√</td><td>√</td></tr><tr><td>Read committed</td><td>×</td><td>×</td><td>√</td><td>√</td></tr><tr><td>Repeatable read（默认）</td><td>×</td><td>×</td><td>×</td><td>√</td></tr><tr><td>Serializable</td><td>×</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><p>备注 ： √  代表可能出现 ， × 代表不会出现 。</p><p>Mysql 的数据库的默认隔离级别为 Repeatable read ， 查看方式：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show variables like &#x27;tx_isolation&#x27;;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Megumi\AppData\Local\Temp\BNZ.625e9629137ef770/img/sql\1554331600009.png" alt="1554331600009">  </p><h5 id="5-3-3-InnoDB-的行锁模式"><a href="#5-3-3-InnoDB-的行锁模式" class="headerlink" title="5.3.3 InnoDB 的行锁模式"></a>5.3.3 InnoDB 的行锁模式</h5><p>InnoDB  实现了以下两种类型的行锁。</p><ul><li>共享锁（S）：又称为读锁，简称S锁，共享锁就是多个事务对于同一数据可以共享一把锁，都能访问到数据，但是只能读不能修改。</li><li>排他锁（X）：又称为写锁，简称X锁，排他锁就是不能与其他锁并存，如一个事务获取了一个数据行的排他锁，其他事务就不能再获取该行的其他锁，包括共享锁和排他锁，但是获取排他锁的事务是可以对数据就行读取和修改。</li></ul><p>对于UPDATE、DELETE和INSERT语句，InnoDB会自动给涉及数据集加排他锁（X)；</p><p>对于普通SELECT语句，InnoDB不会加任何锁；</p><p>可以通过以下语句显示给记录集加共享锁或排他锁 。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">共享锁（S）：SELECT * FROM table_name WHERE ... LOCK IN SHARE MODE</span><br><span class="line"></span><br><span class="line">排他锁（X) ：SELECT * FROM table_name WHERE ... FOR UPDATE</span><br></pre></td></tr></table></figure><h5 id="5-3-4-案例准备工作"><a href="#5-3-4-案例准备工作" class="headerlink" title="5.3.4 案例准备工作"></a>5.3.4 案例准备工作</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test_innodb_lock(</span><br><span class="line">id <span class="type">int</span>(<span class="number">11</span>),</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">16</span>),</span><br><span class="line">sex <span class="type">varchar</span>(<span class="number">1</span>)</span><br><span class="line">)engine <span class="operator">=</span> innodb <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_innodb_lock <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;100&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_innodb_lock <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_innodb_lock <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;400&#x27;</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_innodb_lock <span class="keyword">values</span>(<span class="number">5</span>,<span class="string">&#x27;500&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_innodb_lock <span class="keyword">values</span>(<span class="number">6</span>,<span class="string">&#x27;600&#x27;</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_innodb_lock <span class="keyword">values</span>(<span class="number">7</span>,<span class="string">&#x27;700&#x27;</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_innodb_lock <span class="keyword">values</span>(<span class="number">8</span>,<span class="string">&#x27;800&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_innodb_lock <span class="keyword">values</span>(<span class="number">9</span>,<span class="string">&#x27;900&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_innodb_lock <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;200&#x27;</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> index idx_test_innodb_lock_id <span class="keyword">on</span> test_innodb_lock(id);</span><br><span class="line"><span class="keyword">create</span> index idx_test_innodb_lock_name <span class="keyword">on</span> test_innodb_lock(name);</span><br></pre></td></tr></table></figure><h5 id="5-3-5-行锁基本演示"><a href="#5-3-5-行锁基本演示" class="headerlink" title="5.3.5 行锁基本演示"></a>5.3.5 行锁基本演示</h5><table><thead><tr><th>Session-1</th><th>Session-2</th></tr></thead><tbody><tr><td><img src="/img/sql/1554354615030.png" alt="1554354615030">      关闭自动提交功能</td><td><img src="/img/sql/1554354601867.png" alt="1554354601867">  关闭自动提交功能</td></tr><tr><td><img src="/img/sql/1554354713628.png" alt="1554354713628"> 可以正常的查询出全部的数据</td><td><img src="/img/sql/1554354717336.png" alt="1554354717336"> 可以正常的查询出全部的数据</td></tr><tr><td><img src="/img/sql/1554354830589.png" alt="1554354830589">查询id 为3的数据 ；</td><td><img src="/img/sql/1554354832708.png" alt="1554354832708">获取id为3的数据 ；</td></tr><tr><td><img src="/img/sql/1554382789984.png" alt="1554382789984"> 更新id为3的数据，但是不提交；</td><td><img src="/img/sql/1554382905352.png" alt="1554382905352"> 更新id为3 的数据， 出于等待状态</td></tr><tr><td><img src="/img/sql/1554382977653.png" alt="1554382977653"> 通过commit， 提交事务</td><td><img src="/img/sql/1554383044542.png" alt="1554383044542"> 解除阻塞，更新正常进行</td></tr><tr><td>以上， 操作的都是同一行的数据，接下来，演示不同行的数据 ：</td><td></td></tr><tr><td><img src="/img/sql/1554385220580.png" alt="1554385220580"> 更新id为3数据，正常的获取到行锁 ， 执行更新 ；</td><td><img src="/img/sql/1554385236768.png" alt="1554385236768"> 由于与Session-1 操作不是同一行，获取当前行锁，执行更新；</td></tr></tbody></table><h5 id="5-3-6-无索引行锁升级为表锁"><a href="#5-3-6-无索引行锁升级为表锁" class="headerlink" title="5.3.6 无索引行锁升级为表锁"></a>5.3.6 无索引行锁升级为表锁</h5><p>如果不通过索引条件检索数据，那么InnoDB将对表中的所有记录加锁，实际效果跟表锁一样。</p><p>查看当前表的索引 ： show  index  from test_innodb_lock ;</p><p><img src="C:\Users\Megumi\AppData\Local\Temp\BNZ.625e9629137ef770/img/sql\1554385956215.png" alt="1554385956215"> </p><table><thead><tr><th>Session-1</th><th>Session-2</th></tr></thead><tbody><tr><td>关闭事务的自动提交<img src="/img/sql/1554386287454.png" alt="1554386287454"></td><td>关闭事务的自动提交<img src="/img/sql/1554386312524.png" alt="1554386312524"></td></tr><tr><td>执行更新语句 ：<img src="/img/sql/1554386654793.png" alt="1554386654793"></td><td>执行更新语句， 但处于阻塞状态：<img src="/img/sql/1554386685610.png" alt="1554386685610"></td></tr><tr><td>提交事务：<img src="/img/sql/1554386721653.png" alt="1554386721653"></td><td>解除阻塞，执行更新成功 ：<img src="/img/sql/1554386750004.png" alt="1554386750004"></td></tr><tr><td></td><td>执行提交操作 ：<img src="/img/sql/1554386804807.png" alt="1554386804807"></td></tr></tbody></table><p>由于 执行更新时 ， name字段本来为varchar类型， 我们是作为数组类型使用，存在类型转换，索引失效，最终行锁变为表锁 ；</p><h5 id="5-3-7-间隙锁危害"><a href="#5-3-7-间隙锁危害" class="headerlink" title="5.3.7 间隙锁危害"></a>5.3.7 间隙锁危害</h5><p>当我们用范围条件，而不是使用相等条件检索数据，并请求共享或排他锁时，InnoDB会给符合条件的已有数据进行加锁； 对于键值在条件范围内但并不存在的记录，叫做 “间隙（GAP）” ， InnoDB也会对这个 “间隙” 加锁，这种锁机制就是所谓的 间隙锁（Next-Key锁） 。</p><p>示例 ： </p><table><thead><tr><th>Session-1</th><th>Session-2</th></tr></thead><tbody><tr><td>关闭事务自动提交 <img src="/img/sql/1554387987130.png" alt="1554387987130"></td><td>关闭事务自动提交<img src="/img/sql/1554387994533.png" alt="1554387994533"></td></tr><tr><td>根据id范围更新数据<img src="/img/sql/1554388492478.png" alt="1554388492478"></td><td></td></tr><tr><td></td><td>插入id为2的记录， 出于阻塞状态<img src="/img/sql/1554388515936.png" alt="1554388515936"></td></tr><tr><td>提交事务 ；<img src="/img/sql/1554388149305.png" alt="1554388149305"></td><td></td></tr><tr><td></td><td>解除阻塞 ， 执行插入操作 ：<img src="/img/sql/1554388548562.png" alt="1554388548562"></td></tr><tr><td></td><td>提交事务 ：</td></tr></tbody></table><h5 id="5-3-8-InnoDB-行锁争用情况"><a href="#5-3-8-InnoDB-行锁争用情况" class="headerlink" title="5.3.8 InnoDB 行锁争用情况"></a>5.3.8 InnoDB 行锁争用情况</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span>  status <span class="keyword">like</span> <span class="string">&#x27;innodb_row_lock%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Megumi\AppData\Local\Temp\BNZ.625e9629137ef770/img/sql\1556455943670.png" alt="1556455943670"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Innodb_row_lock_current_waits: 当前正在等待锁定的数量</span><br><span class="line"></span><br><span class="line">Innodb_row_lock_time: 从系统启动到现在锁定总时间长度</span><br><span class="line"></span><br><span class="line">Innodb_row_lock_time_avg:每次等待所花平均时长</span><br><span class="line"></span><br><span class="line">Innodb_row_lock_time_max:从系统启动到现在等待最长的一次所花的时间</span><br><span class="line"></span><br><span class="line">Innodb_row_lock_waits: 系统启动后到现在总共等待的次数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">当等待的次数很高，而且每次等待的时长也不小的时候，我们就需要分析系统中为什么会有如此多的等待，然后根据分析结果着手制定优化计划。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="5-3-9-总结"><a href="#5-3-9-总结" class="headerlink" title="5.3.9 总结"></a>5.3.9 总结</h5><p>InnoDB存储引擎由于实现了行级锁定，虽然在锁定机制的实现方面带来了性能损耗可能比表锁会更高一些，但是在整体并发处理能力方面要远远由于MyISAM的表锁的。当系统并发量较高的时候，InnoDB的整体性能和MyISAM相比就会有比较明显的优势。</p><p>但是，InnoDB的行级锁同样也有其脆弱的一面，当我们使用不当的时候，可能会让InnoDB的整体性能表现不仅不能比MyISAM高，甚至可能会更差。</p><p>优化建议：</p><ul><li>尽可能让所有数据检索都能通过索引来完成，避免无索引行锁升级为表锁。</li><li>合理设计索引，尽量缩小锁的范围</li><li>尽可能减少索引条件，及索引范围，避免间隙锁</li><li>尽量控制事务大小，减少锁定资源量和时间长度</li><li>尽可使用低级别事务隔离（但是需要业务层面满足需求）</li></ul><h3 id="6-常用SQL技巧"><a href="#6-常用SQL技巧" class="headerlink" title="6. 常用SQL技巧"></a>6. 常用SQL技巧</h3><h4 id="6-1-SQL执行顺序"><a href="#6-1-SQL执行顺序" class="headerlink" title="6.1 SQL执行顺序"></a>6.1 SQL执行顺序</h4><p>编写顺序</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span></span><br><span class="line"><span class="operator">&lt;</span><span class="keyword">select</span> list<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line"><span class="operator">&lt;</span>left_table<span class="operator">&gt;</span> <span class="operator">&lt;</span>join_type<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">JOIN</span></span><br><span class="line"><span class="operator">&lt;</span>right_table<span class="operator">&gt;</span> <span class="keyword">ON</span> <span class="operator">&lt;</span>join_condition<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line"><span class="operator">&lt;</span>where_condition<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line"><span class="operator">&lt;</span>group_by_list<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line"><span class="operator">&lt;</span>having_condition<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line"><span class="operator">&lt;</span>order_by_condition<span class="operator">&gt;</span></span><br><span class="line">LIMIT</span><br><span class="line"><span class="operator">&lt;</span>limit_params<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>执行顺序</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span><span class="operator">&lt;</span>left_table<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ON</span> <span class="operator">&lt;</span>join_condition<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&lt;</span>join_type<span class="operator">&gt;</span><span class="keyword">JOIN</span><span class="operator">&lt;</span>right_table<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WHERE</span><span class="operator">&lt;</span>where_condition<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>group_by_list<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">HAVING</span><span class="operator">&lt;</span>having_condition<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span><span class="operator">&lt;</span><span class="keyword">select</span> list<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span><span class="operator">&lt;</span>order_by_condition<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line">LIMIT<span class="operator">&lt;</span>limit_params<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6-2-正则表达式使用"><a href="#6-2-正则表达式使用" class="headerlink" title="6.2 正则表达式使用"></a>6.2 正则表达式使用</h4><p>正则表达式（Regular Expression）是指一个用来描述或者匹配一系列符合某个句法规则的字符串的单个字符串。</p><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>^</td><td>在字符串开始处进行匹配</td></tr><tr><td>$</td><td>在字符串末尾处进行匹配</td></tr><tr><td>.</td><td>匹配任意单个字符, 包括换行符</td></tr><tr><td>[…]</td><td>匹配出括号内的任意字符</td></tr><tr><td>[^…]</td><td>匹配不出括号内的任意字符</td></tr><tr><td>a*</td><td>匹配零个或者多个a(包括空串)</td></tr><tr><td>a+</td><td>匹配一个或者多个a(不包括空串)</td></tr><tr><td>a?</td><td>匹配零个或者一个a</td></tr><tr><td>a1|a2</td><td>匹配a1或a2</td></tr><tr><td>a(m)</td><td>匹配m个a</td></tr><tr><td>a(m,)</td><td>至少匹配m个a</td></tr><tr><td>a(m,n)</td><td>匹配m个a 到 n个a</td></tr><tr><td>a(,n)</td><td>匹配0到n个a</td></tr><tr><td>(…)</td><td>将模式元素组成单一元素</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from emp where name regexp &#x27;^T&#x27;;</span><br><span class="line"></span><br><span class="line">select * from emp where name regexp &#x27;2$&#x27;;</span><br><span class="line"></span><br><span class="line">select * from emp where name regexp &#x27;[uvw]&#x27;;</span><br></pre></td></tr></table></figure><h4 id="6-3-MySQL-常用函数"><a href="#6-3-MySQL-常用函数" class="headerlink" title="6.3 MySQL 常用函数"></a>6.3 MySQL 常用函数</h4><p>数字函数</p><table><thead><tr><th>函数名称</th><th>作 用</th></tr></thead><tbody><tr><td>ABS</td><td>求绝对值</td></tr><tr><td>SQRT</td><td>求二次方根</td></tr><tr><td>MOD</td><td>求余数</td></tr><tr><td>CEIL 和 CEILING</td><td>两个函数功能相同，都是返回不小于参数的最小整数，即向上取整</td></tr><tr><td>FLOOR</td><td>向下取整，返回值转化为一个BIGINT</td></tr><tr><td>RAND</td><td>生成一个0~1之间的随机数，传入整数参数是，用来产生重复序列</td></tr><tr><td>ROUND</td><td>对所传参数进行四舍五入</td></tr><tr><td>SIGN</td><td>返回参数的符号</td></tr><tr><td>POW 和 POWER</td><td>两个函数的功能相同，都是所传参数的次方的结果值</td></tr><tr><td>SIN</td><td>求正弦值</td></tr><tr><td>ASIN</td><td>求反正弦值，与函数 SIN 互为反函数</td></tr><tr><td>COS</td><td>求余弦值</td></tr><tr><td>ACOS</td><td>求反余弦值，与函数 COS 互为反函数</td></tr><tr><td>TAN</td><td>求正切值</td></tr><tr><td>ATAN</td><td>求反正切值，与函数 TAN 互为反函数</td></tr><tr><td>COT</td><td>求余切值</td></tr></tbody></table><p>字符串函数</p><table><thead><tr><th>函数名称</th><th>作 用</th></tr></thead><tbody><tr><td>LENGTH</td><td>计算字符串长度函数，返回字符串的字节长度</td></tr><tr><td>CONCAT</td><td>合并字符串函数，返回结果为连接参数产生的字符串，参数可以使一个或多个</td></tr><tr><td>INSERT</td><td>替换字符串函数</td></tr><tr><td>LOWER</td><td>将字符串中的字母转换为小写</td></tr><tr><td>UPPER</td><td>将字符串中的字母转换为大写</td></tr><tr><td>LEFT</td><td>从左侧字截取符串，返回字符串左边的若干个字符</td></tr><tr><td>RIGHT</td><td>从右侧字截取符串，返回字符串右边的若干个字符</td></tr><tr><td>TRIM</td><td>删除字符串左右两侧的空格</td></tr><tr><td>REPLACE</td><td>字符串替换函数，返回替换后的新字符串</td></tr><tr><td>SUBSTRING</td><td>截取字符串，返回从指定位置开始的指定长度的字符换</td></tr><tr><td>REVERSE</td><td>字符串反转（逆序）函数，返回与原始字符串顺序相反的字符串</td></tr></tbody></table><p>日期函数</p><table><thead><tr><th>函数名称</th><th>作 用</th></tr></thead><tbody><tr><td>CURDATE 和 CURRENT_DATE</td><td>两个函数作用相同，返回当前系统的日期值</td></tr><tr><td>CURTIME 和 CURRENT_TIME</td><td>两个函数作用相同，返回当前系统的时间值</td></tr><tr><td>NOW 和  SYSDATE</td><td>两个函数作用相同，返回当前系统的日期和时间值</td></tr><tr><td>MONTH</td><td>获取指定日期中的月份</td></tr><tr><td>MONTHNAME</td><td>获取指定日期中的月份英文名称</td></tr><tr><td>DAYNAME</td><td>获取指定曰期对应的星期几的英文名称</td></tr><tr><td>DAYOFWEEK</td><td>获取指定日期对应的一周的索引位置值</td></tr><tr><td>WEEK</td><td>获取指定日期是一年中的第几周，返回值的范围是否为 0〜52 或 1〜53</td></tr><tr><td>DAYOFYEAR</td><td>获取指定曰期是一年中的第几天，返回值范围是1~366</td></tr><tr><td>DAYOFMONTH</td><td>获取指定日期是一个月中是第几天，返回值范围是1~31</td></tr><tr><td>YEAR</td><td>获取年份，返回值范围是 1970〜2069</td></tr><tr><td>TIME_TO_SEC</td><td>将时间参数转换为秒数</td></tr><tr><td>SEC_TO_TIME</td><td>将秒数转换为时间，与TIME_TO_SEC 互为反函数</td></tr><tr><td>DATE_ADD 和 ADDDATE</td><td>两个函数功能相同，都是向日期添加指定的时间间隔</td></tr><tr><td>DATE_SUB 和 SUBDATE</td><td>两个函数功能相同，都是向日期减去指定的时间间隔</td></tr><tr><td>ADDTIME</td><td>时间加法运算，在原始时间上添加指定的时间</td></tr><tr><td>SUBTIME</td><td>时间减法运算，在原始时间上减去指定的时间</td></tr><tr><td>DATEDIFF</td><td>获取两个日期之间间隔，返回参数 1 减去参数 2 的值</td></tr><tr><td>DATE_FORMAT</td><td>格式化指定的日期，根据参数返回指定格式的值</td></tr><tr><td>WEEKDAY</td><td>获取指定日期在一周内的对应的工作日索引</td></tr></tbody></table><p>聚合函数</p><table><thead><tr><th>函数名称</th><th>作用</th></tr></thead><tbody><tr><td>MAX</td><td>查询指定列的最大值</td></tr><tr><td>MIN</td><td>查询指定列的最小值</td></tr><tr><td>COUNT</td><td>统计查询结果的行数</td></tr><tr><td>SUM</td><td>求和，返回指定列的总和</td></tr><tr><td>AVG</td><td>求平均值，返回指定列数据的平均值</td></tr></tbody></table><h1 id="Mysql高级-day04"><a href="#Mysql高级-day04" class="headerlink" title="Mysql高级-day04"></a>Mysql高级-day04</h1><h3 id="1-MySql中常用工具"><a href="#1-MySql中常用工具" class="headerlink" title="1. MySql中常用工具"></a>1. MySql中常用工具</h3><h4 id="1-1-mysql"><a href="#1-1-mysql" class="headerlink" title="1.1 mysql"></a>1.1 mysql</h4><p>该mysql不是指mysql服务，而是指mysql的客户端工具。</p><p>语法 ：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql [options] [database]</span><br></pre></td></tr></table></figure><h5 id="1-1-1-连接选项"><a href="#1-1-1-连接选项" class="headerlink" title="1.1.1 连接选项"></a>1.1.1 连接选项</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">参数 ： </span><br><span class="line">-u, --user=name指定用户名</span><br><span class="line">-p, --password[=name]指定密码</span><br><span class="line">-h, --host=name指定服务器IP或域名</span><br><span class="line">-P, --port=#指定连接端口</span><br><span class="line"></span><br><span class="line">示例 ：</span><br><span class="line">mysql -h 127.0.0.1 -P 3306 -u root -p</span><br><span class="line"></span><br><span class="line">mysql -h127.0.0.1 -P3306 -uroot -p2143</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="1-1-2-执行选项"><a href="#1-1-2-执行选项" class="headerlink" title="1.1.2 执行选项"></a>1.1.2 执行选项</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-e, --execute=name执行SQL语句并退出</span><br></pre></td></tr></table></figure><p>此选项可以在Mysql客户端执行SQL语句，而不用连接到MySQL数据库再执行，对于一些批处理脚本，这种方式尤其方便。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">示例：</span><br><span class="line">mysql -uroot -p2143 db01 -e &quot;select * from tb_book&quot;;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Megumi\AppData\Local\Temp\BNZ.625e9650137f8fd8/img/sql\1555325632715.png" alt="1555325632715"> </p><h4 id="1-2-mysqladmin"><a href="#1-2-mysqladmin" class="headerlink" title="1.2 mysqladmin"></a>1.2 mysqladmin</h4><p>mysqladmin 是一个执行管理操作的客户端程序。可以用它来检查服务器的配置和当前状态、创建并删除数据库等。</p><p>可以通过 ： mysqladmin –help  指令查看帮助文档</p><p><img src="C:\Users\Megumi\AppData\Local\Temp\BNZ.625e9650137f8fd8/img/sql\1555326108697.png" alt="1555326108697"> </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">示例 ：</span><br><span class="line">mysqladmin -uroot -p2143 create &#x27;test01&#x27;;  </span><br><span class="line">mysqladmin -uroot -p2143 drop &#x27;test01&#x27;;</span><br><span class="line">mysqladmin -uroot -p2143 version;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1-3-mysqlbinlog"><a href="#1-3-mysqlbinlog" class="headerlink" title="1.3 mysqlbinlog"></a>1.3 mysqlbinlog</h4><p>由于服务器生成的二进制日志文件以二进制格式保存，所以如果想要检查这些文本的文本格式，就会使用到mysqlbinlog 日志管理工具。</p><p>语法 ：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqlbinlog [options]  log-files1 log-files2 ...</span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line"></span><br><span class="line">-d, --database=name : 指定数据库名称，只列出指定的数据库相关操作。</span><br><span class="line"></span><br><span class="line">-o, --offset=# : 忽略掉日志中的前n行命令。</span><br><span class="line"></span><br><span class="line">-r,--result-file=name : 将输出的文本格式日志输出到指定文件。</span><br><span class="line"></span><br><span class="line">-s, --short-form : 显示简单格式， 省略掉一些信息。</span><br><span class="line"></span><br><span class="line">--start-datatime=date1  --stop-datetime=date2 : 指定日期间隔内的所有日志。</span><br><span class="line"></span><br><span class="line">--start-position=pos1 --stop-position=pos2 : 指定位置间隔内的所有日志。</span><br></pre></td></tr></table></figure><h4 id="1-4-mysqldump"><a href="#1-4-mysqldump" class="headerlink" title="1.4 mysqldump"></a>1.4 mysqldump</h4><p>mysqldump 客户端工具用来备份数据库或在不同数据库之间进行数据迁移。备份内容包含创建表，及插入表的SQL语句。</p><p>语法 ：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqldump [options] db_name [tables]</span><br><span class="line"></span><br><span class="line">mysqldump [options] --database/-B db1 [db2 db3...]</span><br><span class="line"></span><br><span class="line">mysqldump [options] --all-databases/-A</span><br></pre></td></tr></table></figure><h5 id="1-4-1-连接选项"><a href="#1-4-1-连接选项" class="headerlink" title="1.4.1 连接选项"></a>1.4.1 连接选项</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">参数 ： </span><br><span class="line">-u, --user=name指定用户名</span><br><span class="line">-p, --password[=name]指定密码</span><br><span class="line">-h, --host=name指定服务器IP或域名</span><br><span class="line">-P, --port=#指定连接端口</span><br></pre></td></tr></table></figure><h5 id="1-4-2-输出内容选项"><a href="#1-4-2-输出内容选项" class="headerlink" title="1.4.2 输出内容选项"></a>1.4.2 输出内容选项</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">参数：</span><br><span class="line">--add-drop-database在每个数据库创建语句前加上 Drop database 语句</span><br><span class="line">--add-drop-table在每个表创建语句前加上 Drop table 语句 , 默认开启 ; 不开启 (--skip-add-drop-table)</span><br><span class="line"></span><br><span class="line">-n, --no-create-db不包含数据库的创建语句</span><br><span class="line">-t, --no-create-info不包含数据表的创建语句</span><br><span class="line">-d --no-data不包含数据</span><br><span class="line"></span><br><span class="line"> -T, --tab=name自动生成两个文件：一个.sql文件，创建表结构的语句；</span><br><span class="line"> 一个.txt文件，数据文件，相当于select into outfile  </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">示例 ： </span><br><span class="line">mysqldump -uroot -p2143 db01 tb_book --add-drop-database --add-drop-table &gt; a</span><br><span class="line"></span><br><span class="line">mysqldump -uroot -p2143 -T /tmp test city</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1555501806693.png" alt="1555501806693"> </p><h4 id="1-5-mysqlimport-x2F-source"><a href="#1-5-mysqlimport-x2F-source" class="headerlink" title="1.5 mysqlimport&#x2F;source"></a>1.5 mysqlimport&#x2F;source</h4><p>mysqlimport 是客户端数据导入工具，用来导入mysqldump 加 -T 参数后导出的文本文件。</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqlimport [options]  db_name  textfile1  [textfile2...]</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqlimport -uroot -p2143 test /tmp/city.txt</span><br></pre></td></tr></table></figure><p>如果需要导入sql文件,可以使用mysql中的source 指令 : </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source /root/tb_book.sql</span><br></pre></td></tr></table></figure><h4 id="1-6-mysqlshow"><a href="#1-6-mysqlshow" class="headerlink" title="1.6 mysqlshow"></a>1.6 mysqlshow</h4><p>mysqlshow 客户端对象查找工具，用来很快地查找存在哪些数据库、数据库中的表、表中的列或者索引。</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqlshow [options] [db_name [table_name [col_name]]]</span><br></pre></td></tr></table></figure><p>参数：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--count显示数据库及表的统计信息（数据库，表 均可以不指定）</span><br><span class="line"></span><br><span class="line">-i显示指定数据库或者指定表的状态信息</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查询每个数据库的表的数量及表中记录的数量</span><br><span class="line">mysqlshow -uroot -p2143 --count</span><br><span class="line"></span><br><span class="line">#查询test库中每个表中的字段书，及行数</span><br><span class="line">mysqlshow -uroot -p2143 test --count</span><br><span class="line"></span><br><span class="line">#查询test库中book表的详细情况</span><br><span class="line">mysqlshow -uroot -p2143 test book --count</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-Mysql-日志"><a href="#2-Mysql-日志" class="headerlink" title="2. Mysql 日志"></a>2. Mysql 日志</h3><p>在任何一种数据库中，都会有各种各样的日志，记录着数据库工作的方方面面，以帮助数据库管理员追踪数据库曾经发生过的各种事件。MySQL 也不例外，在 MySQL 中，有 4 种不同的日志，分别是错误日志、二进制日志（BINLOG 日志）、查询日志和慢查询日志，这些日志记录着数据库在不同方面的踪迹。</p><h4 id="2-1-错误日志"><a href="#2-1-错误日志" class="headerlink" title="2.1 错误日志"></a>2.1 错误日志</h4><p>错误日志是 MySQL 中最重要的日志之一，它记录了当 mysqld 启动和停止时，以及服务器在运行过程中发生任何严重错误时的相关信息。当数据库出现任何故障导致无法正常使用时，可以首先查看此日志。</p><p>该日志是默认开启的 ， 默认存放目录为 mysql 的数据目录（var&#x2F;lib&#x2F;mysql）, 默认的日志文件名为  hostname.err（hostname是主机名）。</p><p>查看日志位置指令 ： </p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;log_error%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Megumi\AppData\Local\Temp\BNZ.625e9650137f8fd8/img/sql\1553993244446.png" alt="1553993244446"> </p><p>查看日志内容 ： </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tail -f /var/lib/mysql/xaxh-server.err</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Megumi\AppData\Local\Temp\BNZ.625e9650137f8fd8/img/sql\1553993537874.png" alt="1553993537874"> </p><h4 id="2-2-二进制日志"><a href="#2-2-二进制日志" class="headerlink" title="2.2 二进制日志"></a>2.2 二进制日志</h4><h5 id="2-2-1概述"><a href="#2-2-1概述" class="headerlink" title="2.2.1概述"></a>2.2.1概述</h5><p>二进制日志（BINLOG）记录了所有的 DDL（数据定义语言）语句和 DML（数据操纵语言）语句，但是不包括数据查询语句。此日志对于灾难时的数据恢复起着极其重要的作用，MySQL的主从复制， 就是通过该binlog实现的。</p><p>二进制日志，默认情况下是没有开启的，需要到MySQL的配置文件中开启，并配置MySQL日志的格式。 </p><p>配置文件位置 : &#x2F;usr&#x2F;my.cnf</p><p>日志存放位置 : 配置时，给定了文件名但是没有指定路径，日志默认写入Mysql的数据目录。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#配置开启binlog日志， 日志的文件前缀为 mysqlbin -----&gt; 生成的文件名如 : mysqlbin.000001,mysqlbin.000002</span><br><span class="line">log_bin=mysqlbin</span><br><span class="line"></span><br><span class="line">#配置二进制日志的格式</span><br><span class="line">binlog_format=STATEMENT</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-2-2-日志格式"><a href="#2-2-2-日志格式" class="headerlink" title="2.2.2 日志格式"></a>2.2.2 日志格式</h5><p><strong>STATEMENT</strong></p><p>该日志格式在日志文件中记录的都是SQL语句（statement），每一条对数据进行修改的SQL都会记录在日志文件中，通过Mysql提供的mysqlbinlog工具，可以清晰的查看到每条语句的文本。主从复制的时候，从库（slave）会将日志解析为原文本，并在从库重新执行一次。</p><p><strong>ROW</strong></p><p>该日志格式在日志文件中记录的是每一行的数据变更，而不是记录SQL语句。比如，执行SQL语句 ： update tb_book set status&#x3D;’1’ , 如果是STATEMENT 日志格式，在日志中会记录一行SQL文件； 如果是ROW，由于是对全表进行更新，也就是每一行记录都会发生变更，ROW 格式的日志中会记录每一行的数据变更。</p><p><strong>MIXED</strong></p><p>这是目前MySQL默认的日志格式，即混合了STATEMENT 和 ROW两种格式。默认情况下采用STATEMENT，但是在一些特殊情况下采用ROW来进行记录。MIXED 格式能尽量利用两种模式的优点，而避开他们的缺点。</p><h5 id="2-2-3-日志读取"><a href="#2-2-3-日志读取" class="headerlink" title="2.2.3 日志读取"></a>2.2.3 日志读取</h5><p>由于日志以二进制方式存储，不能直接读取，需要用mysqlbinlog工具来查看，语法如下 ：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqlbinlog log-file；</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>查看STATEMENT格式日志</strong> </p><p>执行插入语句 ：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_book <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;Lucene&#x27;</span>,<span class="string">&#x27;2088-05-01&#x27;</span>,<span class="string">&#x27;0&#x27;</span>);</span><br></pre></td></tr></table></figure><p> 查看日志文件 ：</p><p><img src="C:\Users\Megumi\AppData\Local\Temp\BNZ.625e9650137f8fd8/img/sql\1554079717375.png" alt="1554079717375"> </p><p>mysqlbin.index : 该文件是日志索引文件 ， 记录日志的文件名；</p><p>mysqlbing.000001 ：日志文件</p><p>查看日志内容 ：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqlbinlog mysqlbing.000001；</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="C:\Users\Megumi\AppData\Local\Temp\BNZ.625e9650137f8fd8/img/sql\1554080016778.png" alt="1554080016778"> </p><p><strong>查看ROW格式日志</strong></p><p>配置 :</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#配置开启binlog日志， 日志的文件前缀为 mysqlbin -----&gt; 生成的文件名如 : mysqlbin.000001,mysqlbin.000002</span><br><span class="line">log_bin=mysqlbin</span><br><span class="line"></span><br><span class="line">#配置二进制日志的格式</span><br><span class="line">binlog_format=ROW</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>插入数据 :</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_book <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;SpringCloud实战&#x27;</span>,<span class="string">&#x27;2088-05-05&#x27;</span>,<span class="string">&#x27;0&#x27;</span>);</span><br></pre></td></tr></table></figure><p>如果日志格式是 ROW , 直接查看数据 , 是查看不懂的 ; 可以在mysqlbinlog 后面加上参数 -vv  </p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysqlbinlog <span class="operator">-</span>vv mysqlbin<span class="number">.000002</span> </span><br></pre></td></tr></table></figure><p><img src="C:\Users\Megumi\AppData\Local\Temp\BNZ.625e9650137f8fd8/img/sql\1554095452022.png" alt="1554095452022"> </p><h5 id="2-2-4-日志删除"><a href="#2-2-4-日志删除" class="headerlink" title="2.2.4 日志删除"></a>2.2.4 日志删除</h5><p>对于比较繁忙的系统，由于每天生成日志量大 ，这些日志如果长时间不清楚，将会占用大量的磁盘空间。下面我们将会讲解几种删除日志的常见方法 ：</p><p><strong>方式一</strong> </p><p>通过 Reset Master 指令删除全部 binlog 日志，删除之后，日志编号，将从 xxxx.000001重新开始 。</p><p>查询之前 ，先查询下日志文件 ： </p><p><img src="C:\Users\Megumi\AppData\Local\Temp\BNZ.625e9650137f8fd8/img/sql\1554118609489.png" alt="1554118609489">   </p><p>执行删除日志指令： </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Reset Master</span><br></pre></td></tr></table></figure><p>执行之后， 查看日志文件 ：</p><p><img src="C:\Users\Megumi\AppData\Local\Temp\BNZ.625e9650137f8fd8/img/sql\1554118675264.png" alt="1554118675264"> </p><p><strong>方式二</strong></p><p>执行指令 <code> purge  master logs to &#39;mysqlbin.******&#39;</code> ，该命令将删除  <code> ******</code> 编号之前的所有日志。 </p><p><strong>方式三</strong></p><p>执行指令 <code> purge master logs before &#39;yyyy-mm-dd hh24:mi:ss&#39;</code> ，该命令将删除日志为 “yyyy-mm-dd hh24:mi:ss” 之前产生的所有日志 。</p><p><strong>方式四</strong></p><p>设置参数 –expire_logs_days&#x3D;# ，此参数的含义是设置日志的过期天数， 过了指定的天数后日志将会被自动删除，这样将有利于减少DBA 管理日志的工作量。</p><p>配置如下 ： </p><p><img src="C:\Users\Megumi\AppData\Local\Temp\BNZ.625e9650137f8fd8/img/sql\1554125506938.png" alt="1554125506938"> </p><h4 id="2-3-查询日志"><a href="#2-3-查询日志" class="headerlink" title="2.3 查询日志"></a>2.3 查询日志</h4><p>查询日志中记录了客户端的所有操作语句，而二进制日志不包含查询数据的SQL语句。</p><p>默认情况下， 查询日志是未开启的。如果需要开启查询日志，可以设置以下配置 ：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#该选项用来开启查询日志 ， 可选值 ： 0 或者 1 ； 0 代表关闭， 1 代表开启 </span><br><span class="line">general_log=1</span><br><span class="line"></span><br><span class="line">#设置日志的文件名 ， 如果没有指定， 默认的文件名为 host_name.log </span><br><span class="line">general_log_file=file_name</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在 mysql 的配置文件 &#x2F;usr&#x2F;my.cnf 中配置如下内容 ： </p><p><img src="C:\Users\Megumi\AppData\Local\Temp\BNZ.625e9650137f8fd8/img/sql\1554128184632.png" alt="1554128184632"> </p><p>配置完毕之后，在数据库执行以下操作 ：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from tb_book;</span><br><span class="line">select * from tb_book where id = 1;</span><br><span class="line">update tb_book set name = &#x27;lucene入门指南&#x27; where id = 5;</span><br><span class="line">select * from tb_book where id &lt; 8;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行完毕之后， 再次来查询日志文件 ： </p><p><img src="C:\Users\Megumi\AppData\Local\Temp\BNZ.625e9650137f8fd8/img/sql\1554128089851.png" alt="1554128089851"> </p><h4 id="2-4-慢查询日志"><a href="#2-4-慢查询日志" class="headerlink" title="2.4 慢查询日志"></a>2.4 慢查询日志</h4><p>慢查询日志记录了所有执行时间超过参数 long_query_time 设置值并且扫描记录数不小于 min_examined_row_limit 的所有的SQL语句的日志。long_query_time 默认为 10 秒，最小为 0， 精度可以到微秒。</p><h5 id="2-4-1-文件位置和格式"><a href="#2-4-1-文件位置和格式" class="headerlink" title="2.4.1 文件位置和格式"></a>2.4.1 文件位置和格式</h5><p>慢查询日志默认是关闭的 。可以通过两个参数来控制慢查询日志 ：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 该参数用来控制慢查询日志是否开启， 可取值： 1 和 0 ， 1 代表开启， 0 代表关闭</span><br><span class="line">slow_query_log=1 </span><br><span class="line"></span><br><span class="line"># 该参数用来指定慢查询日志的文件名</span><br><span class="line">slow_query_log_file=slow_query.log</span><br><span class="line"></span><br><span class="line"># 该选项用来配置查询的时间限制， 超过这个时间将认为值慢查询， 将需要进行日志记录， 默认10s</span><br><span class="line">long_query_time=10</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-4-2-日志的读取"><a href="#2-4-2-日志的读取" class="headerlink" title="2.4.2 日志的读取"></a>2.4.2 日志的读取</h5><p>和错误日志、查询日志一样，慢查询日志记录的格式也是纯文本，可以被直接读取。</p><p>1） 查询long_query_time 的值。</p><p><img src="C:\Users\Megumi\AppData\Local\Temp\BNZ.625e9650137f8fd8/img/sql\1554130333472.png" alt="1554130333472"> </p><p>2） 执行查询操作</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id, title,price,num ,status <span class="keyword">from</span> tb_item <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Megumi\AppData\Local\Temp\BNZ.625e9650137f8fd8/img/sql\1554130448709.png" alt="1554130448709"></p><p>由于该语句执行时间很短，为0s ， 所以不会记录在慢查询日志中。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from tb_item where title like &#x27;%阿尔卡特 (OT-927) 炭黑 联通3G手机 双卡双待165454%&#x27; ;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="C:\Users\Megumi\AppData\Local\Temp\BNZ.625e9650137f8fd8/img/sql\1554130532577.png" alt="1554130532577"> </p><p>该SQL语句 ， 执行时长为 26.77s ，超过10s ， 所以会记录在慢查询日志文件中。</p><p>3） 查看慢查询日志文件</p><p>直接通过cat 指令查询该日志文件 ： </p><p><img src="C:\Users\Megumi\AppData\Local\Temp\BNZ.625e9650137f8fd8/img/sql\1554130669360.png" alt="1554130669360"> </p><p>如果慢查询日志内容很多， 直接查看文件，比较麻烦， 这个时候可以借助于mysql自带的 mysqldumpslow 工具， 来对慢查询日志进行分类汇总。 </p><p><img src="C:\Users\Megumi\AppData\Local\Temp\BNZ.625e9650137f8fd8/img/sql\1554130856485.png" alt="1554130856485"> </p><h3 id="3-Mysql复制"><a href="#3-Mysql复制" class="headerlink" title="3. Mysql复制"></a>3. Mysql复制</h3><h4 id="3-1-复制概述"><a href="#3-1-复制概述" class="headerlink" title="3.1 复制概述"></a>3.1 复制概述</h4><p>复制是指将主数据库的DDL 和 DML 操作通过二进制日志传到从库服务器中，然后在从库上对这些日志重新执行（也叫重做），从而使得从库和主库的数据保持同步。</p><p>MySQL支持一台主库同时向多台从库进行复制， 从库同时也可以作为其他从服务器的主库，实现链状复制。</p><h4 id="3-2-复制原理"><a href="#3-2-复制原理" class="headerlink" title="3.2 复制原理"></a>3.2 复制原理</h4><p>MySQL 的主从复制原理如下。</p><p><img src="C:\Users\Megumi\AppData\Local\Temp\BNZ.625e9650137f8fd8/img/sql\1.jpg" alt="1554423698190"> </p><p>从上层来看，复制分成三步：</p><ul><li><p>Master 主库在事务提交时，会把数据变更作为时间 Events 记录在二进制日志文件 Binlog 中。</p></li><li><p>主库推送二进制日志文件 Binlog 中的日志事件到从库的中继日志 Relay Log 。</p></li><li><p>slave重做中继日志中的事件，将改变反映它自己的数据。</p></li></ul><h4 id="3-3-复制优势"><a href="#3-3-复制优势" class="headerlink" title="3.3 复制优势"></a>3.3 复制优势</h4><p>MySQL 复制的有点主要包含以下三个方面：</p><ul><li><p>主库出现问题，可以快速切换到从库提供服务。</p></li><li><p>可以在从库上执行查询操作，从主库中更新，实现读写分离，降低主库的访问压力。</p></li><li><p>可以在从库中执行备份，以避免备份期间影响主库的服务。</p></li></ul><h4 id="3-4-搭建步骤"><a href="#3-4-搭建步骤" class="headerlink" title="3.4 搭建步骤"></a>3.4 搭建步骤</h4><h5 id="3-4-1-master"><a href="#3-4-1-master" class="headerlink" title="3.4.1 master"></a>3.4.1 master</h5><p>1） 在master 的配置文件（&#x2F;usr&#x2F;my.cnf）中，配置如下内容：</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#mysql 服务ID,保证整个集群环境中唯一</span></span><br><span class="line"><span class="attr">server-id</span>=<span class="string">1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#mysql binlog 日志的存储路径和文件名</span></span><br><span class="line"><span class="attr">log-bin</span>=<span class="string">/var/lib/mysql/mysqlbin</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#错误日志,默认已经开启</span></span><br><span class="line"><span class="comment">#log-err</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#mysql的安装目录</span></span><br><span class="line"><span class="comment">#basedir</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#mysql的临时目录</span></span><br><span class="line"><span class="comment">#tmpdir</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#mysql的数据存放目录</span></span><br><span class="line"><span class="comment">#datadir</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#是否只读,1 代表只读, 0 代表读写</span></span><br><span class="line"><span class="attr">read-only</span>=<span class="string">0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#忽略的数据, 指不需要同步的数据库</span></span><br><span class="line"><span class="attr">binlog-ignore-db</span>=<span class="string">mysql</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#指定同步的数据库</span></span><br><span class="line"><span class="comment">#binlog-do-db=db01</span></span><br></pre></td></tr></table></figure><p>2） 执行完毕之后，需要重启Mysql：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">service mysql restart ；</span><br></pre></td></tr></table></figure><p>3） 创建同步数据的账户，并且进行授权操作：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> replication slave <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;itcast&#x27;</span>@<span class="string">&#x27;192.168.192.131&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;itcast&#x27;</span>;</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>4） 查看master状态：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> master status;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Megumi\AppData\Local\Temp\BNZ.625e9650137f8fd8/img/sql\1554477759735.png" alt="1554477759735"> </p><p>字段含义：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">File : 从哪个日志文件开始推送日志文件 </span><br><span class="line">Position ： 从哪个位置开始推送日志</span><br><span class="line">Binlog_Ignore_DB : 指定不需要同步的数据库</span><br></pre></td></tr></table></figure><h5 id="3-4-2-slave"><a href="#3-4-2-slave" class="headerlink" title="3.4.2 slave"></a>3.4.2 slave</h5><p>1） 在 slave 端配置文件中，配置如下内容：</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#mysql服务端ID,唯一</span></span><br><span class="line"><span class="attr">server-id</span>=<span class="string">2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#指定binlog日志</span></span><br><span class="line"><span class="attr">log-bin</span>=<span class="string">/var/lib/mysql/mysqlbin</span></span><br></pre></td></tr></table></figure><p>2）  执行完毕之后，需要重启Mysql：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service mysql restart；</span><br></pre></td></tr></table></figure><p>3） 执行如下指令 ：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">change master <span class="keyword">to</span> master_host<span class="operator">=</span> <span class="string">&#x27;192.168.192.130&#x27;</span>, master_user<span class="operator">=</span><span class="string">&#x27;itcast&#x27;</span>, master_password<span class="operator">=</span><span class="string">&#x27;itcast&#x27;</span>, master_log_file<span class="operator">=</span><span class="string">&#x27;mysqlbin.000001&#x27;</span>, master_log_pos<span class="operator">=</span><span class="number">413</span>;</span><br></pre></td></tr></table></figure><p>指定当前从库对应的主库的IP地址，用户名，密码，从哪个日志文件开始的那个位置开始同步推送日志。</p><p>4） 开启同步操作</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start slave;</span><br><span class="line"></span><br><span class="line">show slave status;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Megumi\AppData\Local\Temp\BNZ.625e9650137f8fd8/img/sql\1554479387365.png" alt="1554479387365"> </p><p>5） 停止同步操作</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stop slave;</span><br></pre></td></tr></table></figure><h5 id="3-4-3-验证同步操作"><a href="#3-4-3-验证同步操作" class="headerlink" title="3.4.3 验证同步操作"></a>3.4.3 验证同步操作</h5><p>1） 在主库中创建数据库，创建表，并插入数据 ：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database db01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">user</span> db01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="keyword">null</span> auto_increment,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">sex <span class="type">varchar</span>(<span class="number">1</span>),</span><br><span class="line"><span class="keyword">primary</span> key (id)</span><br><span class="line">)engine<span class="operator">=</span>innodb <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(id,name,sex) <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;Tom&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(id,name,sex) <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;Trigger&#x27;</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(id,name,sex) <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;Dawn&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br></pre></td></tr></table></figure><p>2） 在从库中查询数据，进行验证 ：</p><p>在从库中，可以查看到刚才创建的数据库：</p><p><img src="C:\Users\Megumi\AppData\Local\Temp\BNZ.625e9650137f8fd8/img/sql\1554544658640.png" alt="1554544658640"> </p><p>在该数据库中，查询user表中的数据：</p><p><img src="C:\Users\Megumi\AppData\Local\Temp\BNZ.625e9650137f8fd8/img/sql\1554544679538.png" alt="1554544679538"> </p><h3 id="4-综合案例"><a href="#4-综合案例" class="headerlink" title="4. 综合案例"></a>4. 综合案例</h3><h4 id="4-1-需求分析"><a href="#4-1-需求分析" class="headerlink" title="4.1 需求分析"></a>4.1 需求分析</h4><p>在业务系统中，需要记录当前业务系统的访问日志，该访问日志包含：操作人，操作时间，访问类，访问方法，请求参数，请求结果，请求结果类型，请求时长 等信息。记录详细的系统访问日志，主要便于对系统中的用户请求进行追踪，并且在系统 的管理后台可以查看到用户的访问记录。</p><p>记录系统中的日志信息，可以通过Spring 框架的AOP来实现。具体的请求处理流程，如下：</p><p><img src="C:\Users\Megumi\AppData\Local\Temp\BNZ.625e9650137f8fd8/img/sql\1555075760661.png" alt="1555075760661"> </p><h4 id="4-2-搭建案例环境"><a href="#4-2-搭建案例环境" class="headerlink" title="4.2 搭建案例环境"></a>4.2 搭建案例环境</h4><h5 id="4-2-1-数据库表"><a href="#4-2-1-数据库表" class="headerlink" title="4.2.1 数据库表"></a>4.2.1 数据库表</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE mysql_demo <span class="keyword">DEFAULT</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 ；</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `brand` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;品牌名称&#x27;</span>,</span><br><span class="line">  `first_char` <span class="type">varchar</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;品牌首字母&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `item` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;商品id&#x27;</span>,</span><br><span class="line">  `title` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品标题&#x27;</span>,</span><br><span class="line">  `price` <span class="keyword">double</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品价格，单位为：元&#x27;</span>,</span><br><span class="line">  `num` <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;库存数量&#x27;</span>,</span><br><span class="line">  `categoryid` <span class="type">bigint</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;所属类目，叶子类目&#x27;</span>,</span><br><span class="line">  `status` <span class="type">varchar</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品状态，1-正常，2-下架，3-删除&#x27;</span>,</span><br><span class="line">  `sellerid` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商家ID&#x27;</span>,</span><br><span class="line">  `createtime` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `updatetime` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;商品表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">96</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `birthday` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `sex` <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `email` <span class="type">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `phone` <span class="type">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `qq` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `operation_log` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">  `operate_class` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;操作类&#x27;</span>,</span><br><span class="line">  `operate_method` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;操作方法&#x27;</span>,</span><br><span class="line">  `return_class` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;返回值类型&#x27;</span>,</span><br><span class="line">  `operate_user` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;操作用户&#x27;</span>,</span><br><span class="line">  `operate_time` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;操作时间&#x27;</span>,</span><br><span class="line">  `param_and_value` <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;请求参数名及参数值&#x27;</span>,</span><br><span class="line">  `cost_time` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;执行方法耗时, 单位 ms&#x27;</span>,</span><br><span class="line">  `return_value` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;返回值&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB  <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="4-2-2-pom-xml"><a href="#4-2-2-pom-xml" class="headerlink" title="4.2.2 pom.xml"></a>4.2.2 pom.xml</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>1.6.6<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> <span class="comment">&lt;!-- spring --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">uriEncoding</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">uriEncoding</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="4-2-3-web-xml"><a href="#4-2-3-web-xml" class="headerlink" title="4.2.3 web.xml"></a>4.2.3 web.xml</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">version</span>=<span class="string">&quot;2.5&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 解决post乱码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定加载的配置文件 ，通过参数contextConfigLocation加载--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>log-datalist.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="4-2-4-db-properties"><a href="#4-2-4-db-properties" class="headerlink" title="4.2.4 db.properties"></a>4.2.4 db.properties</h5><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://192.168.142.128:3306/mysql_demo</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">itcast</span></span><br></pre></td></tr></table></figure><h5 id="4-2-5-applicationContext-xml"><a href="#4-2-5-applicationContext-xml" class="headerlink" title="4.2.5 applicationContext.xml"></a>4.2.5 applicationContext.xml</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 加载配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:db.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置 spring 创建容器时要扫描的包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;cn.itcast&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">context:exclude-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置 MyBatis 的 Session 工厂 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;cn.itcast.pojo&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置 Mapper 扫描器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;cn.itcast.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务的注解驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:annotation-driven</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="4-2-6-springmvc-xml"><a href="#4-2-6-springmvc-xml" class="headerlink" title="4.2.6 springmvc.xml"></a>4.2.6 springmvc.xml</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;cn.itcast.controller&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="4-2-7-导入基础工程"><a href="#4-2-7-导入基础工程" class="headerlink" title="4.2.7 导入基础工程"></a>4.2.7 导入基础工程</h5><p><img src="C:\Users\Megumi\AppData\Local\Temp\BNZ.625e9650137f8fd8/img/sql\1555076434270.png" alt="1555076434270"> </p><h4 id="4-3-通过AOP记录操作日志"><a href="#4-3-通过AOP记录操作日志" class="headerlink" title="4.3 通过AOP记录操作日志"></a>4.3 通过AOP记录操作日志</h4><h5 id="4-3-1-自定义注解"><a href="#4-3-1-自定义注解" class="headerlink" title="4.3.1 自定义注解"></a>4.3.1 自定义注解</h5><p>通过自定义注解，来标示方法需不需要进行记录日志，如果该方法在访问时需要记录日志，则在该方法上标示该注解既可。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> OperateLog &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-3-2-定义通知类"><a href="#4-3-2-定义通知类" class="headerlink" title="4.3.2 定义通知类"></a>4.3.2 定义通知类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperateAdvice</span> &#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> Logger.getLogger(OperateAdvice.class);</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> OperationLogService operationLogService;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">   <span class="meta">@Around(&quot;execution(* cn.itcast.controller.*.*(..)) &amp;&amp; @annotation(operateLog)&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> Object <span class="title function_">insertLogAround</span><span class="params">(ProceedingJoinPoint pjp , OperateLog operateLog)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot; ************************ 记录日志 [start]  ****************************** &quot;</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="type">OperationLog</span> <span class="variable">op</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OperationLog</span>();</span><br><span class="line">      </span><br><span class="line">      <span class="type">DateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">      op.setOperateTime(sdf.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">      op.setOperateUser(DataUtils.getRandStr(<span class="number">8</span>));</span><br><span class="line">      </span><br><span class="line">      op.setOperateClass(pjp.getTarget().getClass().getName());</span><br><span class="line">      op.setOperateMethod(pjp.getSignature().getName());</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//获取方法调用时传递的参数</span></span><br><span class="line">      Object[] args = pjp.getArgs();</span><br><span class="line">      op.setParamAndValue(Arrays.toString(args));</span><br><span class="line"></span><br><span class="line">      <span class="type">long</span> <span class="variable">start_time</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//放行</span></span><br><span class="line">      <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> pjp.proceed();</span><br><span class="line"></span><br><span class="line">      <span class="type">long</span> <span class="variable">end_time</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">      op.setCostTime(end_time - start_time);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(object != <span class="literal">null</span>)&#123;</span><br><span class="line">         op.setReturnClass(object.getClass().getName());</span><br><span class="line">         op.setReturnValue(object.toString());</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         op.setReturnClass(<span class="string">&quot;java.lang.Object&quot;</span>);</span><br><span class="line">         op.setParamAndValue(<span class="string">&quot;void&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      log.error(JsonUtils.obj2JsonString(op));</span><br><span class="line"></span><br><span class="line">      operationLogService.insert(op);</span><br><span class="line">      </span><br><span class="line">      System.out.println(<span class="string">&quot; ************************** 记录日志 [end]  *************************** &quot;</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> object;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-3-3-方法上加注解"><a href="#4-3-3-方法上加注解" class="headerlink" title="4.3.3 方法上加注解"></a>4.3.3 方法上加注解</h5><p>在需要记录日志的方法上加上注解@OperateLog。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@OperateLog</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/insert&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">insert</span><span class="params">(<span class="meta">@RequestBody</span> Brand brand)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        brandService.insert(brand);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="literal">true</span>,<span class="string">&quot;操作成功&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="literal">false</span>,<span class="string">&quot;操作失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-日志查询后端代码实现"><a href="#4-4-日志查询后端代码实现" class="headerlink" title="4.4 日志查询后端代码实现"></a>4.4 日志查询后端代码实现</h4><h5 id="4-4-1-Mapper接口"><a href="#4-4-1-Mapper接口" class="headerlink" title="4.4.1 Mapper接口"></a>4.4.1 Mapper接口</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OperationLogMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(OperationLog operationLog)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;OperationLog&gt; <span class="title function_">selectListByCondition</span><span class="params">(Map dataMap)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">countByCondition</span><span class="params">(Map dataMap)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-4-2-Mapper-xml-映射配置文件"><a href="#4-4-2-Mapper-xml-映射配置文件" class="headerlink" title="4.4.2 Mapper.xml 映射配置文件"></a>4.4.2 Mapper.xml 映射配置文件</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;cn.itcast.mapper.OperationLogMapper&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;operationLog&quot;</span>&gt;</span></span><br><span class="line">        INSERT INTO operation_log(id,return_value,return_class,operate_user,operate_time,param_and_value,</span><br><span class="line">        operate_class,operate_method,cost_time)</span><br><span class="line">      VALUES(NULL,#&#123;returnValue&#125;,#&#123;returnClass&#125;,#&#123;operateUser&#125;,#&#123;operateTime&#125;,#&#123;paramAndValue&#125;,</span><br><span class="line">        #&#123;operateClass&#125;,#&#123;operateMethod&#125;,#&#123;costTime&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectListByCondition&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;operationLog&quot;</span>&gt;</span></span><br><span class="line">      select</span><br><span class="line">        id ,</span><br><span class="line">        operate_class as operateClass ,</span><br><span class="line">        operate_method as operateMethod,</span><br><span class="line">        return_class as returnClass,</span><br><span class="line">        operate_user as operateUser,</span><br><span class="line">        operate_time as operateTime,</span><br><span class="line">        param_and_value as paramAndValue,</span><br><span class="line">        cost_time as costTime,</span><br><span class="line">        return_value as returnValue</span><br><span class="line">      from operation_log</span><br><span class="line">      <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;oplog_where&quot;</span>/&gt;</span></span><br><span class="line">      limit #&#123;start&#125;,#&#123;size&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;countByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;long&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">        select count(*) from operation_log</span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;oplog_where&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;oplog_where&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;operateClass != null and operateClass != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">                and operate_class = #&#123;operateClass&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;operateMethod != null and operateMethod != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">                and operate_method = #&#123;operateMethod&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;returnClass != null and returnClass != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">                and return_class = #&#123;returnClass&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;costTime != null&quot;</span>&gt;</span></span><br><span class="line">                and cost_time =  #&#123;costTime&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="4-4-3-Service"><a href="#4-4-3-Service" class="headerlink" title="4.4.3 Service"></a>4.4.3 Service</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperationLogService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//private static Logger logger = Logger.getLogger(OperationLogService.class);</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OperationLogMapper operationLogMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(OperationLog operationLog)</span>&#123;</span><br><span class="line">        operationLogMapper.insert(operationLog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据条件查询</span></span><br><span class="line">    <span class="keyword">public</span> PageResult <span class="title function_">selectListByCondition</span><span class="params">(Map dataMap, Integer pageNum , Integer pageSize)</span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span>(paramMap ==<span class="literal">null</span>)&#123;</span><br><span class="line">            paramMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        paramMap.put(<span class="string">&quot;start&quot;</span> , (pageNum-<span class="number">1</span>)*rows);</span><br><span class="line">        paramMap.put(<span class="string">&quot;rows&quot;</span>,rows);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">costTime</span> <span class="operator">=</span> paramMap.get(<span class="string">&quot;costTime&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(costTime != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;&quot;</span>.equals(costTime.toString()))&#123;</span><br><span class="line">                paramMap.put(<span class="string">&quot;costTime&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                paramMap.put(<span class="string">&quot;costTime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Long</span>(paramMap.get(<span class="string">&quot;costTime&quot;</span>).toString()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(dataMap);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">countStart</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> operationLogMapper.countByCondition(dataMap);</span><br><span class="line">        <span class="type">long</span> <span class="variable">countEnd</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;Count Cost Time : &quot;</span> + (countEnd-countStart)+<span class="string">&quot; ms&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        List&lt;OperationLog&gt; list = operationLogMapper.selectListByCondition(dataMap);</span><br><span class="line">        <span class="type">long</span> <span class="variable">queryEnd</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;Query Cost Time : &quot;</span> + (queryEnd-countEnd)+<span class="string">&quot; ms&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageResult</span>(count,list);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-4-4-Controller"><a href="#4-4-4-Controller" class="headerlink" title="4.4.4 Controller"></a>4.4.4 Controller</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/operationLog&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperationLogController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OperationLogService operationLogService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/findList&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> PageResult <span class="title function_">findList</span><span class="params">(<span class="meta">@RequestBody</span> Map dataMap, Integer pageNum , Integer pageSize)</span>&#123;</span><br><span class="line">        <span class="type">PageResult</span> <span class="variable">page</span> <span class="operator">=</span> operationLogService.selectListByCondition(dataMap, pageNum, pageSize);</span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-5-日志查询前端代码实现"><a href="#4-5-日志查询前端代码实现" class="headerlink" title="4.5 日志查询前端代码实现"></a>4.5 日志查询前端代码实现</h4><p>前端代码使用 BootStrap + AdminLTE 进行布局， 使用Vuejs 进行视图层展示。</p><h5 id="4-5-1-js"><a href="#4-5-1-js" class="headerlink" title="4.5.1 js"></a>4.5.1 js</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">       <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="attr">dataList</span>:[],</span></span><br><span class="line"><span class="language-javascript">           <span class="attr">searchEntity</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">               <span class="attr">operateClass</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">               <span class="attr">operateMethod</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">               <span class="attr">returnClass</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">               <span class="attr">costTime</span>:<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">           &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">           <span class="attr">page</span>: <span class="number">1</span>,  <span class="comment">//显示的是哪一页</span></span></span><br><span class="line"><span class="language-javascript">           <span class="attr">pageSize</span>: <span class="number">10</span>, <span class="comment">//每一页显示的数据条数</span></span></span><br><span class="line"><span class="language-javascript">           <span class="attr">total</span>: <span class="number">150</span>, <span class="comment">//记录总数</span></span></span><br><span class="line"><span class="language-javascript">           <span class="attr">maxPage</span>:<span class="number">8</span>  <span class="comment">//最大页数</span></span></span><br><span class="line"><span class="language-javascript">       &#125;,</span></span><br><span class="line"><span class="language-javascript">       <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="attr">pageHandler</span>: <span class="keyword">function</span> (<span class="params">page</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">               <span class="variable language_">this</span>.<span class="property">page</span> = page;</span></span><br><span class="line"><span class="language-javascript">               <span class="variable language_">this</span>.<span class="title function_">search</span>();</span></span><br><span class="line"><span class="language-javascript">           &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">           <span class="attr">search</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">               <span class="keyword">var</span> _this = <span class="variable language_">this</span>;</span></span><br><span class="line"><span class="language-javascript">               <span class="variable language_">this</span>.<span class="title function_">showLoading</span>();</span></span><br><span class="line"><span class="language-javascript">               axios.<span class="title function_">post</span>(<span class="string">&#x27;/operationLog/findList.do?pageNum=&#x27;</span> + _this.<span class="property">page</span> + <span class="string">&quot;&amp;pageSize=&quot;</span> + _this.<span class="property">pageSize</span>, _this.<span class="property">searchEntity</span>).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                   <span class="keyword">if</span> (response) &#123;</span></span><br><span class="line"><span class="language-javascript">                       _this.<span class="property">dataList</span> = response.<span class="property">data</span>.<span class="property">dataList</span>;</span></span><br><span class="line"><span class="language-javascript">                       _this.<span class="property">total</span> = response.<span class="property">data</span>.<span class="property">total</span>;</span></span><br><span class="line"><span class="language-javascript">                       _this.<span class="title function_">hideLoading</span>();</span></span><br><span class="line"><span class="language-javascript">                   &#125;</span></span><br><span class="line"><span class="language-javascript">               &#125;)</span></span><br><span class="line"><span class="language-javascript">           &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">           <span class="attr">showLoading</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">               $(<span class="string">&#x27;#loadingModal&#x27;</span>).<span class="title function_">modal</span>(&#123;<span class="attr">backdrop</span>: <span class="string">&#x27;static&#x27;</span>, <span class="attr">keyboard</span>: <span class="literal">false</span>&#125;);</span></span><br><span class="line"><span class="language-javascript">           &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">           <span class="attr">hideLoading</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">               $(<span class="string">&#x27;#loadingModal&#x27;</span>).<span class="title function_">modal</span>(<span class="string">&#x27;hide&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">           &#125;,</span></span><br><span class="line"><span class="language-javascript">       &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       <span class="attr">created</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="variable language_">this</span>.<span class="title function_">pageHandler</span>(<span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">       &#125;</span></span><br><span class="line"><span class="language-javascript">   &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="4-5-2-列表数据展示"><a href="#4-5-2-列表数据展示" class="headerlink" title="4.5.2 列表数据展示"></a>4.5.2 列表数据展示</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;item in dataList&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.operateClass&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.operateMethod&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.returnClass&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.returnValue&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.operateUser&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.operateTime&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.costTime&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;text-center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn bg-olive btn-xs&quot;</span>&gt;</span>详情<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn bg-olive btn-xs&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4.5.3 分页插件</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span> <span class="attr">id</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">zpagenav</span> <span class="attr">v-bind:page</span>=<span class="string">&quot;page&quot;</span> <span class="attr">v-bind:page-size</span>=<span class="string">&quot;pageSize&quot;</span> <span class="attr">v-bind:total</span>=<span class="string">&quot;total&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">v-bind:max-page</span>=<span class="string">&quot;maxPage&quot;</span>  <span class="attr">v-on:pagehandler</span>=<span class="string">&quot;pageHandler&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">zpagenav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-6-联调测试"><a href="#4-6-联调测试" class="headerlink" title="4.6 联调测试"></a>4.6 联调测试</h4><p>可以通过postman来访问业务系统，再查看数据库中的日志信息，验证能不能将用户的访问日志记录下来。</p><p><img src="C:\Users\Megumi\AppData\Local\Temp\BNZ.625e9650137f8fd8/img/sql\1555077276426.png" alt="1555077276426"> </p><h4 id="4-7-分析性能问题"><a href="#4-7-分析性能问题" class="headerlink" title="4.7 分析性能问题"></a>4.7 分析性能问题</h4><p>系统中用户访问日志的数据量，随着时间的推移，这张表的数据量会越来越大，因此我们需要根据业务需求，来对日志查询模块的性能进行优化。</p><p>1） 分页查询优化</p><p>由于在进行日志查询时，是进行分页查询，那也就意味着，在查看时，至少需要查询两次：</p><p>A. 查询符合条件的总记录数。–&gt; count 操作</p><p>B. 查询符合条件的列表数据。–&gt; 分页查询 limit 操作</p><p>通常来说，count() 都需要扫描大量的行（意味着需要访问大量的数据）才能获得精确的结果，因此是很难对该SQL进行优化操作的。如果需要对count进行优化，可以采用另外一种思路，可以增加汇总表，或者redis缓存来专门记录该表对应的记录数，这样的话，就可以很轻松的实现汇总数据的查询，而且效率很高，但是这种统计并不能保证百分之百的准确 。对于数据库的操作，“快速、精确、实现简单”，三者永远只能满足其二，必须舍掉其中一个。</p><p>2） 条件查询优化</p><p>针对于条件查询,需要对查询条件,及排序字段建立索引。</p><p>3） 读写分离</p><p>通过主从复制集群，来完成读写分离，使写操作走主节点， 而读操作，走从节点。</p><p>4） MySQL服务器优化</p><p>5） 应用优化</p><h4 id="4-8-性能优化-分页"><a href="#4-8-性能优化-分页" class="headerlink" title="4.8 性能优化 - 分页"></a>4.8 性能优化 - 分页</h4><h5 id="4-8-1-优化count"><a href="#4-8-1-优化count" class="headerlink" title="4.8.1 优化count"></a>4.8.1 优化count</h5><p>创建一张表用来记录日志表的总数据量：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> log_counter(</span><br><span class="line">logcount <span class="type">bigint</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">)engine <span class="operator">=</span> innodb <span class="keyword">default</span> CHARSET <span class="operator">=</span> utf8;</span><br></pre></td></tr></table></figure><p>在每次插入数据之后，更新该表 ：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateLogCounter&quot;</span> &gt;</span></span><br><span class="line">    update log_counter set logcount = logcount + 1</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在进行分页查询时, 获取总记录数，从该表中查询既可。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;countLogFromCounter&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;long&quot;</span>&gt;</span></span><br><span class="line">    select logcount from log_counter limit 1</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="4-8-2-优化-limit"><a href="#4-8-2-优化-limit" class="headerlink" title="4.8.2 优化 limit"></a>4.8.2 优化 limit</h5><p>在进行分页时，一般通过创建覆盖索引，能够比较好的提高性能。一个非常常见，而又非常头疼的分页场景就是 “limit 1000000,10” ，此时MySQL需要搜索出前1000010 条记录后，仅仅需要返回第 1000001 到 1000010 条记录，前1000000 记录会被抛弃，查询代价非常大。 </p><p><img src="C:\Users\Megumi\AppData\Local\Temp\BNZ.625e9650137f8fd8/img/sql\1555081714638.png" alt="1555081714638"> </p><p>当点击比较靠后的页码时，就会出现这个问题，查询效率非常慢。</p><p>优化SQL：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> operation_log limit <span class="number">3000000</span> , <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>将上述SQL优化为 : </p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> operation_log t , (<span class="keyword">select</span> id <span class="keyword">from</span> operation_log <span class="keyword">order</span> <span class="keyword">by</span> id limit <span class="number">3000000</span>,<span class="number">10</span>) b <span class="keyword">where</span> t.id <span class="operator">=</span> b.id ;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectListByCondition&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;operationLog&quot;</span>&gt;</span></span><br><span class="line">  select</span><br><span class="line">    id ,</span><br><span class="line">    operate_class as operateClass ,</span><br><span class="line">    operate_method as operateMethod,</span><br><span class="line">    return_class as returnClass,</span><br><span class="line">    operate_user as operateUser,</span><br><span class="line">    operate_time as operateTime,</span><br><span class="line">    param_and_value as paramAndValue,</span><br><span class="line">    cost_time as costTime,</span><br><span class="line">    return_value as returnValue</span><br><span class="line">  from operation_log t,</span><br><span class="line">    </span><br><span class="line">  (select id from operation_log </span><br><span class="line">  <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;oplog_where&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">  order by id limit #&#123;start&#125;,#&#123;rows&#125;) b  where t.id = b.id  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-9-性能优化-索引"><a href="#4-9-性能优化-索引" class="headerlink" title="4.9 性能优化 - 索引"></a>4.9 性能优化 - 索引</h4><p><img src="C:\Users\Megumi\AppData\Local\Temp\BNZ.625e9650137f8fd8/img/sql\1555152703824.png" alt="1555152703824"></p><p>当根据操作人进行查询时， 查询的效率很低，耗时比较长。原因就是因为在创建数据库表结构时，并没有针对于 操作人 字段建立索引。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_user_method_return_cost <span class="keyword">ON</span> operation_log(operate_user,operate_method,return_class,cost_time);</span><br></pre></td></tr></table></figure><p>同上 ， 为了查询效率高，我们也需要对 操作方法、返回值类型、操作耗时 等字段进行创建索引，以提高查询效率。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_optlog_method_return_cost <span class="keyword">ON</span> operation_log(operate_method,return_class,cost_time);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_optlog_return_cost <span class="keyword">ON</span> operation_log(return_class,cost_time);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_optlog_cost <span class="keyword">ON</span> operation_log(cost_time);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-10-性能优化-排序"><a href="#4-10-性能优化-排序" class="headerlink" title="4.10 性能优化 - 排序"></a>4.10 性能优化 - 排序</h4><p>在查询数据时，如果业务需求中需要我们对结果内容进行了排序处理 , 这个时候,我们还需要对排序的字段建立适当的索引, 来提高排序的效率 。</p><h4 id="4-11-性能优化-读写分离"><a href="#4-11-性能优化-读写分离" class="headerlink" title="4.11 性能优化 - 读写分离"></a>4.11 性能优化 - 读写分离</h4><h5 id="4-11-1-概述"><a href="#4-11-1-概述" class="headerlink" title="4.11.1 概述"></a>4.11.1 概述</h5><p>在Mysql主从复制的基础上，可以使用读写分离来降低单台Mysql节点的压力，从而来提高访问效率，读写分离的架构如下：</p><p><img src="C:\Users\Megumi\AppData\Local\Temp\BNZ.625e9650137f8fd8/img/sql\1555235426739.png" alt="1555235426739"> </p><p>对于读写分离的实现，可以通过Spring AOP 来进行动态的切换数据源，进行操作 ：</p><h5 id="4-11-2-实现方式"><a href="#4-11-2-实现方式" class="headerlink" title="4.11.2 实现方式"></a>4.11.2 实现方式</h5><p>db.properties</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.write.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.write.url</span>=<span class="string">jdbc:mysql://192.168.142.128:3306/mysql_demo</span></span><br><span class="line"><span class="attr">jdbc.write.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.write.password</span>=<span class="string">itcast</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jdbc.read.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.read.url</span>=<span class="string">jdbc:mysql://192.168.142.129:3306/mysql_demo</span></span><br><span class="line"><span class="attr">jdbc.read.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.read.password</span>=<span class="string">itcast</span></span><br></pre></td></tr></table></figure><p>applicationContext-datasource.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 - Read --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;readDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>  <span class="attr">lazy-init</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.read.driver&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.read.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.read.username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.read.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 - Write --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;writeDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>  <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>  <span class="attr">lazy-init</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.write.driver&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.write.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.write.username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.write.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置动态分配的读写 数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.itcast.aop.datasource.ChooseDataSource&quot;</span> <span class="attr">lazy-init</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;targetDataSources&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span> <span class="attr">key-type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value-type</span>=<span class="string">&quot;javax.sql.DataSource&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;write&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;writeDataSource&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;read&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;readDataSource&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultTargetDataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;writeDataSource&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;methodType&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span> <span class="attr">key-type</span>=<span class="string">&quot;java.lang.String&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;read&quot;</span> <span class="attr">value</span>=<span class="string">&quot;,get,select,count,list,query,find&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;write&quot;</span> <span class="attr">value</span>=<span class="string">&quot;,add,create,update,delete,remove,insert&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ChooseDataSource</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChooseDataSource</span> <span class="keyword">extends</span> <span class="title class_">AbstractRoutingDataSource</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, List&lt;String&gt;&gt; METHOD_TYPE_MAP = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, List&lt;String&gt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现父类中的抽象方法，获取数据源名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">determineCurrentLookupKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceHandler.getDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置方法名前缀对应的数据源</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMethodType</span><span class="params">(Map&lt;String, String&gt; map)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">            List&lt;String&gt; v = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">            String[] types = map.get(key).split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (String type : types) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!StringUtils.isEmpty(type)) &#123;</span><br><span class="line">                    v.add(type);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            METHOD_TYPE_MAP.put(key, v);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;METHOD_TYPE_MAP : &quot;</span>+METHOD_TYPE_MAP);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DataSourceHandler</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据源名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;String&gt; holder = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在项目启动的时候将配置的读、写数据源加到holder中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">putDataSource</span><span class="params">(String datasource)</span> &#123;</span><br><span class="line">        holder.set(datasource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从holer中获取数据源字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> holder.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DataSourceAspect</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(-9999)</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy(proxyTargetClass = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(<span class="built_in">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置前置通知,使用在方法aspect()上注册的切入点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* cn.itcast.service.*.*(..))&quot;)</span></span><br><span class="line">    <span class="meta">@Order(-9999)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint point)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> point.getTarget().getClass().getName();</span><br><span class="line">        <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> point.getSignature().getName();</span><br><span class="line">        logger.info(className + <span class="string">&quot;.&quot;</span> + method + <span class="string">&quot;(&quot;</span> + Arrays.asList(point.getArgs())+ <span class="string">&quot;)&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (String key : ChooseDataSource.METHOD_TYPE_MAP.keySet()) &#123;</span><br><span class="line">                <span class="keyword">for</span> (String type : ChooseDataSource.METHOD_TYPE_MAP.get(key)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (method.startsWith(type)) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;key : &quot;</span> + key);</span><br><span class="line">                        DataSourceHandler.putDataSource(key);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 @Order(-9999) 注解来控制事务管理器, 与该通知类的加载顺序 , 需要让通知类 , 先加载 , 来判定使用哪个数据源 .</p><h5 id="4-11-3-验证"><a href="#4-11-3-验证" class="headerlink" title="4.11.3 验证"></a>4.11.3 验证</h5><p>在主库和从库中，执行如下SQL语句，来查看是否读的时候， 从从库中读取 ； 写入操作的时候，是否写入到主库。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> status <span class="keyword">like</span> <span class="string">&#x27;Innodb_rows_%&#x27;</span> ;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Megumi\AppData\Local\Temp\BNZ.625e9650137f8fd8/img/sql\1555235982584.png" alt="1555235982584"> </p><h5 id="4-11-4-原理"><a href="#4-11-4-原理" class="headerlink" title="4.11.4 原理"></a>4.11.4 原理</h5><p><img src="C:\Users\Megumi\AppData\Local\Temp\BNZ.625e9650137f8fd8/img/sql\aop-datasource.png" alt="1555235982584"></p><h4 id="4-12-性能优化-应用优化"><a href="#4-12-性能优化-应用优化" class="headerlink" title="4.12 性能优化 - 应用优化"></a>4.12 性能优化 - 应用优化</h4><h5 id="4-12-1-缓存"><a href="#4-12-1-缓存" class="headerlink" title="4.12.1 缓存"></a>4.12.1 缓存</h5><p>可以在业务系统中使用redis来做缓存，缓存一些基础性的数据，来降低关系型数据库的压力，提高访问效率。</p><h5 id="4-12-2-全文检索"><a href="#4-12-2-全文检索" class="headerlink" title="4.12.2 全文检索"></a>4.12.2 全文检索</h5><p>如果业务系统中的数据量比较大（达到千万级别），这个时候，如果再对数据库进行查询，特别是进行分页查询，速度将变得很慢（因为在分页时首先需要count求合计数），为了提高访问效率，这个时候，可以考虑加入Solr 或者 ElasticSearch全文检索服务，来提高访问效率。</p><h5 id="4-13-3-非关系数据库"><a href="#4-13-3-非关系数据库" class="headerlink" title="4.13.3 非关系数据库"></a>4.13.3 非关系数据库</h5><p>也可以考虑将非核心（重要）数据，存在 MongoDB 中，这样可以提高插入以及查询的效率。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Mysql高级-day01&quot;&gt;&lt;a href=&quot;#Mysql高级-day01&quot; class=&quot;headerlink&quot; title=&quot;Mysql高级-day01&quot;&gt;&lt;/a&gt;Mysql高级-day01&lt;/h1&gt;&lt;h3 id=&quot;MySQL高级课程简介&quot;&gt;&lt;a href=</summary>
      
    
    
    
    <category term="SQL调优" scheme="http://example.com/categories/SQL%E8%B0%83%E4%BC%98/"/>
    
    
    <category term="Mysql" scheme="http://example.com/tags/Mysql/"/>
    
    <category term="sql调优" scheme="http://example.com/tags/sql%E8%B0%83%E4%BC%98/"/>
    
  </entry>
  
  <entry>
    <title>JVM</title>
    <link href="http://example.com/2022/03/26/JVM/"/>
    <id>http://example.com/2022/03/26/JVM/</id>
    <published>2022-03-26T03:21:25.000Z</published>
    <updated>2022-06-08T01:28:38.860Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h1><blockquote><p>引用博客: <a href="https://blog.csdn.net/weixin_50280576/article/details/113742011">https://blog.csdn.net/weixin_50280576/article/details/113742011</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="什么是JVM？"><a href="#什么是JVM？" class="headerlink" title="什么是JVM？"></a>什么是JVM？</h3><ol><li><p>定义：Java Vitual Machine，java程序的运行环境</p></li><li><p>好处：</p><ul><li>一次编译，处处执行</li><li>自动的内存管理，垃圾回收机制</li><li>数组下标越界检查</li></ul></li><li><p>比较（JVM、JRE、JDK）</p><p><img src="/img/JVM/compare.png" alt="img"></p></li></ol><h3 id="学习路线"><a href="#学习路线" class="headerlink" title="学习路线"></a>学习路线</h3><p><img src="/img/JVM/route.png" alt="img"></p><h4 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h4><ul><li>作用：用于保存JVM中下一条所要执行指令的地址</li><li>特点：<ul><li>线程私用：CPU会为每一个线程分配时间片，当当前线程的时间排尿使用完后，CPU就会去执行另一个代码，程序计数器是<code>每一个线程</code>所私有的，当另一个线程的时间片用完后，又回来执行当前线程的代码，通过程序计数器可以知道应该执行哪一句指令</li><li>不会存在内存溢出</li></ul></li></ul><h4 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h4><ul><li>定义：<ul><li>每个线程运行需要的内存空间，成为虚拟机栈</li><li>每个栈由多个<code>栈帧</code>组成，对应着每次调用方法时占用的内存</li><li>每个线程只有一个<code>活动栈帧</code>，对应着当前正在执行的方法</li></ul></li><li>问题辨析：<ul><li>垃圾回收是否涉及栈内存：<code>不需要</code>，因为虚拟机栈是由一个个栈帧组成的，在方法执行完毕后，栈帧会被自动弹出，所以无需通过垃圾回收机制处理</li><li>内存溢出：<code>java.lang.stackOverflowError</code> 栈内存溢出，1. 栈帧过多（无限递归）2. 每个栈帧所占用过大</li></ul></li></ul><h4 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h4><ul><li>一些带有navtive关键字的方法就是需要JAVA去调用本地的C和C++方法，有时候Java无法直接和操作系统底层交互，所以需要用到本地方法</li></ul><h4 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h4><ul><li><p>定义：通过new关键字<code>创建的对象</code>都会被放在堆内存</p></li><li><p>特点：</p><ul><li>所有线程共享，堆内存中的对象都需要考虑线程安全问题</li><li>有垃圾回收机制</li></ul></li><li><p>堆内存溢出：<code>java.lang.OutofMemoryError</code> ：java heap space. 堆内存溢出</p></li></ul><h4 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h4><ul><li>结构</li></ul><p>​<a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150547.png"><img src="/img/JVM/20200608150547.png" alt="img"></a></p><ul><li><p>内存溢出</p><ul><li>1.8以前会导致<strong>永久代</strong>内存溢出</li><li>1.8以后会导致<strong>元空间</strong>内存溢出</li></ul></li><li><p>常量池</p><p>二进制字节码的组成：类的基本信息、常量池、类的方法定义（包含了虚拟机指令）</p></li></ul><hr><p><strong>通过反编译来查看类的信息</strong></p><ul><li><p>获得对应类的.class文件</p><ul><li><p>在JDK对应的bin目录下运行cmd，<strong>也可以在IDEA控制台输入</strong></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150602.png"><img src="/img/JVM/20200608150602.png" alt="img"></a></p></li><li><p>输入 <strong>javac 对应类的绝对路径</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">F:\JAVA\JDK8.0\bin&gt;javac F:\Thread_study\src\com\nyima\JVM\day01\Main.javaCopy</span><br></pre></td></tr></table></figure><p>输入完成后，对应的目录下就会出现类的.class文件</p></li></ul></li><li><p>在控制台输入 javap -v 类的绝对路径</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javap -v F:\Thread_study\src\com\nyima\JVM\day01\Main.classCopy</span><br></pre></td></tr></table></figure></li><li><p>然后能在控制台看到反编译以后类的信息了</p><ul><li><p>类的基本信息</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150618.png"><img src="/img/JVM/20200608150618.png" alt="img"></a></p></li><li><p>常量池</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150630.png"><img src="/img/JVM/20200608150630.png" alt="img"></a></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150641.png"><img src="/img/JVM/20200608150641.png" alt="img"></a></p></li><li><p>虚拟机中执行编译的方法（框内的是真正编译执行的内容，**<code>#号的内容需要在常量池中查找</code>**）</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150653.png"><img src="/img/JVM/20200608150653.png" alt="img"></a></p></li></ul></li><li><p>运行时常量池</p><ul><li><p>常量池</p><p>就是一张表（如上图中的constant pool），虚拟机指令根据这张常量表找到要执行的类名、方法名、参数类型、字面量信息</p></li><li><p>运行时常量池</p><p>常量池是*.class文件中的，当该<code>类被加载以后</code>，它的常量池信息就会**<code>放入运行时常量池</code><strong>，并把里面的</strong><code>符号地址变为真实地址</code>**</p></li></ul></li></ul><hr><ul><li>常量池与串池的关系<ul><li>**<code>串池</code>**StringTable</li><li><strong><code>特征</code></strong><ul><li>常量池中的字符串仅是符号，只有**<code>在被用到时才会转化为对象</code>**</li><li>利用串池的机制，来避免重复创建字符串对象</li><li>字符串<strong>变量</strong>拼接的原理是<strong>StringBuilder</strong></li><li>字符串<strong>常量</strong>拼接的原理是<strong>编译器优化</strong></li><li>可以使用<strong>intern方法</strong>，主动将串池中还没有的字符串对象放入串池中</li><li><strong>注意</strong>：无论是串池还是堆里面的字符串，都是对象</li></ul></li></ul></li></ul><p>用来放字符串对象且里面的<strong>元素不重复</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class StringTableStudy &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">String a = &quot;a&quot;; </span><br><span class="line">String b = &quot;b&quot;;</span><br><span class="line">String ab = &quot;ab&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;Copy</span><br></pre></td></tr></table></figure><p>常量池中的信息，都会被加载到运行时常量池中，但这是a b ab 仅是常量池中的符号，<strong>还没有成为java字符串</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0: ldc           #2                  // String a</span><br><span class="line">2: astore_1</span><br><span class="line">3: ldc           #3                  // String b</span><br><span class="line">5: astore_2</span><br><span class="line">6: ldc           #4                  // String ab</span><br><span class="line">8: astore_3</span><br><span class="line">9: returnCopy</span><br></pre></td></tr></table></figure><p>当执行到 ldc #2 时，会把符号 a 变为 “a” 字符串对象，<strong>并放入串池中</strong>（hashtable结构 不可扩容）</p><p>当执行到 ldc #3 时，会把符号 b 变为 “b” 字符串对象，并放入串池中</p><p>当执行到 ldc #4 时，会把符号 ab 变为 “ab” 字符串对象，并放入串池中</p><p>最终<strong>StringTable [“a”, “b”, “ab”]</strong></p><p><strong>注意</strong>：字符串对象的创建都是<strong>懒惰的</strong>，只有当运行到那一行字符串且在串池中不存在的时候（如 ldc #2）时，该字符串才会被创建并放入串池中。</p><p>使用拼接<strong>字符串变量对象</strong>创建字符串的过程</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class StringTableStudy &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">String a = &quot;a&quot;;</span><br><span class="line">String b = &quot;b&quot;;</span><br><span class="line">String ab = &quot;ab&quot;;</span><br><span class="line">//拼接字符串对象来创建新的字符串</span><br><span class="line">String ab2 = a+b; </span><br><span class="line">&#125;</span><br><span class="line">&#125;Copy</span><br></pre></td></tr></table></figure><p>反编译后的结果</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> Code:</span><br><span class="line">      stack=2, locals=5, args_size=1</span><br><span class="line">         0: ldc           #2                  // String a</span><br><span class="line">         2: astore_1</span><br><span class="line">         3: ldc           #3                  // String b</span><br><span class="line">         5: astore_2</span><br><span class="line">         6: ldc           #4                  // String ab</span><br><span class="line">         8: astore_3</span><br><span class="line">         9: new           #5                  // class java/lang/StringBuilder</span><br><span class="line">        12: dup</span><br><span class="line">        13: invokespecial #6                  // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">        16: aload_1</span><br><span class="line">        17: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String</span><br><span class="line">;)Ljava/lang/StringBuilder;</span><br><span class="line">        20: aload_2</span><br><span class="line">        21: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String</span><br><span class="line">;)Ljava/lang/StringBuilder;</span><br><span class="line">        24: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/Str</span><br><span class="line">ing;</span><br><span class="line">        27: astore        4</span><br><span class="line">        29: returnCopy</span><br></pre></td></tr></table></figure><p>通过拼接的方式来创建字符串的<strong>过程</strong>是：StringBuilder().append(“a”).append(“b”).toString()</p><p>最后的toString方法的返回值是一个<strong>新的字符串</strong>，但字符串的<strong>值</strong>和拼接的字符串一致，但是两个不同的字符串，<strong>一个存在于串池之中，一个存在于堆内存之中</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String ab = &quot;ab&quot;;</span><br><span class="line">String ab2 = a+b;</span><br><span class="line">//结果为false,因为ab是存在于串池之中，ab2是由StringBuffer的toString方法所返回的一个对象，存在于堆内存之中</span><br><span class="line">System.out.println(ab == ab2);Copy</span><br></pre></td></tr></table></figure><p>使用<strong>拼接字符串常量对象</strong>的方法创建字符串</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class StringTableStudy &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">String a = &quot;a&quot;;</span><br><span class="line">String b = &quot;b&quot;;</span><br><span class="line">String ab = &quot;ab&quot;;</span><br><span class="line">String ab2 = a+b;</span><br><span class="line">//使用拼接字符串的方法创建字符串</span><br><span class="line">String ab3 = &quot;a&quot; + &quot;b&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;Copy</span><br></pre></td></tr></table></figure><p>反编译后的结果</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">   Code:</span><br><span class="line">      stack=2, locals=6, args_size=1</span><br><span class="line">         0: ldc           #2                  // String a</span><br><span class="line">         2: astore_1</span><br><span class="line">         3: ldc           #3                  // String b</span><br><span class="line">         5: astore_2</span><br><span class="line">         6: ldc           #4                  // String ab</span><br><span class="line">         8: astore_3</span><br><span class="line">         9: new           #5                  // class java/lang/StringBuilder</span><br><span class="line">        12: dup</span><br><span class="line">        13: invokespecial #6                  // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">        16: aload_1</span><br><span class="line">        17: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String</span><br><span class="line">;)Ljava/lang/StringBuilder;</span><br><span class="line">        20: aload_2</span><br><span class="line">        21: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String</span><br><span class="line">;)Ljava/lang/StringBuilder;</span><br><span class="line">        24: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/Str</span><br><span class="line">ing;</span><br><span class="line">        27: astore        4</span><br><span class="line">        //ab3初始化时直接从串池中获取字符串</span><br><span class="line">        29: ldc           #4                  // String ab</span><br><span class="line">        31: astore        5</span><br><span class="line">        33: returnCopy</span><br></pre></td></tr></table></figure><ul><li>使用<strong>拼接字符串常量</strong>的方法来创建新的字符串时，因为<strong>内容是常量，javac在编译期会进行优化，结果已在编译期确定为ab</strong>，而创建ab的时候已经在串池中放入了“ab”，所以ab3直接从串池中获取值，所以进行的操作和 ab &#x3D; “ab” 一致。</li><li>使用<strong>拼接字符串变量</strong>的方法来创建新的字符串时，因为内容是变量，只能<strong>在运行期确定它的值，所以需要使用StringBuilder来创建</strong></li></ul><h5 id="intern方法-1-8"><a href="#intern方法-1-8" class="headerlink" title="intern方法 1.8"></a>intern方法 1.8</h5><p>调用字符串对象的intern方法，会将该字符串对象尝试放入到串池中</p><ul><li>如果串池中没有该字符串对象，则放入成功</li><li>如果有该字符串对象，则放入失败</li></ul><p>无论放入是否成功，都会返回<strong>串池中</strong>的字符串对象</p><p><strong>注意</strong>：此时如果调用intern方法成功，堆内存与串池中的字符串对象是同一个对象；如果失败，则不是同一个对象</p><p><strong>例1</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">//&quot;a&quot; &quot;b&quot; 被放入串池中，str则存在于堆内存之中</span><br><span class="line">String str = new String(&quot;a&quot;) + new String(&quot;b&quot;);</span><br><span class="line">//调用str的intern方法，这时串池中没有&quot;ab&quot;，则会将该字符串对象放入到串池中，此时堆内存与串池中的&quot;ab&quot;是同一个对象</span><br><span class="line">String st2 = str.intern();</span><br><span class="line">//给str3赋值，因为此时串池中已有&quot;ab&quot;，则直接将串池中的内容返回</span><br><span class="line">String str3 = &quot;ab&quot;;</span><br><span class="line">//因为堆内存与串池中的&quot;ab&quot;是同一个对象，所以以下两条语句打印的都为true</span><br><span class="line">System.out.println(str == st2);</span><br><span class="line">System.out.println(str == str3);</span><br><span class="line">&#125;</span><br><span class="line">&#125;Copy</span><br></pre></td></tr></table></figure><p><strong>例2</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Main &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        //此处创建字符串对象&quot;ab&quot;，因为串池中还没有&quot;ab&quot;，所以将其放入串池中</span><br><span class="line">String str3 = &quot;ab&quot;;</span><br><span class="line">        //&quot;a&quot; &quot;b&quot; 被放入串池中，str则存在于堆内存之中</span><br><span class="line">String str = new String(&quot;a&quot;) + new String(&quot;b&quot;);</span><br><span class="line">        //此时因为在创建str3时，&quot;ab&quot;已存在与串池中，所以放入失败，但是会返回串池中的&quot;ab&quot;</span><br><span class="line">String str2 = str.intern();</span><br><span class="line">        //false</span><br><span class="line">System.out.println(str == str2);</span><br><span class="line">        //false</span><br><span class="line">System.out.println(str == str3);</span><br><span class="line">        //true</span><br><span class="line">System.out.println(str2 == str3);</span><br><span class="line">&#125;</span><br><span class="line">&#125;Copy</span><br></pre></td></tr></table></figure><h5 id="intern方法-1-6"><a href="#intern方法-1-6" class="headerlink" title="intern方法 1.6"></a>intern方法 1.6</h5><p>调用字符串对象的intern方法，会将该字符串对象尝试放入到串池中</p><ul><li>如果串池中没有该字符串对象，会将该字符串对象复制一份，再放入到串池中</li><li>如果有该字符串对象，则放入失败</li></ul><p>无论放入是否成功，都会返回<strong>串池中</strong>的字符串对象</p><p><strong>注意</strong>：此时无论调用intern方法成功与否，串池中的字符串对象和堆内存中的字符串对象<strong>都不是同一个对象</strong></p><h4 id="StringTable-垃圾回收"><a href="#StringTable-垃圾回收" class="headerlink" title="StringTable 垃圾回收"></a>StringTable 垃圾回收</h4><p>StringTable在内存紧张时，会发生垃圾回收</p><h4 id="StringTable调优"><a href="#StringTable调优" class="headerlink" title="StringTable调优"></a>StringTable调优</h4><ul><li><p>因为StringTable是由HashTable实现的，所以可以<strong>适当增加HashTable桶的个数</strong>，来减少字符串放入串池所需要的时间</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-XX:StringTableSize=xxxxCopy</span><br></pre></td></tr></table></figure></li><li><p>考虑是否需要将字符串对象入池</p><p>可以通过<strong>intern方法减少重复入池</strong></p></li></ul><h4 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h4><ul><li>属于操作系统，常见于NIO操作时，<strong>用于数据缓冲区</strong></li><li>分配回收成本较高，但读写性能高</li><li>不受JVM内存回收管理</li></ul><h4 id="文件读写流程"><a href="#文件读写流程" class="headerlink" title="文件读写流程"></a>文件读写流程</h4><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150715.png"><img src="/img/JVM/20200608150715.png" alt="img"></a></p><p><strong>使用了DirectBuffer</strong></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150736.png"><img src="/img/JVM/20200608150736.png" alt="img"></a></p><p>直接内存是操作系统和Java代码<strong>都可以访问的一块区域</strong>，无需将代码从系统内存复制到Java堆内存，从而提高了效率</p><h4 id="释放原理"><a href="#释放原理" class="headerlink" title="释放原理"></a>释放原理</h4><p>直接内存的回收不是通过JVM的垃圾回收来释放的，而是通过<strong>unsafe.freeMemory</strong>来手动释放</p><p>通过</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//通过ByteBuffer申请1M的直接内存</span><br><span class="line">ByteBuffer byteBuffer = ByteBuffer.allocateDirect(_1M);Copy</span><br></pre></td></tr></table></figure><p>申请直接内存，但JVM并不能回收直接内存中的内容，它是如何实现回收的呢？</p><p><strong>allocateDirect的实现</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static ByteBuffer allocateDirect(int capacity) &#123;</span><br><span class="line">    return new DirectByteBuffer(capacity);</span><br><span class="line">&#125;Copy</span><br></pre></td></tr></table></figure><p>DirectByteBuffer类</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DirectByteBuffer(int cap) &#123;   // package-private</span><br><span class="line">   </span><br><span class="line">    super(-1, 0, cap, cap);</span><br><span class="line">    boolean pa = VM.isDirectMemoryPageAligned();</span><br><span class="line">    int ps = Bits.pageSize();</span><br><span class="line">    long size = Math.max(1L, (long)cap + (pa ? ps : 0));</span><br><span class="line">    Bits.reserveMemory(size, cap);</span><br><span class="line"></span><br><span class="line">    long base = 0;</span><br><span class="line">    try &#123;</span><br><span class="line">        base = unsafe.allocateMemory(size); //申请内存</span><br><span class="line">    &#125; catch (OutOfMemoryError x) &#123;</span><br><span class="line">        Bits.unreserveMemory(size, cap);</span><br><span class="line">        throw x;</span><br><span class="line">    &#125;</span><br><span class="line">    unsafe.setMemory(base, size, (byte) 0);</span><br><span class="line">    if (pa &amp;&amp; (base % ps != 0)) &#123;</span><br><span class="line">        // Round up to page boundary</span><br><span class="line">        address = base + ps - (base &amp; (ps - 1));</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        address = base;</span><br><span class="line">    &#125;</span><br><span class="line">    cleaner = Cleaner.create(this, new Deallocator(base, size, cap)); //通过虚引用，来实现直接内存的释放，this为虚引用的实际对象</span><br><span class="line">    att = null;</span><br><span class="line">&#125;Copy</span><br></pre></td></tr></table></figure><p>这里调用了一个Cleaner的create方法，且后台线程还会对虚引用的对象监测，如果虚引用的实际对象（这里是DirectByteBuffer）被回收以后，就会调用Cleaner的clean方法，来清除直接内存中占用的内存</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void clean() &#123;</span><br><span class="line">       if (remove(this)) &#123;</span><br><span class="line">           try &#123;</span><br><span class="line">               this.thunk.run(); //调用run方法</span><br><span class="line">           &#125; catch (final Throwable var2) &#123;</span><br><span class="line">               AccessController.doPrivileged(new PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class="line">                   public Void run() &#123;</span><br><span class="line">                       if (System.err != null) &#123;</span><br><span class="line">                           (new Error(&quot;Cleaner terminated abnormally&quot;, var2)).printStackTrace();</span><br><span class="line">                       &#125;</span><br><span class="line"></span><br><span class="line">                       System.exit(1);</span><br><span class="line">                       return null;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;);</span><br><span class="line">           &#125;Copy</span><br></pre></td></tr></table></figure><p>对应对象的run方法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void run() &#123;</span><br><span class="line">    if (address == 0) &#123;</span><br><span class="line">        // Paranoia</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    unsafe.freeMemory(address); //释放直接内存中占用的内存</span><br><span class="line">    address = 0;</span><br><span class="line">    Bits.unreserveMemory(size, capacity);</span><br><span class="line">&#125;Copy</span><br></pre></td></tr></table></figure><h5 id="直接内存的回收机制总结"><a href="#直接内存的回收机制总结" class="headerlink" title="直接内存的回收机制总结"></a>直接内存的回收机制总结</h5><ul><li>使用了Unsafe类来完成直接内存的分配回收，回收需要主动调用freeMemory方法</li><li>ByteBuffer的实现内部使用了Cleaner（虚引用）来检测ByteBuffer。一旦ByteBuffer被垃圾回收，那么会由ReferenceHandler来调用Cleaner的clean方法调用freeMemory来释放内存</li></ul><h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2><h3 id="如何判断对象可以回收"><a href="#如何判断对象可以回收" class="headerlink" title="如何判断对象可以回收"></a>如何判断对象可以回收</h3><h4 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h4><p>弊端：循环引用时，两个对象的计数都为1，导致两个对象都无法被释放</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150750.png"><img src="/img/JVM/20200608150750.png" alt="img"></a></p><h4 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h4><ul><li>JVM中的垃圾回收器通过<strong>可达性分析</strong>来探索所有存活的对象</li><li>扫描堆中的对象，看能否沿着GC Root对象为起点的引用链找到该对象，如果<strong>找不到，则表示可以回收</strong></li><li>可以作为GC Root的对象<ul><li>虚拟机栈（栈帧中的本地变量表）中引用的对象。　</li><li>方法区中类静态属性引用的对象</li><li>方法区中常量引用的对象</li><li>本地方法栈中JNI（即一般说的Native方法）引用的对象</li></ul></li></ul><h4 id="五种引用"><a href="#五种引用" class="headerlink" title="五种引用"></a>五种引用</h4><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150800.png"><img src="/img/JVM/20200608150800.png" alt="img"></a></p><h5 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h5><p>只有GC Root<strong>都不引用</strong>该对象时，才会回收<strong>强引用</strong>对象</p><ul><li>如上图B、C对象都不引用A1对象时，A1对象才会被回收</li></ul><h5 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h5><p>当GC Root指向软引用对象时，在<strong>内存不足时</strong>，会<strong>回收软引用所引用的对象</strong></p><ul><li>如上图如果B对象不再引用A2对象且内存不足时，软引用所引用的A2对象就会被回收</li></ul><h6 id="软引用的使用"><a href="#软引用的使用" class="headerlink" title="软引用的使用"></a>软引用的使用</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Demo1 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">final int _4M = 4*1024*1024;</span><br><span class="line">//使用软引用对象 list和SoftReference是强引用，而SoftReference和byte数组则是软引用</span><br><span class="line">List&lt;SoftReference&lt;byte[]&gt;&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">SoftReference&lt;byte[]&gt; ref= new SoftReference&lt;&gt;(new byte[_4M]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;Copy</span><br></pre></td></tr></table></figure><p>如果在垃圾回收时发现内存不足，在回收软引用所指向的对象时，<strong>软引用本身不会被清理</strong></p><p>如果想要<strong>清理软引用</strong>，需要使<strong>用引用队列</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Demo1 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">final int _4M = 4*1024*1024;</span><br><span class="line">//使用引用队列，用于移除引用为空的软引用对象</span><br><span class="line">ReferenceQueue&lt;byte[]&gt; queue = new ReferenceQueue&lt;&gt;();</span><br><span class="line">//使用软引用对象 list和SoftReference是强引用，而SoftReference和byte数组则是软引用</span><br><span class="line">List&lt;SoftReference&lt;byte[]&gt;&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">SoftReference&lt;byte[]&gt; ref= new SoftReference&lt;&gt;(new byte[_4M]);</span><br><span class="line"></span><br><span class="line">//遍历引用队列，如果有元素，则移除</span><br><span class="line">Reference&lt;? extends byte[]&gt; poll = queue.poll();</span><br><span class="line">while(poll != null) &#123;</span><br><span class="line">//引用队列不为空，则从集合中移除该元素</span><br><span class="line">list.remove(poll);</span><br><span class="line">//移动到引用队列中的下一个元素</span><br><span class="line">poll = queue.poll();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;Copy</span><br></pre></td></tr></table></figure><p><strong>大概思路为：</strong>查看引用队列中有无软引用，如果有，则将该软引用从存放它的集合中移除（这里为一个list集合）</p><h5 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h5><p>只有弱引用引用该对象时，在垃圾回收时，<strong>无论内存是否充足</strong>，都会回收弱引用所引用的对象</p><ul><li>如上图如果B对象不再引用A3对象，则A3对象会被回收</li></ul><p><strong>弱引用的使用和软引用类似</strong>，只是将 <strong>SoftReference 换为了 WeakReference</strong></p><h5 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a><strong>虚引用</strong></h5><p>当虚引用对象所引用的对象被回收以后，虚引用对象就会被放入引用队列中，调用虚引用的方法</p><ul><li>虚引用的一个体现是<strong>释放直接内存所分配的内存</strong>，当引用的对象ByteBuffer被垃圾回收以后，虚引用对象Cleaner就会被放入引用队列中，然后调用Cleaner的clean方法来释放直接内存</li><li>如上图，B对象不再引用ByteBuffer对象，ByteBuffer就会被回收。但是直接内存中的内存还未被回收。这时需要将虚引用对象Cleaner放入引用队列中，然后调用它的clean方法来释放直接内存</li></ul><h5 id="终结器引用"><a href="#终结器引用" class="headerlink" title="终结器引用"></a>终结器引用</h5><p>所有的类都继承自Object类，Object类有一个finalize方法。当某个对象不再被其他的对象所引用时，会先将终结器引用对象放入引用队列中，然后根据终结器引用对象找到它所引用的对象，然后调用该对象的finalize方法。调用以后，该对象就可以被垃圾回收了</p><ul><li>如上图，B对象不再引用A4对象。这是终结器对象就会被放入引用队列中，引用队列会根据它，找到它所引用的对象。然后调用被引用对象的finalize方法。调用以后，该对象就可以被垃圾回收了</li></ul><h5 id="引用队列"><a href="#引用队列" class="headerlink" title="引用队列"></a>引用队列</h5><ul><li>软引用和弱引用<strong>可以配合</strong>引用队列<ul><li>在<strong>弱引用</strong>和<strong>虚引用</strong>所引用的对象被回收以后，会将这些引用放入引用队列中，方便一起回收这些软&#x2F;弱引用对象</li></ul></li><li>虚引用和终结器引用<strong>必须配合</strong>引用队列<ul><li>虚引用和终结器引用在使用时会关联一个引用队列</li></ul></li></ul><h3 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h3><h4 id="标记-清除"><a href="#标记-清除" class="headerlink" title="标记-清除"></a>标记-清除</h4><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150813.png"><img src="/img/JVM/20200608150813.png" alt="img"></a></p><p><strong>定义</strong>：标记清除算法顾名思义，是指在虚拟机执行垃圾回收的过程中，先采用标记算法确定可回收对象，然后垃圾收集器根据标识清除相应的内容，给堆内存腾出相应的空间</p><ul><li>这里的腾出内存空间并不是将内存空间的字节清0，而是记录下这段内存的起始结束地址，下次分配内存的时候，会直接<strong>覆盖</strong>这段内存</li></ul><p><strong>缺点</strong>：<strong>容易产生大量的内存碎片</strong>，可能无法满足大对象的内存分配，一旦导致无法分配对象，那就会导致jvm启动gc，一旦启动gc，我们的应用程序就会暂停，这就导致应用的响应速度变慢</p><h4 id="标记-整理"><a href="#标记-整理" class="headerlink" title="标记-整理"></a>标记-整理</h4><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150827.png"><img src="/img/JVM/20200608150827.png" alt="img"></a></p><p>标记-整理 会将不被GC Root引用的对象回收，清楚其占用的内存空间。然后整理剩余的对象，可以有效避免因内存碎片而导致的问题，但是因为整体需要消耗一定的时间，所以效率较低</p><h4 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h4><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150842.png"><img src="/img/JVM/20200608150842.png" alt="img"></a></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150856.png"><img src="/img/JVM/20200608150856.png" alt="img"></a></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150907.png"><img src="/img/JVM/20200608150907.png" alt="img"></a></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150919.png"><img src="/img/JVM/20200608150919.png" alt="img"></a></p><p>将内存分为等大小的两个区域，FROM和TO（TO中为空）。先将被GC Root引用的对象从FROM放入TO中，再回收不被GC Root引用的对象。然后交换FROM和TO。这样也可以避免内存碎片的问题，但是会占用双倍的内存空间。</p><h3 id="分代回收"><a href="#分代回收" class="headerlink" title="分代回收"></a>分代回收</h3><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150931.png"><img src="/img/JVM/20200608150931.png" alt="img"></a></p><h4 id="回收流程"><a href="#回收流程" class="headerlink" title="回收流程"></a>回收流程</h4><p>新创建的对象都被放在了<strong>新生代的伊甸园</strong>中</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150939.png"><img src="/img/JVM/20200608150939.png" alt="img"></a></p><p>当伊甸园中的内存不足时，就会进行一次垃圾回收，这时的回收叫做 <strong>Minor GC</strong></p><p>Minor GC 会将<strong>伊甸园和幸存区FROM</strong>存活的对象<strong>先</strong>复制到 <strong>幸存区 TO</strong>中， 并让其<strong>寿命加1</strong>，再<strong>交换两个幸存区</strong></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150946.png"><img src="/img/JVM/20200608150946.png" alt="img"></a></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150955.png"><img src="/img/JVM/20200608150955.png" alt="img"></a></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151002.png"><img src="/img/JVM/20200608151002.png" alt="img"></a></p><p>再次创建对象，若新生代的伊甸园又满了，则会<strong>再次触发 Minor GC</strong>（会触发 <strong>stop the world</strong>， 暂停其他用户线程，只让垃圾回收线程工作），这时不仅会回收伊甸园中的垃圾，<strong>还会回收幸存区中的垃圾</strong>，再将活跃对象复制到幸存区TO中。回收以后会交换两个幸存区，并让幸存区中的对象<strong>寿命加1</strong></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151010.png"><img src="/img/JVM/20200608151010.png" alt="img"></a></p><p>如果幸存区中的对象的<strong>寿命超过某个阈值</strong>（最大为15，4bit），就会被<strong>放入老年代</strong>中</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151018.png"><img src="/img/JVM/20200608151018.png" alt="img"></a></p><p>如果新生代老年代中的内存都满了，就会先触发Minor GC，再触发<strong>Full GC</strong>，扫描<strong>新生代和老年代中</strong>所有不再使用的对象并回收</p><h4 id="GC-分析"><a href="#GC-分析" class="headerlink" title="GC 分析"></a>GC 分析</h4><h5 id="大对象处理策略"><a href="#大对象处理策略" class="headerlink" title="大对象处理策略"></a>大对象处理策略</h5><p>当遇到一个<strong>较大的对象</strong>时，就算新生代的<strong>伊甸园</strong>为空，也<strong>无法容纳该对象</strong>时，会将该对象<strong>直接晋升为老年代</strong></p><h5 id="线程内存溢出"><a href="#线程内存溢出" class="headerlink" title="线程内存溢出"></a>线程内存溢出</h5><p>某个线程的内存溢出了而抛异常（out of memory），不会让其他的线程结束运行</p><p>这是因为当一个线程<strong>抛出OOM异常后</strong>，<strong>它所占据的内存资源会全部被释放掉</strong>，从而不会影响其他线程的运行，<strong>进程依然正常</strong></p><h3 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h3><h4 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h4><p><strong>并行收集</strong>：指多条垃圾收集线程并行工作，但此时<strong>用户线程仍处于等待状态</strong>。</p><p><strong>并发收集</strong>：指用户线程与垃圾收集线程<strong>同时工作</strong>（不一定是并行的可能会交替执行）。<strong>用户程序在继续运行</strong>，而垃圾收集程序运行在另一个CPU上</p><p><strong>吞吐量</strong>：即CPU用于<strong>运行用户代码的时间</strong>与CPU<strong>总消耗时间</strong>的比值（吞吐量 &#x3D; 运行用户代码时间 &#x2F; ( 运行用户代码时间 + 垃圾收集时间 )），也就是。例如：虚拟机共运行100分钟，垃圾收集器花掉1分钟，那么吞吐量就是99%</p><h4 id="串行"><a href="#串行" class="headerlink" title="串行"></a>串行</h4><ul><li>单线程</li><li>内存较小，个人电脑（CPU核数较少）</li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151027.png"><img src="/img/JVM/20200608151027.png" alt="img"></a></p><p><strong>安全点</strong>：让其他线程都在这个点停下来，以免垃圾回收时移动对象地址，使得其他线程找不到被移动的对象</p><p>因为是串行的，所以只有一个垃圾回收线程。且在该线程执行回收工作时，其他线程进入<strong>阻塞</strong>状态</p><h5 id="Serial-收集器"><a href="#Serial-收集器" class="headerlink" title="Serial 收集器"></a>Serial 收集器</h5><p>Serial收集器是最基本的、发展历史最悠久的收集器</p><p><strong>特点：</strong>单线程、简单高效（与其他收集器的单线程相比），采用<strong>复制算法</strong>。对于限定单个CPU的环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程手机效率。收集器进行垃圾回收时，必须暂停其他所有的工作线程，直到它结束（Stop The World）</p><h5 id="ParNew-收集器"><a href="#ParNew-收集器" class="headerlink" title="ParNew 收集器"></a>ParNew 收集器</h5><p>ParNew收集器其实就是Serial收集器的多线程版本</p><p><strong>特点</strong>：多线程、ParNew收集器默认开启的收集线程数与CPU的数量相同，在CPU非常多的环境中，可以使用-XX:ParallelGCThreads参数来限制垃圾收集的线程数。和Serial收集器一样存在Stop The World问题</p><h5 id="Serial-Old-收集器"><a href="#Serial-Old-收集器" class="headerlink" title="Serial Old 收集器"></a>Serial Old 收集器</h5><p>Serial Old是Serial收集器的老年代版本</p><p><strong>特点</strong>：同样是单线程收集器，采用<strong>标记-整理算法</strong></p><h4 id="吞吐量优先"><a href="#吞吐量优先" class="headerlink" title="吞吐量优先"></a>吞吐量优先</h4><ul><li>多线程</li><li>堆内存较大，多核CPU</li><li>单位时间内，STW（stop the world，停掉其他所有工作线程）时间最短</li><li><strong>JDK1.8默认使用</strong>的垃圾回收器</li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151039.png"><img src="/img/JVM/20200608151039.png" alt="img"></a></p><h5 id="Parallel-Scavenge-收集器"><a href="#Parallel-Scavenge-收集器" class="headerlink" title="Parallel Scavenge 收集器"></a>Parallel Scavenge 收集器</h5><p>与吞吐量关系密切，故也称为吞吐量优先收集器</p><p><strong>特点</strong>：属于新生代收集器也是采用<strong>复制算法</strong>的收集器（用到了新生代的幸存区），又是并行的多线程收集器（与ParNew收集器类似）</p><p>该收集器的目标是达到一个可控制的吞吐量。还有一个值得关注的点是：<strong>GC自适应调节策略</strong>（与ParNew收集器最重要的一个区别）</p><p><strong>GC自适应调节策略</strong>：Parallel Scavenge收集器可设置-XX:+UseAdptiveSizePolicy参数。当开关打开时<strong>不需要</strong>手动指定新生代的大小（-Xmn）、Eden与Survivor区的比例（-XX:SurvivorRation）、晋升老年代的对象年龄（-XX:PretenureSizeThreshold）等，虚拟机会根据系统的运行状况收集性能监控信息，动态设置这些参数以提供最优的停顿时间和最高的吞吐量，这种调节方式称为GC的自适应调节策略。</p><p>Parallel Scavenge收集器使用两个参数控制吞吐量：</p><ul><li>XX:MaxGCPauseMillis 控制最大的垃圾收集停顿时间</li><li>XX:GCRatio 直接设置吞吐量的大小</li></ul><h5 id="Parallel-Old-收集器"><a href="#Parallel-Old-收集器" class="headerlink" title="Parallel Old 收集器"></a><strong>Parallel Old 收集器</strong></h5><p>是Parallel Scavenge收集器的老年代版本</p><p><strong>特点</strong>：多线程，采用<strong>标记-整理算法</strong>（老年代没有幸存区）</p><h4 id="响应时间优先"><a href="#响应时间优先" class="headerlink" title="响应时间优先"></a>响应时间优先</h4><ul><li>多线程</li><li>堆内存较大，多核CPU</li><li>尽可能让单次STW时间变短（尽量不影响其他线程运行）</li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151052.png"><img src="/img/JVM/20200608151052.png" alt="img"></a></p><h5 id="CMS-收集器"><a href="#CMS-收集器" class="headerlink" title="CMS 收集器"></a>CMS 收集器</h5><p>Concurrent Mark Sweep，一种以获取<strong>最短回收停顿时间</strong>为目标的<strong>老年代</strong>收集器</p><p><strong>特点</strong>：基于<strong>标记-清除算法</strong>实现。并发收集、低停顿，但是会产生内存碎片</p><p><strong>应用场景</strong>：适用于注重服务的响应速度，希望系统停顿时间最短，给用户带来更好的体验等场景下。如web程序、b&#x2F;s服务</p><p><strong>CMS收集器的运行过程分为下列4步：</strong></p><p><strong>初始标记</strong>：标记GC Roots能直接到的对象。速度很快但是<strong>仍存在Stop The World问题</strong></p><p><strong>并发标记</strong>：进行GC Roots Tracing 的过程，找出存活对象且用户线程可并发执行</p><p><strong>重新标记</strong>：为了<strong>修正并发标记期间</strong>因用户程序继续运行而导致标记产生变动的那一部分对象的标记记录。仍然存在Stop The World问题</p><p><strong>并发清除</strong>：对标记的对象进行清除回收</p><p>CMS收集器的内存回收过程是与用户线程一起<strong>并发执行</strong>的</p><h4 id="G1（吞吐量和响应时间）"><a href="#G1（吞吐量和响应时间）" class="headerlink" title="G1（吞吐量和响应时间）"></a>G1（吞吐量和响应时间）</h4><h5 id="定义："><a href="#定义：" class="headerlink" title="定义："></a><strong>定义</strong>：</h5><p>Garbage First</p><p>JDK 9以后默认使用，而且替代了CMS 收集器</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200909201212.png"><img src="/img/JVM/20200909201212.png" alt="img"></a></p><h5 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h5><ul><li>同时注重吞吐量和低延迟（响应时间）</li><li>超大堆内存（内存大的），会将堆内存划分为多个<strong>大小相等</strong>的区域</li><li>整体上是<strong>标记-整理</strong>算法，两个区域之间是<strong>复制</strong>算法</li></ul><p><strong>相关参数</strong>：JDK8 并不是默认开启的，所需要参数开启</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151100.png"><img src="/img/JVM/20200608151100.png" alt="img"></a></p><h5 id="G1垃圾回收阶段"><a href="#G1垃圾回收阶段" class="headerlink" title="G1垃圾回收阶段"></a>G1垃圾回收阶段</h5><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151109.png"><img src="/img/JVM/20200608151109.png" alt="img"></a></p><p>新生代伊甸园垃圾回收—–&gt;内存不足，新生代回收+并发标记—–&gt;回收新生代伊甸园、幸存区、老年代内存——&gt;新生代伊甸园垃圾回收(重新开始)</p><h5 id="Young-Collection"><a href="#Young-Collection" class="headerlink" title="Young Collection"></a>Young Collection</h5><p><strong>分区算法region</strong></p><p>分代是按对象的生命周期划分，分区则是将堆空间划分连续几个不同小区间，每一个小区间独立回收，可以控制一次回收多少个小区间，方便控制 GC 产生的停顿时间</p><p>E：伊甸园 S：幸存区 O：老年代</p><ul><li>会STW</li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151119.png"><img src="/img/JVM/20200608151119.png" alt="img"></a></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151129.png"><img src="/img/JVM/20200608151129.png" alt="img"></a></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151140.png"><img src="/img/JVM/20200608151140.png" alt="img"></a></p><h5 id="Young-Collection-CM"><a href="#Young-Collection-CM" class="headerlink" title="Young Collection + CM"></a>Young Collection + CM</h5><p>CM：并发标记</p><ul><li>在老年代<strong>占用堆内存的比例</strong>达到阈值时，对进行并发标记（不会STW），阈值可以根据用户来进行设定</li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151150.png"><img src="/img/JVM/20200608151150.png" alt="img"></a></p><h5 id="Mixed-Collection"><a href="#Mixed-Collection" class="headerlink" title="Mixed Collection"></a>Mixed Collection</h5><p>会对E S O 进行<strong>全面的回收</strong></p><ul><li>最终标记</li><li><strong>拷贝</strong>存活</li></ul><p>-XX:MaxGCPauseMills:xxx 用于指定最长的停顿时间</p><p><strong>问</strong>：为什么有的老年代被拷贝了，有的没拷贝？</p><p>因为指定了最大停顿时间，如果对所有老年代都进行回收，耗时可能过高。为了保证时间不超过设定的停顿时间，会<strong>回收最有价值的老年代</strong>（回收后，能够得到更多内存）</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151201.png"><img src="/img/JVM/20200608151201.png" alt="img"></a></p><h5 id="Full-GC"><a href="#Full-GC" class="headerlink" title="Full GC"></a>Full GC</h5><p>G1在老年代内存不足时（老年代所占内存超过阈值）</p><ul><li>如果垃圾产生速度慢于垃圾回收速度，不会触发Full GC，还是并发地进行清理</li><li>如果垃圾产生速度快于垃圾回收速度，便会触发Full GC</li></ul><h5 id="Young-Collection-跨代引用"><a href="#Young-Collection-跨代引用" class="headerlink" title="Young Collection 跨代引用"></a>Young Collection 跨代引用</h5><ul><li>新生代回收的跨代引用（老年代引用新生代）问题</li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151211.png"><img src="/img/JVM/20200608151211.png" alt="img"></a></p><ul><li>卡表与Remembered Set<ul><li>Remembered Set 存在于E中，用于保存新生代对象对应的脏卡<ul><li>脏卡：O被划分为多个区域（一个区域512K），如果该区域引用了新生代对象，则该区域被称为脏卡</li></ul></li></ul></li><li>在引用变更时通过post-write barried + dirty card queue</li><li>concurrent refinement threads 更新 Remembered Set</li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151222.png"><img src="/img/JVM/20200608151222.png" alt="img"></a></p><h5 id="Remark"><a href="#Remark" class="headerlink" title="Remark"></a>Remark</h5><p>重新标记阶段</p><p>在垃圾回收时，收集器处理对象的过程中</p><p>黑色：已被处理，需要保留的 灰色：正在处理中的 白色：还未处理的</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151229.png"><img src="/img/JVM/20200608151229.png" alt="img"></a></p><p>但是在<strong>并发标记过程中</strong>，有可能A被处理了以后未引用C，但该处理过程还未结束，在处理过程结束之前A引用了C，这时就会用到remark</p><p>过程如下</p><ul><li>之前C未被引用，这时A引用了C，就会给C加一个写屏障，写屏障的指令会被执行，将C放入一个队列当中，并将C变为 处理中 状态</li><li>在<strong>并发标记</strong>阶段结束以后，重新标记阶段会STW，然后将放在该队列中的对象重新处理，发现有强引用引用它，就会处理它</li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151239.png"><img src="/img/JVM/20200608151239.png" alt="img"></a></p><h5 id="JDK-8u20-字符串去重"><a href="#JDK-8u20-字符串去重" class="headerlink" title="JDK 8u20 字符串去重"></a>JDK 8u20 字符串去重</h5><p>过程</p><ul><li>将所有新分配的字符串（底层是char[]）放入一个队列</li><li>当新生代回收时，G1并发检查是否有重复的字符串</li><li>如果字符串的值一样，就让他们<strong>引用同一个字符串对象</strong></li><li>注意，其与String.intern的区别<ul><li>intern关注的是字符串对象</li><li>字符串去重关注的是char[]</li><li>在JVM内部，使用了不同的字符串标</li></ul></li></ul><p>优点与缺点</p><ul><li>节省了大量内存</li><li>新生代回收时间略微增加，导致略微多占用CPU</li></ul><h5 id="JDK-8u40-并发标记类卸载"><a href="#JDK-8u40-并发标记类卸载" class="headerlink" title="JDK 8u40 并发标记类卸载"></a>JDK 8u40 并发标记类卸载</h5><p>在并发标记阶段结束以后，就能知道哪些类不再被使用。如果一个类加载器的所有类都不在使用，则卸载它所加载的所有类</p><h5 id="JDK-8u60-回收巨型对象"><a href="#JDK-8u60-回收巨型对象" class="headerlink" title="JDK 8u60 回收巨型对象"></a>JDK 8u60 回收巨型对象</h5><ul><li>一个对象大于region的一半时，就称为巨型对象</li><li>G1不会对巨型对象进行拷贝</li><li>回收时被优先考虑</li><li>G1会跟踪老年代所有incoming引用，如果老年代incoming引用为0的巨型对象就可以在新生代垃圾回收时处理掉</li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151249.png"><img src="/img/JVM/20200608151249.png" alt="img"></a></p><h3 id="5、GC-调优"><a href="#5、GC-调优" class="headerlink" title="5、GC 调优"></a>5、GC 调优</h3><p>查看虚拟机参数命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;F:\JAVA\JDK8.0\bin\java&quot; -XX:+PrintFlagsFinal -version | findstr &quot;GC&quot;Copy</span><br></pre></td></tr></table></figure><p>可以根据参数去查询具体的信息</p><h4 id="调优领域"><a href="#调优领域" class="headerlink" title="调优领域"></a>调优领域</h4><ul><li>内存</li><li>锁竞争</li><li>CPU占用</li><li>IO</li><li>GC</li></ul><h4 id="确定目标"><a href="#确定目标" class="headerlink" title="确定目标"></a>确定目标</h4><p>低延迟&#x2F;高吞吐量？ 选择合适的GC</p><ul><li>CMS G1 ZGC</li><li>ParallelGC</li><li>Zing</li></ul><h4 id="最快的GC是不发生GC"><a href="#最快的GC是不发生GC" class="headerlink" title="最快的GC是不发生GC"></a>最快的GC是不发生GC</h4><p>首先排除减少因为自身编写的代码而引发的内存问题</p><ul><li>查看Full GC前后的内存占用，考虑以下几个问题<ul><li>数据是不是太多？</li><li>数据表示是否太臃肿<ul><li>对象图</li><li>对象大小</li></ul></li><li>是否存在内存泄漏</li></ul></li></ul><h4 id="新生代调优"><a href="#新生代调优" class="headerlink" title="新生代调优"></a>新生代调优</h4><ul><li>新生代的特点<ul><li>所有的new操作分配内存都是非常廉价的<ul><li>TLAB</li></ul></li><li>死亡对象回收零代价</li><li>大部分对象用过即死（朝生夕死）</li><li>MInor GC 所用时间远小于Full GC</li></ul></li><li>新生代内存越大越好么？<ul><li>不是<ul><li>新生代内存太小：频繁触发Minor GC，会STW，会使得吞吐量下降</li><li>新生代内存太大：老年代内存占比有所降低，会更频繁地触发Full GC。而且触发Minor GC时，清理新生代所花费的时间会更长</li></ul></li><li>新生代内存设置为内容纳[并发量*(请求-响应)]的数据为宜</li></ul></li></ul><h4 id="幸存区调优"><a href="#幸存区调优" class="headerlink" title="幸存区调优"></a>幸存区调优</h4><ul><li>幸存区需要能够保存 <strong>当前活跃对象</strong>+<strong>需要晋升的对象</strong></li><li>晋升阈值配置得当，让长时间存活的对象尽快晋升</li></ul><h4 id="老年代调优"><a href="#老年代调优" class="headerlink" title="老年代调优"></a>老年代调优</h4><h2 id="四、类加载与字节码技术"><a href="#四、类加载与字节码技术" class="headerlink" title="四、类加载与字节码技术"></a>四、类加载与字节码技术</h2><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151300.png"><img src="/img/JVM/20200608151300.png" alt="img"></a></p><h3 id="1、类文件结构"><a href="#1、类文件结构" class="headerlink" title="1、类文件结构"></a>1、类文件结构</h3><p>首先获得.class字节码文件</p><p>方法：</p><ul><li>在文本文档里写入java代码（文件名与类名一致），将文件类型改为.java</li><li>java终端中，执行javac X:…\XXX.java</li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200910155135.png"><img src="/img/JVM/20200910155135.png" alt="img"></a></p><p>以下是字节码文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0000000 ca fe ba be 00 00 00 34 00 23 0a 00 06 00 15 09 </span><br><span class="line">0000020 00 16 00 17 08 00 18 0a 00 19 00 1a 07 00 1b 07 </span><br><span class="line">0000040 00 1c 01 00 06 3c 69 6e 69 74 3e 01 00 03 28 29 </span><br><span class="line">0000060 56 01 00 04 43 6f 64 65 01 00 0f 4c 69 6e 65 4e </span><br><span class="line">0000100 75 6d 62 65 72 54 61 62 6c 65 01 00 12 4c 6f 63 </span><br><span class="line">0000120 61 6c 56 61 72 69 61 62 6c 65 54 61 62 6c 65 01 </span><br><span class="line">0000140 00 04 74 68 69 73 01 00 1d 4c 63 6e 2f 69 74 63 </span><br><span class="line">0000160 61 73 74 2f 6a 76 6d 2f 74 35 2f 48 65 6c 6c 6f </span><br><span class="line">0000200 57 6f 72 6c 64 3b 01 00 04 6d 61 69 6e 01 00 16 </span><br><span class="line">0000220 28 5b 4c 6a 61 76 61 2f 6c 61 6e 67 2f 53 74 72 </span><br><span class="line">0000240 69 6e 67 3b 29 56 01 00 04 61 72 67 73 01 00 13 </span><br><span class="line">0000260 5b 4c 6a 61 76 61 2f 6c 61 6e 67 2f 53 74 72 69 </span><br><span class="line">0000300 6e 67 3b 01 00 10 4d 65 74 68 6f 64 50 61 72 61 </span><br><span class="line">0000320 6d 65 74 65 72 73 01 00 0a 53 6f 75 72 63 65 46 </span><br><span class="line">0000340 69 6c 65 01 00 0f 48 65 6c 6c 6f 57 6f 72 6c 64</span><br><span class="line">0000360 2e 6a 61 76 61 0c 00 07 00 08 07 00 1d 0c 00 1e </span><br><span class="line">0000400 00 1f 01 00 0b 68 65 6c 6c 6f 20 77 6f 72 6c 64 </span><br><span class="line">0000420 07 00 20 0c 00 21 00 22 01 00 1b 63 6e 2f 69 74 </span><br><span class="line">0000440 63 61 73 74 2f 6a 76 6d 2f 74 35 2f 48 65 6c 6c </span><br><span class="line">0000460 6f 57 6f 72 6c 64 01 00 10 6a 61 76 61 2f 6c 61 </span><br><span class="line">0000500 6e 67 2f 4f 62 6a 65 63 74 01 00 10 6a 61 76 61 </span><br><span class="line">0000520 2f 6c 61 6e 67 2f 53 79 73 74 65 6d 01 00 03 6f </span><br><span class="line">0000540 75 74 01 00 15 4c 6a 61 76 61 2f 69 6f 2f 50 72 </span><br><span class="line">0000560 69 6e 74 53 74 72 65 61 6d 3b 01 00 13 6a 61 76 </span><br><span class="line">0000600 61 2f 69 6f 2f 50 72 69 6e 74 53 74 72 65 61 6d </span><br><span class="line">0000620 01 00 07 70 72 69 6e 74 6c 6e 01 00 15 28 4c 6a </span><br><span class="line">0000640 61 76 61 2f 6c 61 6e 67 2f 53 74 72 69 6e 67 3b </span><br><span class="line">0000660 29 56 00 21 00 05 00 06 00 00 00 00 00 02 00 01 </span><br><span class="line">0000700 00 07 00 08 00 01 00 09 00 00 00 2f 00 01 00 01 </span><br><span class="line">0000720 00 00 00 05 2a b7 00 01 b1 00 00 00 02 00 0a 00 </span><br><span class="line">0000740 00 00 06 00 01 00 00 00 04 00 0b 00 00 00 0c 00 </span><br><span class="line">0000760 01 00 00 00 05 00 0c 00 0d 00 00 00 09 00 0e 00 </span><br><span class="line">0001000 0f 00 02 00 09 00 00 00 37 00 02 00 01 00 00 00 </span><br><span class="line">0001020 09 b2 00 02 12 03 b6 00 04 b1 00 00 00 02 00 0a </span><br><span class="line">0001040 00 00 00 0a 00 02 00 00 00 06 00 08 00 07 00 0b </span><br><span class="line">0001060 00 00 00 0c 00 01 00 00 00 09 00 10 00 11 00 00 </span><br><span class="line">0001100 00 12 00 00 00 05 01 00 10 00 00 00 01 00 13 00 </span><br><span class="line">0001120 00 00 02 00 14Copy</span><br></pre></td></tr></table></figure><p>根据 JVM 规范，<strong>类文件结构</strong>如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">u4  magic</span><br><span class="line">u2             minor_version;    </span><br><span class="line">u2             major_version;    </span><br><span class="line">u2             constant_pool_count;    </span><br><span class="line">cp_info        constant_pool[constant_pool_count-1];    </span><br><span class="line">u2             access_flags;    </span><br><span class="line">u2             this_class;    </span><br><span class="line">u2             super_class;   </span><br><span class="line">u2             interfaces_count;    </span><br><span class="line">u2             interfaces[interfaces_count];   </span><br><span class="line">u2             fields_count;    </span><br><span class="line">field_info     fields[fields_count];   </span><br><span class="line">u2             methods_count;    </span><br><span class="line">method_info    methods[methods_count];    </span><br><span class="line">u2             attributes_count;    </span><br><span class="line">attribute_info attributes[attributes_count];Copy</span><br></pre></td></tr></table></figure><h4 id="魔数"><a href="#魔数" class="headerlink" title="魔数"></a>魔数</h4><p>u4 magic</p><p>对应字节码文件的0~3个字节</p><p>0000000 <strong>ca fe ba be</strong> 00 00 00 34 00 23 0a 00 06 00 15 09</p><h4 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h4><p>u2 minor_version;</p><p>u2 major_version;</p><p>0000000 ca fe ba be <strong>00 00 00 34</strong> 00 23 0a 00 06 00 15 09</p><p>34H &#x3D; 52，代表JDK8</p><h4 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h4><p>见资料文件</p><p>…略</p><h3 id="2、字节码指令"><a href="#2、字节码指令" class="headerlink" title="2、字节码指令"></a>2、字节码指令</h3><p>可参考</p><p><a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-6.html#jvms-6.5">https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-6.html#jvms-6.5</a></p><h4 id="javap工具"><a href="#javap工具" class="headerlink" title="javap工具"></a>javap工具</h4><p>Oracle 提供了 <strong>javap</strong> 工具来反编译 class 文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javap -v F:\Thread_study\src\com\nyima\JVM\day01\Main.classCopy</span><br><span class="line">F:\Thread_study&gt;javap -v F:\Thread_study\src\com\nyima\JVM\day5\Demo1.class</span><br><span class="line">Classfile /F:/Thread_study/src/com/nyima/JVM/day5/Demo1.class</span><br><span class="line">  Last modified 2020-6-6; size 434 bytes</span><br><span class="line">  MD5 checksum df1dce65bf6fb0b4c1de318051f4a67e</span><br><span class="line">  Compiled from &quot;Demo1.java&quot;</span><br><span class="line">public class com.nyima.JVM.day5.Demo1</span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: 52</span><br><span class="line">  flags: ACC_PUBLIC, ACC_SUPER</span><br><span class="line">Constant pool:</span><br><span class="line">   #1 = Methodref          #6.#15         // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">   #2 = Fieldref           #16.#17        // java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">   #3 = String             #18            // hello world</span><br><span class="line">   #4 = Methodref          #19.#20        // java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">   #5 = Class              #21            // com/nyima/JVM/day5/Demo1</span><br><span class="line">   #6 = Class              #22            // java/lang/Object</span><br><span class="line">   #7 = Utf8               &lt;init&gt;</span><br><span class="line">   #8 = Utf8               ()V</span><br><span class="line">   #9 = Utf8               Code</span><br><span class="line">  #10 = Utf8               LineNumberTable</span><br><span class="line">  #11 = Utf8               main</span><br><span class="line">  #12 = Utf8               ([Ljava/lang/String;)V</span><br><span class="line">  #13 = Utf8               SourceFile</span><br><span class="line">  #14 = Utf8               Demo1.java</span><br><span class="line">  #15 = NameAndType        #7:#8          // &quot;&lt;init&gt;&quot;:()V</span><br><span class="line">  #16 = Class              #23            // java/lang/System</span><br><span class="line">  #17 = NameAndType        #24:#25        // out:Ljava/io/PrintStream;</span><br><span class="line">  #18 = Utf8               hello world</span><br><span class="line">  #19 = Class              #26            // java/io/PrintStream</span><br><span class="line">  #20 = NameAndType        #27:#28        // println:(Ljava/lang/String;)V</span><br><span class="line">  #21 = Utf8               com/nyima/JVM/day5/Demo1</span><br><span class="line">  #22 = Utf8               java/lang/Object</span><br><span class="line">  #23 = Utf8               java/lang/System</span><br><span class="line">  #24 = Utf8               out</span><br><span class="line">  #25 = Utf8               Ljava/io/PrintStream;</span><br><span class="line">  #26 = Utf8               java/io/PrintStream</span><br><span class="line">  #27 = Utf8               println</span><br><span class="line">  #28 = Utf8               (Ljava/lang/String;)V</span><br><span class="line">&#123;</span><br><span class="line">  public com.nyima.JVM.day5.Demo1();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=1, locals=1, args_size=1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">         4: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 7: 0</span><br><span class="line"></span><br><span class="line">  public static void main(java.lang.String[]);</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=2, locals=1, args_size=1</span><br><span class="line">         0: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">         3: ldc           #3                  // String hello world</span><br><span class="line">         5: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line"></span><br><span class="line">         8: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 9: 0</span><br><span class="line">        line 10: 8</span><br><span class="line">&#125;Copy</span><br></pre></td></tr></table></figure><h4 id="图解方法执行流程"><a href="#图解方法执行流程" class="headerlink" title="图解方法执行流程"></a>图解方法执行流程</h4><p>代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Demo3_1 &#123;    </span><br><span class="line">public static void main(String[] args) &#123;        </span><br><span class="line">int a = 10;        </span><br><span class="line">int b = Short.MAX_VALUE + 1;        </span><br><span class="line">int c = a + b;        </span><br><span class="line">System.out.println(c);   </span><br><span class="line">    &#125; </span><br><span class="line">&#125;Copy</span><br></pre></td></tr></table></figure><p><strong>常量池载入运行时常量池</strong></p><p>常量池也属于方法区，只不过这里单独提出来了</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151317.png"><img src="/img/JVM/20200608151317.png" alt="img"></a></p><p><strong>方法字节码载入方法区</strong></p><p>（stack&#x3D;2，locals&#x3D;4） 对应操作数栈有2个空间（每个空间4个字节），局部变量表中有4个槽位</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151325.png"><img src="/img/JVM/20200608151325.png" alt="img"></a></p><p><strong>执行引擎开始执行字节码</strong></p><p><strong>bipush 10</strong></p><ul><li><p>将一个 byte 压入操作数栈</p><p>（其长度会补齐 4 个字节），类似的指令还有</p><ul><li>sipush 将一个 short 压入操作数栈（其长度会补齐 4 个字节）</li><li>ldc 将一个 int 压入操作数栈</li><li>ldc2_w 将一个 long 压入操作数栈（<strong>分两次压入</strong>，因为 long 是 8 个字节）</li><li>这里小的数字都是和字节码指令存在一起，<strong>超过 short 范围的数字存入了常量池</strong></li></ul></li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151336.png"><img src="/img/JVM/20200608151336.png" alt="img"></a></p><p><strong>istore 1</strong></p><p>将操作数栈栈顶元素弹出，放入局部变量表的slot 1中</p><p>对应代码中的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = 10Copy</span><br></pre></td></tr></table></figure><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151346.png"><img src="/img/JVM/20200608151346.png" alt="img"></a></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151412.png"><img src="/img/JVM/20200608151412.png" alt="img"></a></p><p><strong>ldc #3</strong></p><p>读取运行时常量池中#3，即32768(超过short最大值范围的数会被放到运行时常量池中)，将其加载到操作数栈中</p><p>注意 Short.MAX_VALUE 是 32767，所以 32768 &#x3D; Short.MAX_VALUE + 1 实际是在编译期间计算好的</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151421.png"><img src="/img/JVM/20200608151421.png" alt="img"></a></p><p><strong>istore 2</strong></p><p>将操作数栈中的元素弹出，放到局部变量表的2号位置</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151432.png"><img src="/img/JVM/20200608151432.png" alt="img"></a></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151441.png"><img src="/img/JVM/20200608151441.png" alt="img"></a></p><p><strong>iload1 iload2</strong></p><p>将局部变量表中1号位置和2号位置的元素放入操作数栈中</p><ul><li>因为只能在操作数栈中执行运算操作</li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151450.png"><img src="/img/JVM/20200608151450.png" alt="img"></a></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151459.png"><img src="/img/JVM/20200608151459.png" alt="img"></a></p><p><strong>iadd</strong></p><p>将操作数栈中的两个元素<strong>弹出栈</strong>并相加，结果在压入操作数栈中</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151508.png"><img src="/img/JVM/20200608151508.png" alt="img"></a></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151523.png"><img src="/img/JVM/20200608151523.png" alt="img"></a></p><p><strong>istore 3</strong></p><p>将操作数栈中的元素弹出，放入局部变量表的3号位置</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151547.png"><img src="/img/JVM/20200608151547.png" alt="img"></a></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151555.png"><img src="/img/JVM/20200608151555.png" alt="img"></a></p><p><strong>getstatic #4</strong></p><p>在运行时常量池中找到#4，发现是一个对象</p><p>在堆内存中找到该对象，并将其<strong>引用</strong>放入操作数栈中</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151605.png"><img src="/img/JVM/20200608151605.png" alt="img"></a></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151613.png"><img src="/img/JVM/20200608151613.png" alt="img"></a></p><p><strong>iload 3</strong></p><p>将局部变量表中3号位置的元素压入操作数栈中</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151624.png"><img src="/img/JVM/20200608151624.png" alt="img"></a></p><p><strong>invokevirtual 5</strong></p><p>找到常量池 #5 项，定位到方法区 java&#x2F;io&#x2F;PrintStream.println:(I)V 方法</p><p>生成新的栈帧（分配 locals、stack等）</p><p>传递参数，执行新栈帧中的字节码</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151632.png"><img src="/img/JVM/20200608151632.png" alt="img"></a></p><p>执行完毕，弹出栈帧</p><p>清除 main 操作数栈内容</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151640.png"><img src="/img/JVM/20200608151640.png" alt="img"></a></p><p><strong>return</strong><br>完成 main 方法调用，弹出 main 栈帧，程序结束</p><h4 id="通过字节码指令来分析问题"><a href="#通过字节码指令来分析问题" class="headerlink" title="通过字节码指令来分析问题"></a>通过字节码指令来分析问题</h4><p>代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Demo2 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int i=0;</span><br><span class="line">int x=0;</span><br><span class="line">while(i&lt;10) &#123;</span><br><span class="line">x = x++;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(x); //接过为0</span><br><span class="line">&#125;</span><br><span class="line">&#125;Copy</span><br></pre></td></tr></table></figure><p>为什么最终的x结果为0呢？ 通过分析字节码指令即可知晓</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Code:</span><br><span class="line">     stack=2, locals=3, args_size=1//操作数栈分配2个空间，局部变量表分配3个空间</span><br><span class="line">        0: iconst_0//准备一个常数0</span><br><span class="line">        1: istore_1//将常数0放入局部变量表的1号槽位 i=0</span><br><span class="line">        2: iconst_0//准备一个常数0</span><br><span class="line">        3: istore_2//将常数0放入局部变量的2号槽位 x=0</span><br><span class="line">        4: iload_1//将局部变量表1号槽位的数放入操作数栈中</span><br><span class="line">        5: bipush        10//将数字10放入操作数栈中，此时操作数栈中有2个数</span><br><span class="line">        7: if_icmpge     21//比较操作数栈中的两个数，如果下面的数大于上面的数，就跳转到21。这里的比较是将两个数做减法。因为涉及运算操作，所以会将两个数弹出操作数栈来进行运算。运算结束后操作数栈为空</span><br><span class="line">       10: iload_2//将局部变量2号槽位的数放入操作数栈中，放入的值是0</span><br><span class="line">       11: iinc          2, 1//将局部变量2号槽位的数加1，自增后，槽位中的值为1</span><br><span class="line">       14: istore_2//将操作数栈中的数放入到局部变量表的2号槽位，2号槽位的值又变为了0</span><br><span class="line">       15: iinc          1, 1 //1号槽位的值自增1</span><br><span class="line">       18: goto          4 //跳转到第4条指令</span><br><span class="line">       21: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">       24: iload_2</span><br><span class="line">       25: invokevirtual #3                  // Method java/io/PrintStream.println:(I)V</span><br><span class="line">       28: returnCopy</span><br></pre></td></tr></table></figure><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><h5 id="cinit-V"><a href="#cinit-V" class="headerlink" title="cinit()V"></a>cinit()V</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Demo3 &#123;</span><br><span class="line">static int i = 10;</span><br><span class="line"></span><br><span class="line">static &#123;</span><br><span class="line">i = 20;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static &#123;</span><br><span class="line">i = 30;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">System.out.println(i); //结果为30</span><br><span class="line">&#125;</span><br><span class="line">&#125;Copy</span><br></pre></td></tr></table></figure><p>编译器会按<strong>从上至下</strong>的顺序，收集所有 static 静态代码块和静态成员赋值的代码，<strong>合并</strong>为一个特殊的方法 cinit()V ：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stack=1, locals=0, args_size=0</span><br><span class="line">         0: bipush        10</span><br><span class="line">         2: putstatic     #3                  // Field i:I</span><br><span class="line">         5: bipush        20</span><br><span class="line">         7: putstatic     #3                  // Field i:I</span><br><span class="line">        10: bipush        30</span><br><span class="line">        12: putstatic     #3                  // Field i:I</span><br><span class="line">        15: returnCopy</span><br></pre></td></tr></table></figure><h5 id="init-V"><a href="#init-V" class="headerlink" title="init()V"></a>init()V</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Demo4 &#123;</span><br><span class="line">private String a = &quot;s1&quot;;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">b = 20;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private int b = 10;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">a = &quot;s2&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Demo4(String a, int b) &#123;</span><br><span class="line">this.a = a;</span><br><span class="line">this.b = b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Demo4 d = new Demo4(&quot;s3&quot;, 30);</span><br><span class="line">System.out.println(d.a);</span><br><span class="line">System.out.println(d.b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;Copy</span><br></pre></td></tr></table></figure><p>编译器会按<strong>从上至下</strong>的顺序，收集所有 {} 代码块和成员变量赋值的代码，<strong>形成新的构造方法</strong>，但<strong>原始构造方法</strong>内的代码<strong>总是在后</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Code:</span><br><span class="line">     stack=2, locals=3, args_size=3</span><br><span class="line">        0: aload_0</span><br><span class="line">        1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">        4: aload_0</span><br><span class="line">        5: ldc           #2                  // String s1</span><br><span class="line">        7: putfield      #3                  // Field a:Ljava/lang/String;</span><br><span class="line">       10: aload_0</span><br><span class="line">       11: bipush        20</span><br><span class="line">       13: putfield      #4                  // Field b:I</span><br><span class="line">       16: aload_0</span><br><span class="line">       17: bipush        10</span><br><span class="line">       19: putfield      #4                  // Field b:I</span><br><span class="line">       22: aload_0</span><br><span class="line">       23: ldc           #5                  // String s2</span><br><span class="line">       25: putfield      #3                  // Field a:Ljava/lang/String;</span><br><span class="line">       //原始构造方法在最后执行</span><br><span class="line">       28: aload_0</span><br><span class="line">       29: aload_1</span><br><span class="line">       30: putfield      #3                  // Field a:Ljava/lang/String;</span><br><span class="line">       33: aload_0</span><br><span class="line">       34: iload_2</span><br><span class="line">       35: putfield      #4                  // Field b:I</span><br><span class="line">       38: returnCopy</span><br></pre></td></tr></table></figure><h4 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Demo5 &#123;</span><br><span class="line">public Demo5() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void test1() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private final void test2() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void test3() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void test4() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Demo5 demo5 = new Demo5();</span><br><span class="line">demo5.test1();</span><br><span class="line">demo5.test2();</span><br><span class="line">demo5.test3();</span><br><span class="line">Demo5.test4();</span><br><span class="line">&#125;</span><br><span class="line">&#125;Copy</span><br></pre></td></tr></table></figure><p>不同方法在调用时，对应的虚拟机指令有所区别</p><ul><li>私有、构造、被final修饰的方法，在调用时都使用<strong>invokespecial</strong>指令</li><li>普通成员方法在调用时，使用invokespecial指令。因为编译期间无法确定该方法的内容，只有在运行期间才能确定</li><li>静态方法在调用时使用invokestatic指令</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Code:</span><br><span class="line">      stack=2, locals=2, args_size=1</span><br><span class="line">         0: new           #2                  // class com/nyima/JVM/day5/Demo5 </span><br><span class="line">         3: dup</span><br><span class="line">         4: invokespecial #3                  // Method &quot;&lt;init&gt;&quot;:()V</span><br><span class="line">         7: astore_1</span><br><span class="line">         8: aload_1</span><br><span class="line">         9: invokespecial #4                  // Method test1:()V</span><br><span class="line">        12: aload_1</span><br><span class="line">        13: invokespecial #5                  // Method test2:()V</span><br><span class="line">        16: aload_1</span><br><span class="line">        17: invokevirtual #6                  // Method test3:()V</span><br><span class="line">        20: invokestatic  #7                  // Method test4:()V</span><br><span class="line">        23: returnCopy</span><br></pre></td></tr></table></figure><ul><li>new 是创建【对象】，给对象分配堆内存，执行成功会将【<strong>对象引用</strong>】压入操作数栈</li><li>dup 是赋值操作数栈栈顶的内容，本例即为【<strong>对象引用</strong>】，为什么需要两份引用呢，一个是要配合 invokespecial 调用该对象的构造方法 “init”:()V （会消耗掉栈顶一个引用），另一个要 配合 astore_1 赋值给局部变量</li><li>终方法（ﬁnal），私有方法（private），构造方法都是由 invokespecial 指令来调用，属于静态绑定</li><li>普通成员方法是由 invokevirtual 调用，属于<strong>动态绑定</strong>，即支持多态 成员方法与静态方法调用的另一个区别是，执行方法前是否需要【对象引用】</li></ul><h4 id="多态原理"><a href="#多态原理" class="headerlink" title="多态原理"></a>多态原理</h4><p>因为普通成员方法需要在运行时才能确定具体的内容，所以虚拟机需要调用<strong>invokevirtual</strong>指令</p><p>在执行invokevirtual指令时，经历了以下几个步骤</p><ul><li>先通过栈帧中对象的引用找到对象</li><li>分析对象头，找到对象实际的Class</li><li>Class结构中有<strong>vtable</strong></li><li>查询vtable找到方法的具体地址</li><li>执行方法的字节码</li></ul><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><h5 id="try-catch"><a href="#try-catch" class="headerlink" title="try-catch"></a>try-catch</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Demo1 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int i = 0;</span><br><span class="line">try &#123;</span><br><span class="line">i = 10;</span><br><span class="line">&#125;catch (Exception e) &#123;</span><br><span class="line">i = 20;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;Copy</span><br></pre></td></tr></table></figure><p>对应字节码指令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Code:</span><br><span class="line">     stack=1, locals=3, args_size=1</span><br><span class="line">        0: iconst_0</span><br><span class="line">        1: istore_1</span><br><span class="line">        2: bipush        10</span><br><span class="line">        4: istore_1</span><br><span class="line">        5: goto          12</span><br><span class="line">        8: astore_2</span><br><span class="line">        9: bipush        20</span><br><span class="line">       11: istore_1</span><br><span class="line">       12: return</span><br><span class="line">     //多出来一个异常表</span><br><span class="line">     Exception table:</span><br><span class="line">        from    to  target type</span><br><span class="line">            2     5     8   Class java/lang/ExceptionCopy</span><br></pre></td></tr></table></figure><ul><li>可以看到多出来一个 Exception table 的结构，[from, to) 是<strong>前闭后开</strong>（也就是检测2~4行）的检测范围，一旦这个范围内的字节码执行出现异常，则通过 type 匹配异常类型，如果一致，进入 target 所指示行号</li><li>8行的字节码指令 astore_2 是将异常对象引用存入局部变量表的2号位置（为e）</li></ul><h5 id="多个single-catch"><a href="#多个single-catch" class="headerlink" title="多个single-catch"></a>多个single-catch</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Demo1 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int i = 0;</span><br><span class="line">try &#123;</span><br><span class="line">i = 10;</span><br><span class="line">&#125;catch (ArithmeticException e) &#123;</span><br><span class="line">i = 20;</span><br><span class="line">&#125;catch (Exception e) &#123;</span><br><span class="line">i = 30;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;Copy</span><br></pre></td></tr></table></figure><p>对应的字节码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Code:</span><br><span class="line">     stack=1, locals=3, args_size=1</span><br><span class="line">        0: iconst_0</span><br><span class="line">        1: istore_1</span><br><span class="line">        2: bipush        10</span><br><span class="line">        4: istore_1</span><br><span class="line">        5: goto          19</span><br><span class="line">        8: astore_2</span><br><span class="line">        9: bipush        20</span><br><span class="line">       11: istore_1</span><br><span class="line">       12: goto          19</span><br><span class="line">       15: astore_2</span><br><span class="line">       16: bipush        30</span><br><span class="line">       18: istore_1</span><br><span class="line">       19: return</span><br><span class="line">     Exception table:</span><br><span class="line">        from    to  target type</span><br><span class="line">            2     5     8   Class java/lang/ArithmeticException</span><br><span class="line">            2     5    15   Class java/lang/ExceptionCopy</span><br></pre></td></tr></table></figure><ul><li>因为异常出现时，<strong>只能进入</strong> Exception table 中<strong>一个分支</strong>，所以局部变量表 slot 2 位置<strong>被共用</strong></li></ul><h5 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Demo2 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int i = 0;</span><br><span class="line">try &#123;</span><br><span class="line">i = 10;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">i = 20;</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">i = 30;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;Copy</span><br></pre></td></tr></table></figure><p>对应字节码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Code:</span><br><span class="line">     stack=1, locals=4, args_size=1</span><br><span class="line">        0: iconst_0</span><br><span class="line">        1: istore_1</span><br><span class="line">        //try块</span><br><span class="line">        2: bipush        10</span><br><span class="line">        4: istore_1</span><br><span class="line">        //try块执行完后，会执行finally    </span><br><span class="line">        5: bipush        30</span><br><span class="line">        7: istore_1</span><br><span class="line">        8: goto          27</span><br><span class="line">       //catch块     </span><br><span class="line">       11: astore_2 //异常信息放入局部变量表的2号槽位</span><br><span class="line">       12: bipush        20</span><br><span class="line">       14: istore_1</span><br><span class="line">       //catch块执行完后，会执行finally        </span><br><span class="line">       15: bipush        30</span><br><span class="line">       17: istore_1</span><br><span class="line">       18: goto          27</span><br><span class="line">       //出现异常，但未被Exception捕获，会抛出其他异常，这时也需要执行finally块中的代码   </span><br><span class="line">       21: astore_3</span><br><span class="line">       22: bipush        30</span><br><span class="line">       24: istore_1</span><br><span class="line">       25: aload_3</span><br><span class="line">       26: athrow  //抛出异常</span><br><span class="line">       27: return</span><br><span class="line">     Exception table:</span><br><span class="line">        from    to  target type</span><br><span class="line">            2     5    11   Class java/lang/Exception</span><br><span class="line">            2     5    21   any</span><br><span class="line">           11    15    21   anyCopy</span><br></pre></td></tr></table></figure><p>可以看到 ﬁnally 中的代码被<strong>复制了 3 份</strong>，分别放入 try 流程，catch 流程以及 catch剩余的异常类型流程</p><p><strong>注意</strong>：虽然从字节码指令看来，每个块中都有finally块，但是finally块中的代码<strong>只会被执行一次</strong></p><h5 id="finally中的return"><a href="#finally中的return" class="headerlink" title="finally中的return"></a>finally中的return</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Demo3 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int i = Demo3.test();</span><br><span class="line">        //结果为20</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static int test() &#123;</span><br><span class="line">int i;</span><br><span class="line">try &#123;</span><br><span class="line">i = 10;</span><br><span class="line">return i;</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">i = 20;</span><br><span class="line">return i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;Copy</span><br></pre></td></tr></table></figure><p>对应字节码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Code:</span><br><span class="line">     stack=1, locals=3, args_size=0</span><br><span class="line">        0: bipush        10</span><br><span class="line">        2: istore_0</span><br><span class="line">        3: iload_0</span><br><span class="line">        4: istore_1  //暂存返回值</span><br><span class="line">        5: bipush        20</span><br><span class="line">        7: istore_0</span><br><span class="line">        8: iload_0</span><br><span class="line">        9: ireturn//ireturn会返回操作数栈顶的整型值20</span><br><span class="line">       //如果出现异常，还是会执行finally块中的内容，没有抛出异常</span><br><span class="line">       10: astore_2</span><br><span class="line">       11: bipush        20</span><br><span class="line">       13: istore_0</span><br><span class="line">       14: iload_0</span><br><span class="line">       15: ireturn//这里没有athrow了，也就是如果在finally块中如果有返回操作的话，且try块中出现异常，会吞掉异常！</span><br><span class="line">     Exception table:</span><br><span class="line">        from    to  target type</span><br><span class="line">            0     5    10   anyCopy</span><br></pre></td></tr></table></figure><ul><li>由于 ﬁnally 中的 <strong>ireturn</strong> 被插入了所有可能的流程，因此返回结果肯定以ﬁnally的为准</li><li>至于字节码中第 2 行，似乎没啥用，且留个伏笔，看下个例子</li><li>跟上例中的 ﬁnally 相比，发现<strong>没有 athrow 了</strong>，这告诉我们：如果在 ﬁnally 中出现了 return，会<strong>吞掉异常</strong></li><li>所以<strong>不要在finally中进行返回操作</strong></li></ul><h5 id="被吞掉的异常"><a href="#被吞掉的异常" class="headerlink" title="被吞掉的异常"></a>被吞掉的异常</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Demo3 &#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">      int i = Demo3.test();</span><br><span class="line">      //最终结果为20</span><br><span class="line">      System.out.println(i);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public static int test() &#123;</span><br><span class="line">      int i;</span><br><span class="line">      try &#123;</span><br><span class="line">         i = 10;</span><br><span class="line">         //这里应该会抛出异常</span><br><span class="line">         i = i/0;</span><br><span class="line">         return i;</span><br><span class="line">      &#125; finally &#123;</span><br><span class="line">         i = 20;</span><br><span class="line">         return i;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;Copy</span><br></pre></td></tr></table></figure><p>会发现打印结果为20，并未抛出异常</p><h5 id="finally不带return"><a href="#finally不带return" class="headerlink" title="finally不带return"></a>finally不带return</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Demo4 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int i = Demo4.test();</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static int test() &#123;</span><br><span class="line">int i = 10;</span><br><span class="line">try &#123;</span><br><span class="line">return i;</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">i = 20;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;Copy</span><br></pre></td></tr></table></figure><p>对应字节码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Code:</span><br><span class="line">     stack=1, locals=3, args_size=0</span><br><span class="line">        0: bipush        10</span><br><span class="line">        2: istore_0 //赋值给i 10</span><br><span class="line">        3: iload_0//加载到操作数栈顶</span><br><span class="line">        4: istore_1 //加载到局部变量表的1号位置</span><br><span class="line">        5: bipush        20</span><br><span class="line">        7: istore_0 //赋值给i 20</span><br><span class="line">        8: iload_1 //加载局部变量表1号位置的数10到操作数栈</span><br><span class="line">        9: ireturn //返回操作数栈顶元素 10</span><br><span class="line">       10: astore_2</span><br><span class="line">       11: bipush        20</span><br><span class="line">       13: istore_0</span><br><span class="line">       14: aload_2 //加载异常</span><br><span class="line">       15: athrow //抛出异常</span><br><span class="line">     Exception table:</span><br><span class="line">        from    to  target type</span><br><span class="line">            3     5    10   anyCopy</span><br></pre></td></tr></table></figure><h4 id="Synchronized"><a href="#Synchronized" class="headerlink" title="Synchronized"></a>Synchronized</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Demo5 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int i = 10;</span><br><span class="line">Lock lock = new Lock();</span><br><span class="line">synchronized (lock) &#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Lock&#123;&#125;Copy</span><br></pre></td></tr></table></figure><p>对应字节码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Code:</span><br><span class="line">     stack=2, locals=5, args_size=1</span><br><span class="line">        0: bipush        10</span><br><span class="line">        2: istore_1</span><br><span class="line">        3: new           #2                  // class com/nyima/JVM/day06/Lock</span><br><span class="line">        6: dup //复制一份，放到操作数栈顶，用于构造函数消耗</span><br><span class="line">        7: invokespecial #3                  // Method com/nyima/JVM/day06/Lock.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">       10: astore_2 //剩下的一份放到局部变量表的2号位置</span><br><span class="line">       11: aload_2 //加载到操作数栈</span><br><span class="line">       12: dup //复制一份，放到操作数栈，用于加锁时消耗</span><br><span class="line">       13: astore_3 //将操作数栈顶元素弹出，暂存到局部变量表的三号槽位。这时操作数栈中有一份对象的引用</span><br><span class="line">       14: monitorenter //加锁</span><br><span class="line">       //锁住后代码块中的操作    </span><br><span class="line">       15: getstatic     #4                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">       18: iload_1</span><br><span class="line">       19: invokevirtual #5                  // Method java/io/PrintStream.println:(I)V</span><br><span class="line">       //加载局部变量表中三号槽位对象的引用，用于解锁    </span><br><span class="line">       22: aload_3    </span><br><span class="line">       23: monitorexit //解锁</span><br><span class="line">       24: goto          34</span><br><span class="line">       //异常操作    </span><br><span class="line">       27: astore        4</span><br><span class="line">       29: aload_3</span><br><span class="line">       30: monitorexit //解锁</span><br><span class="line">       31: aload         4</span><br><span class="line">       33: athrow</span><br><span class="line">       34: return</span><br><span class="line">     //可以看出，无论何时出现异常，都会跳转到27行，将异常放入局部变量中，并进行解锁操作，然后加载异常并抛出异常。      </span><br><span class="line">     Exception table:</span><br><span class="line">        from    to  target type</span><br><span class="line">           15    24    27   any</span><br><span class="line">           27    31    27   anyCopy</span><br></pre></td></tr></table></figure><h3 id="3、编译期处理"><a href="#3、编译期处理" class="headerlink" title="3、编译期处理"></a>3、编译期处理</h3><p>所谓的 <strong>语法糖</strong> ，其实就是指 java 编译器把 *.java 源码编译为 *.class 字节码的过程中，<strong>自动生成</strong>和<strong>转换</strong>的一些代码，主要是为了减轻程序员的负担，算是 java 编译器给我们的一个额外福利</p><p><strong>注意</strong>，以下代码的分析，借助了 javap 工具，idea 的反编译功能，idea 插件 jclasslib 等工具。另外， 编译器转换的<strong>结果直接就是 class 字节码</strong>，只是为了便于阅读，给出了 几乎等价 的 java 源码方式，并不是编译器还会转换出中间的 java 源码，切记。</p><h4 id="默认构造函数"><a href="#默认构造函数" class="headerlink" title="默认构造函数"></a>默认构造函数</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Candy1 &#123;</span><br><span class="line"></span><br><span class="line">&#125;Copy</span><br></pre></td></tr></table></figure><p>经过编译期优化后</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Candy1 &#123;</span><br><span class="line">   //这个无参构造器是java编译器帮我们加上的</span><br><span class="line">   public Candy1() &#123;</span><br><span class="line">      //即调用父类 Object 的无参构造方法，即调用 java/lang/Object.&quot; &lt;init&gt;&quot;:()V</span><br><span class="line">      super();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;Copy</span><br></pre></td></tr></table></figure><h4 id="自动拆装箱"><a href="#自动拆装箱" class="headerlink" title="自动拆装箱"></a>自动拆装箱</h4><p>基本类型和其包装类型的相互转换过程，称为拆装箱</p><p>在JDK 5以后，它们的转换可以在编译期自动完成</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Demo2 &#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">      Integer x = 1;</span><br><span class="line">      int y = x;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;Copy</span><br></pre></td></tr></table></figure><p>转换过程如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Demo2 &#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">      //基本类型赋值给包装类型，称为装箱</span><br><span class="line">      Integer x = Integer.valueOf(1);</span><br><span class="line">      //包装类型赋值给基本类型，称谓拆箱</span><br><span class="line">      int y = x.intValue();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;Copy</span><br></pre></td></tr></table></figure><h4 id="泛型集合取值"><a href="#泛型集合取值" class="headerlink" title="泛型集合取值"></a>泛型集合取值</h4><p>泛型也是在 JDK 5 开始加入的特性，但 java 在<strong>编译泛型代码后</strong>会执行 <strong>泛型擦除</strong> 的动作，即泛型信息在编译为字节码之后就<strong>丢失</strong>了，实际的类型都当做了 <strong>Object</strong> 类型来处理：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Demo3 &#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">      List&lt;Integer&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">      list.add(10);</span><br><span class="line">      Integer x = list.get(0);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;Copy</span><br></pre></td></tr></table></figure><p>对应字节码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Code:</span><br><span class="line">    stack=2, locals=3, args_size=1</span><br><span class="line">       0: new           #2                  // class java/util/ArrayList</span><br><span class="line">       3: dup</span><br><span class="line">       4: invokespecial #3                  // Method java/util/ArrayList.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">       7: astore_1</span><br><span class="line">       8: aload_1</span><br><span class="line">       9: bipush        10</span><br><span class="line">      11: invokestatic  #4                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;</span><br><span class="line">      //这里进行了泛型擦除，实际调用的是add(Objcet o)</span><br><span class="line">      14: invokeinterface #5,  2            // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z</span><br><span class="line"></span><br><span class="line">      19: pop</span><br><span class="line">      20: aload_1</span><br><span class="line">      21: iconst_0</span><br><span class="line">      //这里也进行了泛型擦除，实际调用的是get(Object o)   </span><br><span class="line">      22: invokeinterface #6,  2            // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;</span><br><span class="line">//这里进行了类型转换，将Object转换成了Integer</span><br><span class="line">      27: checkcast     #7                  // class java/lang/Integer</span><br><span class="line">      30: astore_2</span><br><span class="line">      31: returnCopy</span><br></pre></td></tr></table></figure><p>所以调用get函数取值时，有一个类型转换的操作</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Integer x = (Integer) list.get(0);Copy</span><br></pre></td></tr></table></figure><p>如果要将返回结果赋值给一个int类型的变量，则还有<strong>自动拆箱</strong>的操作</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int x = (Integer) list.get(0).intValue();Copy</span><br></pre></td></tr></table></figure><h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Demo4 &#123;</span><br><span class="line">   public static void foo(String... args) &#123;</span><br><span class="line">      //将args赋值给arr，可以看出String...实际就是String[] </span><br><span class="line">      String[] arr = args;</span><br><span class="line">      System.out.println(arr.length);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">      foo(&quot;hello&quot;, &quot;world&quot;);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;Copy</span><br></pre></td></tr></table></figure><p>可变参数 <strong>String…</strong> args 其实是一个 <strong>String[]</strong> args ，从代码中的赋值语句中就可以看出来。 同 样 java 编译器会在编译期间将上述代码变换为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Demo4 &#123;</span><br><span class="line">   public Demo4 &#123;&#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">   public static void foo(String[] args) &#123;</span><br><span class="line">      String[] arr = args;</span><br><span class="line">      System.out.println(arr.length);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">      foo(new String[]&#123;&quot;hello&quot;, &quot;world&quot;&#125;);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;Copy</span><br></pre></td></tr></table></figure><p>注意，如果调用的是foo()，即未传递参数时，等价代码为foo(new String[]{})，<strong>创建了一个空数组</strong>，而不是直接传递的null</p><h4 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Demo5 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        //数组赋初值的简化写法也是一种语法糖。</span><br><span class="line">int[] arr = &#123;1, 2, 3, 4, 5&#125;;</span><br><span class="line">for(int x : arr) &#123;</span><br><span class="line">System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;Copy</span><br></pre></td></tr></table></figure><p>编译器会帮我们转换为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Demo5 &#123;</span><br><span class="line">    public Demo5 &#123;&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int[] arr = new int[]&#123;1, 2, 3, 4, 5&#125;;</span><br><span class="line">for(int i=0; i&lt;arr.length; ++i) &#123;</span><br><span class="line">int x = arr[i];</span><br><span class="line">System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;Copy</span><br></pre></td></tr></table></figure><p><strong>如果是集合使用foreach</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Demo5 &#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">      List&lt;Integer&gt; list = Arrays.asList(1, 2, 3, 4, 5);</span><br><span class="line">      for (Integer x : list) &#123;</span><br><span class="line">         System.out.println(x);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;Copy</span><br></pre></td></tr></table></figure><p>集合要使用foreach，需要该集合类实现了<strong>Iterable接口</strong>，因为集合的遍历需要用到<strong>迭代器Iterator</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Demo5 &#123;</span><br><span class="line">    public Demo5 &#123;&#125;</span><br><span class="line">    </span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">      List&lt;Integer&gt; list = Arrays.asList(1, 2, 3, 4, 5);</span><br><span class="line">      //获得该集合的迭代器</span><br><span class="line">      Iterator&lt;Integer&gt; iterator = list.iterator();</span><br><span class="line">      while(iterator.hasNext()) &#123;</span><br><span class="line">         Integer x = iterator.next();</span><br><span class="line">         System.out.println(x);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;Copy</span><br></pre></td></tr></table></figure><h4 id="switch字符串"><a href="#switch字符串" class="headerlink" title="switch字符串"></a>switch字符串</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Demo6 &#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">      String str = &quot;hello&quot;;</span><br><span class="line">      switch (str) &#123;</span><br><span class="line">         case &quot;hello&quot; :</span><br><span class="line">            System.out.println(&quot;h&quot;);</span><br><span class="line">            break;</span><br><span class="line">         case &quot;world&quot; :</span><br><span class="line">            System.out.println(&quot;w&quot;);</span><br><span class="line">            break;</span><br><span class="line">         default:</span><br><span class="line">            break;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;Copy</span><br></pre></td></tr></table></figure><p>在编译器中执行的操作</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Demo6 &#123;</span><br><span class="line">   public Demo6() &#123;</span><br><span class="line">      </span><br><span class="line">   &#125;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">      String str = &quot;hello&quot;;</span><br><span class="line">      int x = -1;</span><br><span class="line">      //通过字符串的hashCode+value来判断是否匹配</span><br><span class="line">      switch (str.hashCode()) &#123;</span><br><span class="line">         //hello的hashCode</span><br><span class="line">         case 99162322 :</span><br><span class="line">            //再次比较，因为字符串的hashCode有可能相等</span><br><span class="line">            if(str.equals(&quot;hello&quot;)) &#123;</span><br><span class="line">               x = 0;</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line">         //world的hashCode</span><br><span class="line">         case 11331880 :</span><br><span class="line">            if(str.equals(&quot;world&quot;)) &#123;</span><br><span class="line">               x = 1;</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line">         default:</span><br><span class="line">            break;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      //用第二个switch在进行输出判断</span><br><span class="line">      switch (x) &#123;</span><br><span class="line">         case 0:</span><br><span class="line">            System.out.println(&quot;h&quot;);</span><br><span class="line">            break;</span><br><span class="line">         case 1:</span><br><span class="line">            System.out.println(&quot;w&quot;);</span><br><span class="line">            break;</span><br><span class="line">         default:</span><br><span class="line">            break;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;Copy</span><br></pre></td></tr></table></figure><p>过程说明：</p><ul><li>在编译期间，单个的switch被分为了两个<ul><li>第一个用来匹配字符串，并给x赋值<ul><li>字符串的匹配用到了字符串的hashCode，还用到了equals方法</li><li>使用hashCode是为了提高比较效率，使用equals是防止有hashCode冲突（如BM和C.）</li></ul></li><li>第二个用来根据x的值来决定输出语句</li></ul></li></ul><h4 id="switch枚举"><a href="#switch枚举" class="headerlink" title="switch枚举"></a>switch枚举</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Demo7 &#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">      SEX sex = SEX.MALE;</span><br><span class="line">      switch (sex) &#123;</span><br><span class="line">         case MALE:</span><br><span class="line">            System.out.println(&quot;man&quot;);</span><br><span class="line">            break;</span><br><span class="line">         case FEMALE:</span><br><span class="line">            System.out.println(&quot;woman&quot;);</span><br><span class="line">            break;</span><br><span class="line">         default:</span><br><span class="line">            break;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">enum SEX &#123;</span><br><span class="line">   MALE, FEMALE;</span><br><span class="line">&#125;Copy</span><br></pre></td></tr></table></figure><p>编译器中执行的代码如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Demo7 &#123;</span><br><span class="line">   /**     </span><br><span class="line">    * 定义一个合成类（仅 jvm 使用，对我们不可见）     </span><br><span class="line">    * 用来映射枚举的 ordinal 与数组元素的关系     </span><br><span class="line">    * 枚举的 ordinal 表示枚举对象的序号，从 0 开始     </span><br><span class="line">    * 即 MALE 的 ordinal()=0，FEMALE 的 ordinal()=1     </span><br><span class="line">    */ </span><br><span class="line">   static class $MAP &#123;</span><br><span class="line">      //数组大小即为枚举元素个数，里面存放了case用于比较的数字</span><br><span class="line">      static int[] map = new int[2];</span><br><span class="line">      static &#123;</span><br><span class="line">         //ordinal即枚举元素对应所在的位置，MALE为0，FEMALE为1</span><br><span class="line">         map[SEX.MALE.ordinal()] = 1;</span><br><span class="line">         map[SEX.FEMALE.ordinal()] = 2;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">      SEX sex = SEX.MALE;</span><br><span class="line">      //将对应位置枚举元素的值赋给x，用于case操作</span><br><span class="line">      int x = $MAP.map[sex.ordinal()];</span><br><span class="line">      switch (x) &#123;</span><br><span class="line">         case 1:</span><br><span class="line">            System.out.println(&quot;man&quot;);</span><br><span class="line">            break;</span><br><span class="line">         case 2:</span><br><span class="line">            System.out.println(&quot;woman&quot;);</span><br><span class="line">            break;</span><br><span class="line">         default:</span><br><span class="line">            break;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">enum SEX &#123;</span><br><span class="line">   MALE, FEMALE;</span><br><span class="line">&#125;Copy</span><br></pre></td></tr></table></figure><h4 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">enum SEX &#123;</span><br><span class="line">   MALE, FEMALE;</span><br><span class="line">&#125;Copy</span><br></pre></td></tr></table></figure><p>转换后的代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public final class Sex extends Enum&lt;Sex&gt; &#123;   </span><br><span class="line">   //对应枚举类中的元素</span><br><span class="line">   public static final Sex MALE;    </span><br><span class="line">   public static final Sex FEMALE;    </span><br><span class="line">   private static final Sex[] $VALUES;</span><br><span class="line">   </span><br><span class="line">    static &#123;       </span><br><span class="line">    //调用构造函数，传入枚举元素的值及ordinal</span><br><span class="line">    MALE = new Sex(&quot;MALE&quot;, 0);    </span><br><span class="line">        FEMALE = new Sex(&quot;FEMALE&quot;, 1);   </span><br><span class="line">        $VALUES = new Sex[]&#123;MALE, FEMALE&#125;; </span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   //调用父类中的方法</span><br><span class="line">    private Sex(String name, int ordinal) &#123;     </span><br><span class="line">        super(name, ordinal);    </span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    public static Sex[] values() &#123;  </span><br><span class="line">        return $VALUES.clone();  </span><br><span class="line">    &#125;</span><br><span class="line">    public static Sex valueOf(String name) &#123; </span><br><span class="line">        return Enum.valueOf(Sex.class, name);  </span><br><span class="line">    &#125; </span><br><span class="line">   </span><br><span class="line">&#125;Copy</span><br></pre></td></tr></table></figure><h4 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Demo8 &#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">      Runnable runnable = new Runnable() &#123;</span><br><span class="line">         @Override</span><br><span class="line">         public void run() &#123;</span><br><span class="line">            System.out.println(&quot;running...&quot;);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;Copy</span><br></pre></td></tr></table></figure><p>转换后的代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Demo8 &#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">      //用额外创建的类来创建匿名内部类对象</span><br><span class="line">      Runnable runnable = new Demo8$1();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//创建了一个额外的类，实现了Runnable接口</span><br><span class="line">final class Demo8$1 implements Runnable &#123;</span><br><span class="line">   public Demo8$1() &#123;&#125;</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   public void run() &#123;</span><br><span class="line">      System.out.println(&quot;running...&quot;);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;Copy</span><br></pre></td></tr></table></figure><p>如果匿名内部类中引用了<strong>局部变量</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Demo8 &#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">      int x = 1;</span><br><span class="line">      Runnable runnable = new Runnable() &#123;</span><br><span class="line">         @Override</span><br><span class="line">         public void run() &#123;</span><br><span class="line">            System.out.println(x);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;Copy</span><br></pre></td></tr></table></figure><p>转化后代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Demo8 &#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">      int x = 1;</span><br><span class="line">      Runnable runnable = new Runnable() &#123;</span><br><span class="line">         @Override</span><br><span class="line">         public void run() &#123;</span><br><span class="line">            System.out.println(x);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">final class Demo8$1 implements Runnable &#123;</span><br><span class="line">   //多创建了一个变量</span><br><span class="line">   int val$x;</span><br><span class="line">   //变为了有参构造器</span><br><span class="line">   public Demo8$1(int x) &#123;</span><br><span class="line">      this.val$x = x;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   public void run() &#123;</span><br><span class="line">      System.out.println(val$x);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;Copy</span><br></pre></td></tr></table></figure><h3 id="4、类加载阶段"><a href="#4、类加载阶段" class="headerlink" title="4、类加载阶段"></a>4、类加载阶段</h3><h4 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h4><ul><li><p>将类的字节码载入</p><p>方法区</p><p>（1.8后为元空间，在本地内存中）中，内部采用 C++ 的 instanceKlass 描述 java 类，它的重要 ﬁeld 有：</p><ul><li>_java_mirror 即 java 的类镜像，例如对 String 来说，它的镜像类就是 String.class，作用是把 klass 暴露给 java 使用</li><li>_super 即父类</li><li>_ﬁelds 即成员变量</li><li>_methods 即方法</li><li>_constants 即常量池</li><li>_class_loader 即类加载器</li><li>_vtable 虚方法表</li><li>_itable 接口方法</li></ul></li><li><p>如果这个类还有父类没有加载，<strong>先加载父类</strong></p></li><li><p>加载和链接可能是<strong>交替运行</strong>的</p></li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200611205050.png"><img src="/img/JVM/20200611205050.png" alt="img"></a></p><ul><li>instanceKlass保存在<strong>方法区</strong>。JDK 8以后，方法区位于元空间中，而元空间又位于本地内存中</li><li>_java_mirror则是保存在<strong>堆内存</strong>中</li><li>InstanceKlass和*.class(JAVA镜像类)互相保存了对方的地址</li><li>类的对象在对象头中保存了*.class的地址。让对象可以通过其找到方法区中的instanceKlass，从而获取类的各种信息</li></ul><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><h5 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h5><p>验证类是否符合 JVM规范，安全性检查</p><h5 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h5><p>为 static 变量分配空间，设置默认值</p><ul><li>static变量在JDK 7以前是存储与instanceKlass末尾。但在JDK 7以后就存储在_java_mirror末尾了</li><li>static变量在分配空间和赋值是在两个阶段完成的。分配空间在准备阶段完成，赋值在初始化阶段完成</li><li>如果 static 变量是 ﬁnal 的<strong>基本类型</strong>，以及<strong>字符串常量</strong>，那么编译阶段值就确定了，<strong>赋值在准备阶段完成</strong></li><li>如果 static 变量是 ﬁnal 的，但属于<strong>引用类型</strong>，那么赋值也会在<strong>初始化阶段完成</strong></li></ul><h5 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h5><p><strong>HSDB的使用</strong></p><ul><li>先获得要查看的进程ID</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jpsCopy</span><br></pre></td></tr></table></figure><ul><li>打开HSDB</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -cp F:\JAVA\JDK8.0\lib\sa-jdi.jar sun.jvm.hotspot.HSDBCopy</span><br></pre></td></tr></table></figure><ul><li>运行时可能会报错，是因为<strong>缺少一个.dll的文件</strong>，我们在JDK的安装目录中找到该文件，复制到缺失的文件下即可</li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200611221703.png"><img src="/img/JVM/20200611221703.png" alt="img"></a></p><ul><li>定位需要的进程</li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200611221857.png"><img src="/img/JVM/20200611221857.png" alt="img"></a></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200611222029.png"><img src="/img/JVM/20200611222029.png" alt="img"></a></p><p><strong>解析的含义</strong></p><p>将常量池中的符号引用解析为直接引用</p><ul><li>未解析时，常量池中的看到的对象仅是符号，未真正的存在于内存中</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Demo1 &#123;</span><br><span class="line">   public static void main(String[] args) throws IOException, ClassNotFoundException &#123;</span><br><span class="line">      ClassLoader loader = Demo1.class.getClassLoader();</span><br><span class="line">      //只加载不解析</span><br><span class="line">      Class&lt;?&gt; c = loader.loadClass(&quot;com.nyima.JVM.day8.C&quot;);</span><br><span class="line">      //用于阻塞主线程</span><br><span class="line">      System.in.read();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class C &#123;</span><br><span class="line">   D d = new D();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class D &#123;</span><br><span class="line"></span><br><span class="line">&#125;Copy</span><br></pre></td></tr></table></figure><ul><li>打开HSDB<ul><li>可以看到此时只加载了类C</li></ul></li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200611223153.png"><img src="/img/JVM/20200611223153.png" alt="img"></a></p><p>查看类C的常量池，可以看到类D<strong>未被解析</strong>，只是存在于常量池中的符号</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200611230658.png"><img src="/img/JVM/20200611230658.png" alt="img"></a></p><ul><li><p>解析以后，会将常量池中的符号引用解析为直接引用</p><ul><li>可以看到，此时已加载并解析了类C和类D</li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200611223441.png"><img src="/img/JVM/20200611223441.png" alt="img"></a></p></li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200613104723.png"><img src="/img/JVM/20200613104723.png" alt="img"></a></p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>初始化阶段就是<strong>执行类构造器clinit()方法的过程</strong>，虚拟机会保证这个类的『构造方法』的线程安全</p><ul><li>clinit()方法是由编译器自动收集类中的所有类变量的<strong>赋值动作和静态语句块</strong>（static{}块）中的语句合并产生的</li></ul><p><strong>注意</strong></p><p>编译器收集的顺序是由语句在源文件中<strong>出现的顺序决定</strong>的，静态语句块中只能访问到定义在静态语句块之前的变量，定义在它<strong>之后</strong>的变量，在前面的静态语句块<strong>可以赋值，但是不能访问</strong>，如</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20201118204542.png"><img src="/img/JVM/20201118204542.png" alt="img"></a></p><h5 id="发生时机"><a href="#发生时机" class="headerlink" title="发生时机"></a>发生时机</h5><p><strong>类的初始化的懒惰的</strong>，以下情况会初始化</p><ul><li>main 方法所在的类，总会被首先初始化</li><li>首次访问这个类的静态变量或静态方法时</li><li>子类初始化，如果父类还没初始化，会引发</li><li>子类访问父类的静态变量，只会触发父类的初始化</li><li>Class.forName</li><li>new 会导致初始化</li></ul><p>以下情况不会初始化</p><ul><li>访问类的 static ﬁnal 静态常量（基本类型和字符串）</li><li>类对象.class 不会触发初始化</li><li>创建该类对象的数组</li><li>类加载器的.loadClass方法</li><li>Class.forNamed的参数2为false时</li></ul><p><strong>验证类是否被初始化，可以看改类的静态代码块是否被执行</strong></p><h3 id="5、类加载器"><a href="#5、类加载器" class="headerlink" title="5、类加载器"></a>5、类加载器</h3><p>Java虚拟机设计团队有意把类加载阶段中的<strong>“通过一个类的全限定名来获取描述该类的二进制字节流”</strong>这个动作放到Java虚拟机外部去实现，以便让应用程序自己决定如何去获取所需的类。实现这个动作的代码被称为<strong>“类加载器”</strong>（ClassLoader）</p><h4 id="类与类加载器"><a href="#类与类加载器" class="headerlink" title="类与类加载器"></a>类与类加载器</h4><p>类加载器虽然只用于实现类的加载动作，但它在Java程序中起到的作用却远超类加载阶段</p><p>对于任意一个类，都必须由加载它的<strong>类加载器</strong>和这个<strong>类本身</strong>一起共同确立其在Java虚拟机中的唯一性，每一个类加载器，都拥有一个独立的类名称空间。这句话可以表达得更通俗一些：<strong>比较两个类是否“相等”，只有在这两个类是由同一个类加载器加载的前提下才有意义</strong>，否则，即使这两个类来源于同一个Class文件，被同一个Java虚拟机加载，只要加载它们的类加载器不同，那这两个类就必定不相等</p><p>以JDK 8为例</p><table><thead><tr><th>名称</th><th>加载的类</th><th>说明</th></tr></thead><tbody><tr><td>Bootstrap ClassLoader（启动类加载器）</td><td>JAVA_HOME&#x2F;jre&#x2F;lib</td><td>无法直接访问</td></tr><tr><td>Extension ClassLoader(拓展类加载器)</td><td>JAVA_HOME&#x2F;jre&#x2F;lib&#x2F;ext</td><td>上级为Bootstrap，<strong>显示为null</strong></td></tr><tr><td>Application ClassLoader(应用程序类加载器)</td><td>classpath</td><td>上级为Extension</td></tr><tr><td>自定义类加载器</td><td>自定义</td><td>上级为Application</td></tr></tbody></table><h4 id="启动类加载器"><a href="#启动类加载器" class="headerlink" title="启动类加载器"></a>启动类加载器</h4><p>可通过在控制台输入指令，使得类被启动类加器加载</p><h4 id="拓展类加载器"><a href="#拓展类加载器" class="headerlink" title="拓展类加载器"></a>拓展类加载器</h4><p>如果classpath和JAVA_HOME&#x2F;jre&#x2F;lib&#x2F;ext 下有同名类，加载时会使用<strong>拓展类加载器</strong>加载。当应用程序类加载器发现拓展类加载器已将该同名类加载过了，则不会再次加载</p><h4 id="双亲委派模式"><a href="#双亲委派模式" class="headerlink" title="双亲委派模式"></a>双亲委派模式</h4><p>双亲委派模式，即调用类加载器ClassLoader 的 loadClass 方法时，查找类的规则</p><p>loadClass源码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">protected Class&lt;?&gt; loadClass(String name, boolean resolve)</span><br><span class="line">    throws ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    synchronized (getClassLoadingLock(name)) &#123;</span><br><span class="line">        // 首先查找该类是否已经被该类加载器加载过了</span><br><span class="line">        Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">        //如果没有被加载过</span><br><span class="line">        if (c == null) &#123;</span><br><span class="line">            long t0 = System.nanoTime();</span><br><span class="line">            try &#123;</span><br><span class="line">                //看是否被它的上级加载器加载过了 Extension的上级是Bootstarp，但它显示为null</span><br><span class="line">                if (parent != null) &#123;</span><br><span class="line">                    c = parent.loadClass(name, false);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    //看是否被启动类加载器加载过</span><br><span class="line">                    c = findBootstrapClassOrNull(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">                // ClassNotFoundException thrown if class not found</span><br><span class="line">                // from the non-null parent class loader</span><br><span class="line">                //捕获异常，但不做任何处理</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (c == null) &#123;</span><br><span class="line">                //如果还是没有找到，先让拓展类加载器调用findClass方法去找到该类，如果还是没找到，就抛出异常</span><br><span class="line">                //然后让应用类加载器去找classpath下找该类</span><br><span class="line">                long t1 = System.nanoTime();</span><br><span class="line">                c = findClass(name);</span><br><span class="line"></span><br><span class="line">                // 记录时间</span><br><span class="line">                sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (resolve) &#123;</span><br><span class="line">            resolveClass(c);</span><br><span class="line">        &#125;</span><br><span class="line">        return c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;Copy</span><br></pre></td></tr></table></figure><h4 id="自定义类加载器"><a href="#自定义类加载器" class="headerlink" title="自定义类加载器"></a>自定义类加载器</h4><h5 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h5><ul><li>想加载非 classpath 随意路径中的类文件</li><li>通过接口来使用实现，希望解耦时，常用在框架设计</li><li>这些类希望予以隔离，不同应用的同名类都可以加载，不冲突，常见于 tomcat 容器</li></ul><h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><ul><li>继承ClassLoader父类</li><li>要遵从双亲委派机制，重写 ﬁndClass 方法<ul><li>不是重写loadClass方法，否则不会走双亲委派机制</li></ul></li><li>读取类文件的字节码</li><li>调用父类的 deﬁneClass 方法来加载类</li><li>使用者调用该类加载器的 loadClass 方法</li></ul><h4 id="破坏双亲委派模式"><a href="#破坏双亲委派模式" class="headerlink" title="破坏双亲委派模式"></a>破坏双亲委派模式</h4><ul><li>双亲委派模型的第一次“被破坏”其实发生在双亲委派模型出现之前——即JDK1.2面世以前的“远古”时代<ul><li>建议用户重写findClass()方法，在类加载器中的loadClass()方法中也会调用该方法</li></ul></li><li>双亲委派模型的第二次“被破坏”是由这个模型自身的缺陷导致的<ul><li>如果有基础类型又要调用回用户的代码，此时也会破坏双亲委派模式</li></ul></li><li>双亲委派模型的第三次“被破坏”是由于用户对程序动态性的追求而导致的<ul><li>这里所说的“动态性”指的是一些非常“热”门的名词：代码热替换（Hot Swap）、模块热部署（Hot Deployment）等</li></ul></li></ul><h3 id="6、运行期优化"><a href="#6、运行期优化" class="headerlink" title="6、运行期优化"></a>6、运行期优化</h3><h4 id="分层编译"><a href="#分层编译" class="headerlink" title="分层编译"></a>分层编译</h4><p>JVM 将执行状态分成了 5 个层次：</p><ul><li>0层：解释执行，用解释器将字节码翻译为机器码</li><li>1层：使用 C1 <strong>即时编译器</strong>编译执行（不带 proﬁling）</li><li>2层：使用 C1 即时编译器编译执行（带基本的profiling）</li><li>3层：使用 C1 即时编译器编译执行（带完全的profiling）</li><li>4层：使用 C2 即时编译器编译执行</li></ul><p>proﬁling 是指在运行过程中收集一些程序执行状态的数据，例如【方法的调用次数】，【循环的 回边次数】等</p><h5 id="即时编译器（JIT）与解释器的区别"><a href="#即时编译器（JIT）与解释器的区别" class="headerlink" title="即时编译器（JIT）与解释器的区别"></a>即时编译器（JIT）与解释器的区别</h5><ul><li>解释器<ul><li>将字节码<strong>解释</strong>为机器码，下次即使遇到相同的字节码，仍会执行重复的解释</li><li>是将字节码解释为针对所有平台都通用的机器码</li></ul></li><li>即时编译器<ul><li>将一些字节码<strong>编译</strong>为机器码，<strong>并存入 Code Cache</strong>，下次遇到相同的代码，直接执行，无需再编译</li><li>根据平台类型，生成平台特定的机器码</li></ul></li></ul><p>对于大部分的不常用的代码，我们无需耗费时间将其编译成机器码，而是采取解释执行的方式运行；另一方面，对于仅占据小部分的热点代码，我们则可以将其编译成机器码，以达到理想的运行速度。 执行效率上简单比较一下 Interpreter &lt; C1 &lt; C2，总的目标是发现热点代码（hotspot名称的由 来），并优化这些热点代码</p><h5 id="逃逸分析"><a href="#逃逸分析" class="headerlink" title="逃逸分析"></a>逃逸分析</h5><p>逃逸分析（Escape Analysis）简单来讲就是，Java Hotspot 虚拟机可以分析新创建对象的使用范围，并决定是否在 Java 堆上分配内存的一项技术</p><p>逃逸分析的 JVM 参数如下：</p><ul><li>开启逃逸分析：-XX:+DoEscapeAnalysis</li><li>关闭逃逸分析：-XX:-DoEscapeAnalysis</li><li>显示分析结果：-XX:+PrintEscapeAnalysis</li></ul><p>逃逸分析技术在 Java SE 6u23+ 开始支持，并默认设置为启用状态，可以不用额外加这个参数</p><p><strong>对象逃逸状态</strong></p><p><strong>全局逃逸（GlobalEscape）</strong></p><ul><li>即一个对象的作用范围逃出了当前方法或者当前线程，有以下几种场景：<ul><li>对象是一个静态变量</li><li>对象是一个已经发生逃逸的对象</li><li>对象作为当前方法的返回值</li></ul></li></ul><p><strong>参数逃逸（ArgEscape）</strong></p><ul><li>即一个对象被作为方法参数传递或者被参数引用，但在调用过程中不会发生全局逃逸，这个状态是通过被调方法的字节码确定的</li></ul><p><strong>没有逃逸</strong></p><ul><li>即方法中的对象没有发生逃逸</li></ul><p><strong>逃逸分析优化</strong></p><p>针对上面第三点，当一个对象<strong>没有逃逸</strong>时，可以得到以下几个虚拟机的优化</p><p><strong>锁消除</strong></p><p>我们知道线程同步锁是非常牺牲性能的，当编译器确定当前对象只有当前线程使用，那么就会移除该对象的同步锁</p><p>例如，StringBuffer 和 Vector 都是用 synchronized 修饰线程安全的，但大部分情况下，它们都只是在当前线程中用到，这样编译器就会优化移除掉这些锁操作</p><p>锁消除的 JVM 参数如下：</p><ul><li>开启锁消除：-XX:+EliminateLocks</li><li>关闭锁消除：-XX:-EliminateLocks</li></ul><p>锁消除在 JDK8 中都是默认开启的，并且锁消除都要建立在逃逸分析的基础上</p><p><strong>标量替换</strong></p><p>首先要明白标量和聚合量，<strong>基础类型</strong>和<strong>对象的引用</strong>可以理解为<strong>标量</strong>，它们不能被进一步分解。而能被进一步分解的量就是聚合量，比如：对象</p><p>对象是聚合量，它又可以被进一步分解成标量，将其成员变量分解为分散的变量，这就叫做<strong>标量替换</strong>。</p><p>这样，如果一个对象没有发生逃逸，那压根就不用创建它，只会在栈或者寄存器上创建它用到的成员标量，节省了内存空间，也提升了应用程序性能</p><p>标量替换的 JVM 参数如下：</p><ul><li>开启标量替换：-XX:+EliminateAllocations</li><li>关闭标量替换：-XX:-EliminateAllocations</li><li>显示标量替换详情：-XX:+PrintEliminateAllocations</li></ul><p>标量替换同样在 JDK8 中都是默认开启的，并且都要建立在逃逸分析的基础上</p><p><strong>栈上分配</strong></p><p>当对象没有发生逃逸时，该<strong>对象</strong>就可以通过标量替换分解成成员标量分配在<strong>栈内存</strong>中，和方法的生命周期一致，随着栈帧出栈时销毁，减少了 GC 压力，提高了应用程序性能</p><h4 id="方法内联"><a href="#方法内联" class="headerlink" title="方法内联"></a>方法内联</h4><h5 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a><strong>内联函数</strong></h5><p>内联函数就是在程序编译时，编译器将程序中出现的内联函数的调用表达式用内联函数的函数体来直接进行替换</p><h5 id="JVM内联函数"><a href="#JVM内联函数" class="headerlink" title="JVM内联函数"></a><strong>JVM内联函数</strong></h5><p>C++是否为内联函数由自己决定，Java由<strong>编译器决定</strong>。Java不支持直接声明为内联函数的，如果想让他内联，你只能够向编译器提出请求: 关键字<strong>final修饰</strong> 用来指明那个函数是希望被JVM内联的，如</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public final void doSomething() &#123;  </span><br><span class="line">        // to do something  </span><br><span class="line">&#125;Copy</span><br></pre></td></tr></table></figure><p>总的来说，一般的函数都不会被当做内联函数，只有声明了final后，编译器才会考虑是不是要把你的函数变成内联函数</p><p>JVM内建有许多运行时优化。首先<strong>短方法</strong>更利于JVM推断。流程更明显，作用域更短，副作用也更明显。如果是长方法JVM可能直接就跪了。</p><p>第二个原因则更重要：<strong>方法内联</strong></p><p>如果JVM监测到一些<strong>小方法被频繁的执行</strong>，它会把方法的调用替换成方法体本身，如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private int add4(int x1, int x2, int x3, int x4) &#123; </span><br><span class="line">//这里调用了add2方法</span><br><span class="line">        return add2(x1, x2) + add2(x3, x4);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    private int add2(int x1, int x2) &#123;  </span><br><span class="line">        return x1 + x2;  </span><br><span class="line">    &#125;Copy</span><br></pre></td></tr></table></figure><p>方法调用被替换后</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private int add4(int x1, int x2, int x3, int x4) &#123;  </span><br><span class="line">    //被替换为了方法本身</span><br><span class="line">        return x1 + x2 + x3 + x4;  </span><br><span class="line">    &#125;Copy</span><br></pre></td></tr></table></figure><h4 id="反射优化"><a href="#反射优化" class="headerlink" title="反射优化"></a>反射优化</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Reflect1 &#123;</span><br><span class="line">   public static void foo() &#123;</span><br><span class="line">      System.out.println(&quot;foo...&quot;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public static void main(String[] args) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">      Method foo = Demo3.class.getMethod(&quot;foo&quot;);</span><br><span class="line">      for(int i = 0; i&lt;=16; i++) &#123;</span><br><span class="line">         foo.invoke(null);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;Copy</span><br></pre></td></tr></table></figure><p>foo.invoke 前面 0 ~ 15 次调用使用的是 MethodAccessor 的 NativeMethodAccessorImpl 实现</p><p>invoke方法源码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@CallerSensitive</span><br><span class="line">public Object invoke(Object obj, Object... args)</span><br><span class="line">    throws IllegalAccessException, IllegalArgumentException,</span><br><span class="line">       InvocationTargetException</span><br><span class="line">&#123;</span><br><span class="line">    if (!override) &#123;</span><br><span class="line">        if (!Reflection.quickCheckMemberAccess(clazz, modifiers)) &#123;</span><br><span class="line">            Class&lt;?&gt; caller = Reflection.getCallerClass();</span><br><span class="line">            checkAccess(caller, clazz, obj, modifiers);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //MethodAccessor是一个接口，有3个实现类，其中有一个是抽象类</span><br><span class="line">    MethodAccessor ma = methodAccessor;             // read volatile</span><br><span class="line">    if (ma == null) &#123;</span><br><span class="line">        ma = acquireMethodAccessor();</span><br><span class="line">    &#125;</span><br><span class="line">    return ma.invoke(obj, args);</span><br><span class="line">&#125;Copy</span><br></pre></td></tr></table></figure><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200614133554.png"><img src="/img/JVM/20200614133554.png" alt="img"></a></p><p>会由DelegatingMehodAccessorImpl去调用NativeMethodAccessorImpl</p><p>NativeMethodAccessorImpl源码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class NativeMethodAccessorImpl extends MethodAccessorImpl &#123;</span><br><span class="line">    private final Method method;</span><br><span class="line">    private DelegatingMethodAccessorImpl parent;</span><br><span class="line">    private int numInvocations;</span><br><span class="line"></span><br><span class="line">    NativeMethodAccessorImpl(Method var1) &#123;</span><br><span class="line">        this.method = var1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//每次进行反射调用，会让numInvocation与ReflectionFactory.inflationThreshold的值（15）进行比较，并使使得numInvocation的值加一</span><br><span class="line">//如果numInvocation&gt;ReflectionFactory.inflationThreshold，则会调用本地方法invoke0方法</span><br><span class="line">    public Object invoke(Object var1, Object[] var2) throws IllegalArgumentException, InvocationTargetException &#123;</span><br><span class="line">        if (++this.numInvocations &gt; ReflectionFactory.inflationThreshold() &amp;&amp; !ReflectUtil.isVMAnonymousClass(this.method.getDeclaringClass())) &#123;</span><br><span class="line">            MethodAccessorImpl var3 = (MethodAccessorImpl)(new MethodAccessorGenerator()).generateMethod(this.method.getDeclaringClass(), this.method.getName(), this.method.getParameterTypes(), this.method.getReturnType(), this.method.getExceptionTypes(), this.method.getModifiers());</span><br><span class="line">            this.parent.setDelegate(var3);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return invoke0(this.method, var1, var2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void setParent(DelegatingMethodAccessorImpl var1) &#123;</span><br><span class="line">        this.parent = var1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static native Object invoke0(Method var0, Object var1, Object[] var2);</span><br><span class="line">&#125;Copy</span><br><span class="line">//ReflectionFactory.inflationThreshold()方法的返回值</span><br><span class="line">private static int inflationThreshold = 15;Copy</span><br></pre></td></tr></table></figure><ul><li>一开始if条件不满足，就会调用本地方法invoke0</li><li>随着numInvocation的增大，当它大于ReflectionFactory.inflationThreshold的值16时，就会本地方法访问器替换为一个运行时动态生成的访问器，来提高效率<ul><li>这时会从反射调用变为<strong>正常调用</strong>，即直接调用 Reflect1.foo()</li></ul></li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200614135011.png"><img src="/img/JVM/20200614135011.png" alt="img"></a></p><h2 id="五、内存模型"><a href="#五、内存模型" class="headerlink" title="五、内存模型"></a>五、内存模型</h2><p>内存模型内容详见 <a href="https://nyimac.gitee.io/2020/06/08/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/#%E5%9B%9B%E3%80%81%E5%85%B1%E4%BA%AB%E6%A8%A1%E5%9E%8B%E4%B9%8B%E5%86%85%E5%AD%98">JAVA并发 第四章</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JVM&quot;&gt;&lt;a href=&quot;#JVM&quot; class=&quot;headerlink&quot; title=&quot;JVM&quot;&gt;&lt;/a&gt;JVM&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;引用博客: &lt;a href=&quot;https://blog.csdn.net/weixin_50280576/</summary>
      
    
    
    
    <category term="jvm" scheme="http://example.com/categories/jvm/"/>
    
    
    <category term="jvm" scheme="http://example.com/tags/jvm/"/>
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>猪猪阿娜饲养日记</title>
    <link href="http://example.com/2022/03/17/%E7%8C%AA%E7%8C%AA%E9%98%BF%E5%A8%9C%E9%A5%B2%E5%85%BB%E6%97%A5%E8%AE%B0/"/>
    <id>http://example.com/2022/03/17/%E7%8C%AA%E7%8C%AA%E9%98%BF%E5%A8%9C%E9%A5%B2%E5%85%BB%E6%97%A5%E8%AE%B0/</id>
    <published>2022-03-17T03:21:25.000Z</published>
    <updated>2023-02-08T16:19:17.717Z</updated>
    
    <content type="html"><![CDATA[<h1 id="猪猪阿娜饲养日记"><a href="#猪猪阿娜饲养日记" class="headerlink" title="猪猪阿娜饲养日记"></a>猪猪阿娜饲养日记</h1><h2 id="2022-x2F-3-x2F-25"><a href="#2022-x2F-3-x2F-25" class="headerlink" title="2022&#x2F;3&#x2F;25"></a>2022&#x2F;3&#x2F;25</h2><blockquote><p>​今天是摆烂的第七天了，从公司离开也一周时间了，明明知道这样是不行的，确实除了打球、睡觉、打游戏、吃饭，生活四点一线，是谁都觉得不对劲了。阿娜明明觉得我不对劲了，也是小心翼翼地提醒我，虽然我知道都是我的不对，但是心里还是多少有点不太得劲。怎么说呢，就像不被人看好一般，不过也确实，这样的我凭什么让人放心和看好。也不知道会不会继续摆烂，但是确实不应该摆烂了。我打心里厌恶摆烂这个词，回想3年前这个词又怎么会和我扯上丝毫联系。我不想也不愿再这么下去。</p><p>​和阿娜的见面也因为疫情的原因，应该是要被延后了。哈哈哈，倒计时也没有了动力。这一周和阿娜的时间似乎也因为游戏变得那么的不真实，以至于想要去回想，却又怎么也想不起来。这一周我打心里对不起自己，对不起任何人。</p><p>​我其实在害怕，也在迷茫。我害怕阿娜因为我身上的希望靠近我，我因为我身上的希望离开我，我害怕有一天变成自己不喜欢的样子，变成阿娜不喜欢的样子。</p><p>​因此，我希望这是新的一周，好好锻炼积极生活，努力做好自己的每一件事。</p></blockquote><hr><h2 id="2022-x2F-3-x2F-26"><a href="#2022-x2F-3-x2F-26" class="headerlink" title="2022&#x2F;3&#x2F;26"></a>2022&#x2F;3&#x2F;26</h2><blockquote><p>​猪头阿娜，昨天难得挺晚起的，不过今天也挺晚起的，哈哈哈哈哈哈哈，完蛋了有的猪头要开始像猪头了，不过还是阿娜的舍友像猪头一点，下午了还不要起。</p><p>​昨天一天倒是没有什么太多的交谈，我发现了现在阿娜晚上基本都不要我了，完蛋了。背单词，写思维导图，不过我昨天也和朋友打游戏了就是了，也管不了我的阿娜，嘻。猪头。居然还用甄嬛传来骗我，我就说哪里来的这么离奇的身世，还不让我多问，我算是看懂了，这个猪头的套路，不会再上当了，嘻。</p><p>​又熬夜，又熬夜，不喜欢熬夜的小朋友了。</p></blockquote><p><img src="/img/megumi/2022-3-26.jpg"></p><h2 id="2022-x2F-5-x2F-16"><a href="#2022-x2F-5-x2F-16" class="headerlink" title="2022&#x2F;5&#x2F;16"></a>2022&#x2F;5&#x2F;16</h2><blockquote><p>​</p></blockquote><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="2022-x2F-5-x2F-17"><a href="#2022-x2F-5-x2F-17" class="headerlink" title="2022&#x2F;5&#x2F;17"></a>2022&#x2F;5&#x2F;17</h2><blockquote><p>​今天给猪猪点了个花生汤，猪猪嫌弃配送费贵结果就硬生生换了一家，猪头，就像我说的再贵，你想喝不都是一样的嘛，只要你想喝，这个才是重点！</p><p><img src="/img/megumi/image-20220517235407281.png" alt="image-20220517235407281"></p><p>​还有今天上海好消息，下三位数啦，离见阿娜脑婆又进了一天嘻</p><p><img src="/img/megumi/image-20220517235449280.png" alt="image-20220517235449280"></p><p>​还有生孩子这个事，早就表过态啦！猪头不想生就不生</p><p><img src="/img/megumi/image-20220517235658018.png" alt="image-20220517235658018"></p><p>​嘻日常涩涩</p><p><img src="/img/megumi/image-20220517235740517.png" alt="image-20220517235740517"></p><p>​嘻，日常嘴贱</p><p><img src="/img/megumi/image-20220517235945016.png" alt="image-20220517235945016"></p><p><img src="/img/megumi/image-20220518000340602.png" alt="image-20220518000340602"></p><p>​呜呜呜因为嘴贱被阿娜挂了两次电话，哈哈哈哈哈哈哈哈哈哈哈，我可太喜欢嘴贱了（具体原因好像是说要给plmm打视频，哈哈哈哈哈哈哈）</p><p><img src="/img/megumi/image-20220518000404421.png" alt="image-20220518000404421"></p></blockquote><h2 id="2022-x2F-5-x2F-18"><a href="#2022-x2F-5-x2F-18" class="headerlink" title="2022&#x2F;5&#x2F;18"></a>2022&#x2F;5&#x2F;18</h2><blockquote><p>​今天不想写，哈哈哈哈哈哈哈哈哈最近实在太忙了，没怎么理阿娜猪头，那没办法了贴一张阿娜的少妇图吧</p></blockquote><h2 id="2022-x2F-5-x2F-19"><a href="#2022-x2F-5-x2F-19" class="headerlink" title="2022&#x2F;5&#x2F;19"></a>2022&#x2F;5&#x2F;19</h2><blockquote><p>​哈哈哈哈哈哈哈头发重要，我觉得吧，男人的头发非常重要，呜呜呜，贝雷帽一点都不酷。虽然他就这样了，但是他就是一点都不酷，哭唧唧。已经想要重开了。</p><p>​猪头担心我公交车的事，一点都不快的啦放心放心</p><p>​日常听阿娜发舍友牢骚，哈哈哈哈哈哈哈哈哈哈，我都学会了只要一个劲的怎么会，离谱，会这样！主要是过几天可能又一起吃饭饭了，女生是这样的。</p><p>​哈哈哈哈哈哈哈哈哈，绑住了就找老婆要贴贴，脑婆真好看，嘿嘿</p><p><img src="/img/megumi/image-20220524103154001.png" alt="image-20220524103154001"></p><p>​亲阿娜的jiojio，任重而道远</p><p><img src="/img/megumi/image-20220524103411967.png" alt="image-20220524103411967"></p><p>​勿忘家耻</p><p><img src="/img/megumi/image-20220524103544187.png" alt="image-20220524103544187"></p><p>​大反击</p><p><img src="/img/megumi/image-20220524103633725.png" alt="image-20220524103633725"></p><p>​今天这么多问题，讨厌的阿娜，要是看到这个日记，那几本我就已经在旁边了，呜呜呜</p><p><img src="/img/megumi/image-20220524103730267.png" alt="image-20220524103730267"></p></blockquote><h2 id="2022-x2F-5-x2F-20"><a href="#2022-x2F-5-x2F-20" class="headerlink" title="2022&#x2F;5&#x2F;20"></a>2022&#x2F;5&#x2F;20</h2><blockquote><p>​第二个520啦，哈哈哈哈哈哈哈哈哈猪头又在厕所</p><p><img src="/img/megumi/image-20220524110003749.png" alt="image-20220524110003749"></p><p>​猪头，还认为我没发红包猪头，支付宝傻逼定时红包，都不踩点的！</p><p>​<img src="/img/megumi/image-20220524111330616.png" alt="image-20220524111330616"></p><p>​不可能绝对不可能</p><p><img src="/img/megumi/image-20220524110742723.png" alt="image-20220524110742723"></p><p>​新手机壳到啦，嘻我很喜欢啦，超爱你</p><p>​傻猪</p><p><img src="/img/megumi/image-20220524111051913.png" alt="image-20220524111051913"></p><p>​哈哈哈哈哈哈哈，好懒不想发pyq或者wx了，偷阿娜个图，敲级爱你</p><p><img src="/img/megumi/image-20220524111639256.png" alt="image-20220524111639256"></p></blockquote><h2 id="2022-x2F-5-x2F-21"><a href="#2022-x2F-5-x2F-21" class="headerlink" title="2022&#x2F;5&#x2F;21"></a>2022&#x2F;5&#x2F;21</h2><blockquote><p>​哼，天天晚上就迟迟睡，困死我了，走了也不解释一下，生气了</p><p><img src="/img/megumi/image-20220524111819650.png" alt="image-20220524111819650"></p><p>​猪猪绝对不要在深夜被男人约出去组局哦。危险！我会很生气！非常生气！!</p><p><img src="/img/megumi/image-20220524112057142.png" alt="image-20220524112057142"></p><p>​哈哈哈哈，今天来了一个面后端的四年开发经验，结果是包装的</p><p><img src="/img/megumi/image-20220524112202831.png" alt="image-20220524112202831"></p><p>​究极不喜欢在公司聚餐，因为会感觉还没有下班，还是回去自己吃的舒服</p><p>​哈哈哈哈哈，日常涩涩，没涩涩活不下去了，好想亲亲，还有好久</p><p><img src="/img/megumi/image-20220524112410538.png" alt="image-20220524112410538"></p><p>​尴尬是不可能尴尬的</p><p><img src="/img/megumi/image-20220524112457490.png" alt="image-20220524112457490"></p><p>​嘻又是爱老婆的一天</p></blockquote><h2 id="2022-x2F-5-x2F-22"><a href="#2022-x2F-5-x2F-22" class="headerlink" title="2022&#x2F;5&#x2F;22"></a>2022&#x2F;5&#x2F;22</h2><blockquote><p>​哈哈哈哈哈哈，洗澡的时候突然想起来某些人吃zwj的醋，哈哈哈哈哈哈啥醋都吃，怎么有个这么可爱的女朋友，想想就笑出来了</p><p><img src="/img/megumi/image-20220524112700098.png" alt="image-20220524112700098"></p><p>​哈哈哈哈小馋猪诞生了</p><p><img src="/img/megumi/image-20220524112754471.png" alt="image-20220524112754471"></p><p>​特地表扬一下，10分就睡了</p><p><img src="/img/megumi/image-20220524112841128.png" alt="image-20220524112841128"></p><p>​哈哈哈哈哈，快笑死了，进图书馆前-&gt;</p><p><img src="/img/megumi/image-20220524113040800.png" alt="image-20220524113040800"></p><p>​进图书馆后-&gt;</p><p><img src="/img/megumi/image-20220524112933138.png" alt="image-20220524112933138"></p><p><img src="/img/megumi/image-20220524113105240.png" alt="image-20220524113105240"></p><p>​今天的脑婆超级可爱,果然老婆得饿一饿，才听话</p><p><img src="/img/megumi/image-20220524113234062.png" alt="image-20220524113234062"></p><p>​日常涩涩</p><p><img src="/img/megumi/image-20220524113352611.png" alt="image-20220524113352611"></p><p>​哈哈哈哈哈哈哈打了好久的电话，老是说我都不留你，我留你了又说我浮夸，呜呜呜，哈哈哈哈哈哈哈哈哈，日常作死，看阿娜心情不错，和阿娜皮了一下，结果皮出事了，哈哈哈哈哈哈，我倒贴的我倒贴的，我超喜欢阿娜，我发现了，以后给阿娜写东西，要全是好话，反正好话是一句不记得，坏话全都记住了，真有你的hlh。</p><p><img src="/img/megumi/image-20220524113614764.png" alt="image-20220524113614764"></p><p>​嘻超爱你的</p><p><img src="/img/megumi/image-20220524113657037.png" alt="image-20220524113657037"></p></blockquote><h2 id="2022-x2F-5-x2F-23"><a href="#2022-x2F-5-x2F-23" class="headerlink" title="2022&#x2F;5&#x2F;23"></a>2022&#x2F;5&#x2F;23</h2><blockquote><p>如果是原相机</p></blockquote><h2 id="2023-x2F-2-x2F-9"><a href="#2023-x2F-2-x2F-9" class="headerlink" title="2023&#x2F;2&#x2F;9"></a>2023&#x2F;2&#x2F;9</h2><blockquote><p>嘿嘿今天碰到了一个好有猫德的猫猫，昨天就跑进我的房间了，就想给他喂吃的，结果没来得及就跑掉了还觉得好可惜</p><p>今天刚好下雨了，他又在家的后门避雨，嘿嘿这次就用了一个鸡蛋就收买了他，然后他就给rua了，超级主动的那种，啊好开心</p><p>然后因为是第一次rua猫猫，家里又没什么吃的所以花了十几块钱买了一些猫条，结果阿娜脑婆当场吃醋，哈哈哈哈哈，好好好我的钱钱都是你的，都给你花，超级猪猪</p><p>真的主动让人rua的猫猫真的好可爱</p><p>然后我和阿娜脑婆说要是阿娜能主动扑到我怀里来也一定很可爱</p><p>主动的要抱抱的女孩和猫猫最可爱了</p><p><img src="/img/megumi/1675872978083.png" alt="image-20230209001624223"></p><p>好戳我，啊开心的一天</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;猪猪阿娜饲养日记&quot;&gt;&lt;a href=&quot;#猪猪阿娜饲养日记&quot; class=&quot;headerlink&quot; title=&quot;猪猪阿娜饲养日记&quot;&gt;&lt;/a&gt;猪猪阿娜饲养日记&lt;/h1&gt;&lt;h2 id=&quot;2022-x2F-3-x2F-25&quot;&gt;&lt;a href=&quot;#2022-x2F-3-x</summary>
      
    
    
    
    <category term="猪猪阿娜" scheme="http://example.com/categories/%E7%8C%AA%E7%8C%AA%E9%98%BF%E5%A8%9C/"/>
    
    
    <category term="猪猪阿娜" scheme="http://example.com/tags/%E7%8C%AA%E7%8C%AA%E9%98%BF%E5%A8%9C/"/>
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="http://example.com/2022/03/16/Git/"/>
    <id>http://example.com/2022/03/16/Git/</id>
    <published>2022-03-16T03:21:25.000Z</published>
    <updated>2022-07-06T02:51:35.133Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><blockquote><p>git文档位置： 【金山文档】 Git<br><a href="https://kdocs.cn/l/ciKdDGYkYaWr">https://kdocs.cn/l/ciKdDGYkYaWr</a></p></blockquote><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><blockquote><p>git pull origin develop<br>git pull origin develop 动作是去获取远程仓库中 develop 分支上的 commits，然后把origin&#x2F;develop merge 到你目前 checkout 下来的分支中</p><p>git pull<br>git pull 就是去你之前 checkout 的分支上去操作，比如，如果你本地的 checkout 的分支track 的就是 origin&#x2F;develop，那么 git pull 就等于 git pull origin develop</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Git&quot;&gt;&lt;a href=&quot;#Git&quot; class=&quot;headerlink&quot; title=&quot;Git&quot;&gt;&lt;/a&gt;Git&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;git文档位置： 【金山文档】 Git&lt;br&gt;&lt;a href=&quot;https://kdocs.cn/l/ci</summary>
      
    
    
    
    <category term="版本控制" scheme="http://example.com/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
    
    <category term="版本控制" scheme="http://example.com/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
    <category term="git" scheme="http://example.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>线程与进程</title>
    <link href="http://example.com/2022/03/16/%E7%BA%BF%E7%A8%8B%E4%B8%8E%E8%BF%9B%E7%A8%8B/"/>
    <id>http://example.com/2022/03/16/%E7%BA%BF%E7%A8%8B%E4%B8%8E%E8%BF%9B%E7%A8%8B/</id>
    <published>2022-03-16T03:21:25.000Z</published>
    <updated>2022-06-08T01:28:38.874Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线程与进程"><a href="#线程与进程" class="headerlink" title="线程与进程"></a>线程与进程</h1><blockquote><p>转载自：<a href="https://gitee.com/gu_chun_bo/java-construct/blob/master/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/java%E5%B9%B6%E5%8F%911.md">https://gitee.com/gu_chun_bo/java-construct/blob/master/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/java%E5%B9%B6%E5%8F%911.md</a></p><p>修改自：Megumi</p></blockquote><h2 id="1-进程与线程"><a href="#1-进程与线程" class="headerlink" title="1. 进程与线程"></a>1. 进程与线程</h2><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><blockquote><ul><li>程序由指令和数据组成，但是这些指令要运行，数据要读写，就必须将指令加载到cpu，数据加载至内存。在指令运行过程中还需要用到磁盘，网络等设备，进程就是用来加载指令管理内存管理IO的</li><li>当一个指令被运行，从磁盘加载这个程序的代码到内存，这时候就开启了一个进程</li><li>进程就可以视为程序的一个实例，大部分程序都可以运行多个实例进程（例如记事本，浏览器等），部分只可以运行一个实例进程（例如360安全卫士）</li></ul></blockquote><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><ul><li>一个进程之内可以分为<code>一到多个线程</code>。</li><li>一个线程就是一个指令流，将指令流中的一条条指令以一定的顺序交给 CPU 执行</li><li>Java 中，线程作为<code>最小调度单位</code>，进程作为<code>资源分配</code>的最小单位。 在 windows 中进程是不活动的，只是作为线程的容器（这里感觉要学了计算机组成原理之后会更有感觉吧！）</li></ul><h3 id="二者对比"><a href="#二者对比" class="headerlink" title="二者对比"></a>二者对比</h3><blockquote><ul><li>进程基本上相互独立的，而线程存在于进程内，是进程的一个子集</li><li>进程拥有共享的资源，如内存空间等，供其内部的线程共享</li><li>进程间通信较为复杂</li><li>同一台计算机的进程通信称为 <code>IPC</code>（Inter-process communication）</li><li>不同计算机之间的进程通信，需要通过网络，并遵守共同的协议，例如 <code>HTTP </code>线程通信相对简单，因为它们共享进程内的内存，一个例子是多个线程可以访问同一个共享变量</li><li>线程更轻量，线程上下文切换成本一般上要比进程上下文切换低</li></ul></blockquote><h2 id="2-并行与并发"><a href="#2-并行与并发" class="headerlink" title="2. 并行与并发"></a>2. 并行与并发</h2><h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><p>在单核 cpu 下，线程实际还是串行执行的。操作系统中有一个组件叫做任务调度器，将 cpu 的时间片（windows下时间片最小约为 15 毫秒）分给不同的程序使用，只是由于 cpu 在线程间（时间片很短）的切换非常快，人类感觉是同时运行的 。一般会将这种<code>线程轮流使用 CPU</code> 的做法称为<code>并发（concurrent）</code></p><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200305194534-433138.png" alt="1583408729416"></p><h3 id="并行"><a href="#并行" class="headerlink" title="并行"></a>并行</h3><p>多核 cpu下，每个核（core） 都可以调度运行线程，这时候线程可以是并行的，不同的线程同时使用不同的cpu在执行。</p><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200305194655-483025.png" alt="1583408812725"></p><h3 id="二者对比-1"><a href="#二者对比-1" class="headerlink" title="二者对比"></a>二者对比</h3><blockquote><p>引用 Rob Pike 的一段描述：并发（concurrent）是同一时间应对（dealing with）多件事情的能力，并行（parallel）是同一时间动手做（doing）多件事情的能力</p><ul><li>家庭主妇做饭、打扫卫生、给孩子喂奶，她一个人轮流交替做这多件事，这时就是并发</li><li>雇了3个保姆，一个专做饭、一个专打扫卫生、一个专喂奶，互不干扰，这时是并行</li><li>家庭主妇雇了个保姆，她们一起这些事，这时既有并发，也有并行（这时会产生竞争，例如锅只有一口，一<br>个人用锅时，另一个人就得等待）</li></ul></blockquote><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="同步和异步的概念"><a href="#同步和异步的概念" class="headerlink" title="同步和异步的概念"></a>同步和异步的概念</h4><p><span style ="color:red">以调用方的角度讲</span>，如果需要等待结果返回才能继续运行的话就是同步，如果不需要等待就是异步</p><h4 id="1-设计"><a href="#1-设计" class="headerlink" title="1) 设计"></a>1) 设计</h4><p>多线程可以使方法的执行变成异步的，比如说读取磁盘文件时，假设读取操作花费了5秒，如果没有线程的调度机制，这么cpu只能等5秒，啥都不能做。</p><h4 id="2-结论"><a href="#2-结论" class="headerlink" title="2) 结论"></a>2) 结论</h4><ul><li>比如在项目中，视频文件需要转换格式等操作比较费时，这时开一个新线程处理视频转换，避免阻塞主线程</li><li>tomcat 的异步 servlet 也是类似的目的，让用户线程处理耗时较长的操作，避免阻塞 tomcat 的工作线程</li><li>ui 程序中，开线程进行其他操作，避免阻塞 ui 线程</li></ul><h1 id="java线程"><a href="#java线程" class="headerlink" title="java线程"></a>java线程</h1><h2 id="1-创建和运行线程"><a href="#1-创建和运行线程" class="headerlink" title="1. 创建和运行线程"></a>1. 创建和运行线程</h2><h4 id="方法一，直接使用-Thread"><a href="#方法一，直接使用-Thread" class="headerlink" title="方法一，直接使用 Thread"></a>方法一，直接使用 Thread</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造方法的参数是给线程指定名字，，推荐给线程起个名字</span></span><br><span class="line"><span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;t1&quot;</span>) &#123;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="comment">// run 方法内实现了要执行的任务</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"> log.debug(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line">t1.start();</span><br></pre></td></tr></table></figure><h4 id="方法二，使用-Runnable-配合-Thread"><a href="#方法二，使用-Runnable-配合-Thread" class="headerlink" title="方法二，使用 Runnable 配合 Thread"></a>方法二，使用 Runnable 配合 Thread</h4><p>把【线程】和【任务】（要执行的代码）分开，Thread 代表线程，Runnable 可运行的任务（线程要执行的代码）Test2.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建任务对象</span></span><br><span class="line"><span class="type">Runnable</span> <span class="variable">task2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"> log.debug(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 参数1 是任务对象; 参数2 是线程名字，推荐给线程起个名字</span></span><br><span class="line"><span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(task2, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line">t2.start();</span><br></pre></td></tr></table></figure><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>方法1 是把线程和任务合并在了一起，方法2 是把线程和任务分开了，用 Runnable 更容易与线程池等高级 API 配合，用 Runnable 让任务类脱离了 Thread 继承体系，更灵活。通过查看源码可以发现，方法二其实到底还是通过方法一执行的！</p><h4 id="方法三，FutureTask-配合-Thread"><a href="#方法三，FutureTask-配合-Thread" class="headerlink" title="方法三，FutureTask 配合 Thread"></a>方法三，FutureTask 配合 Thread</h4><p>FutureTask 能够接收 Callable 类型的参数，用来处理有返回结果的情况 Test3.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 实现多线程的第三种方法可以返回数据</span></span><br><span class="line">    <span class="type">FutureTask</span> <span class="variable">futureTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Callable</span>&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;多线程任务&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 主线程阻塞，同步等待 task 执行完毕的结果</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(futureTask,<span class="string">&quot;我的名字&quot;</span>).start();</span><br><span class="line">    log.debug(<span class="string">&quot;主线程&quot;</span>);</span><br><span class="line">    log.debug(<span class="string">&quot;&#123;&#125;&quot;</span>,futureTask.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Future就是对于具体的Runnable或者Callable任务的执行结果进行取消、查询是否完成、获取结果。必要时可以通过get方法获取执行结果，该方法会<code>阻塞直到任务返回结果</code>。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Future</span>&lt;V&gt; &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">cancel</span><span class="params">(<span class="type">boolean</span> mayInterruptIfRunning)</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isCancelled</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isDone</span><span class="params">()</span>;</span><br><span class="line">    V <span class="title function_">get</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException;</span><br><span class="line">    V <span class="title function_">get</span><span class="params">(<span class="type">long</span> timeout, TimeUnit unit)</span></span><br><span class="line">        <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  Future提供了三种功能：   　　</p><ol><li><p>判断任务是否完成；   　　</p></li><li><p>能够中断任务；   　　</p></li><li><p>能够获取任务执行结果。</p></li></ol><p><a href="https://mp.weixin.qq.com/s/RX5rVuGr6Ab0SmKigmZEag">FutureTask是Future和Runable的实现</a></p><h2 id="2-线程运行原理"><a href="#2-线程运行原理" class="headerlink" title="2. 线程运行原理"></a>2. 线程运行原理</h2><h3 id="虚拟机栈与栈帧"><a href="#虚拟机栈与栈帧" class="headerlink" title="虚拟机栈与栈帧"></a>虚拟机栈与栈帧</h3><p>虚拟机栈描述的是Java方法执行的内存模型：每个方法被执行的时候都会同时创建一个栈帧(stack frame)用于存储局部变量表、操作数栈、动态链接、方法出口等信息，是属于线程的私有的。当java中使用多线程时，每个线程都会维护它自己的栈帧！每个线程只能有一个活动栈帧，对应着当前正在执行的那个方法</p><h3 id="线程上下文切换（Thread-Context-Switch）"><a href="#线程上下文切换（Thread-Context-Switch）" class="headerlink" title="线程上下文切换（Thread Context Switch）"></a>线程上下文切换（Thread Context Switch）</h3><p>因为以下一些原因导致 cpu 不再执行当前的线程，转而执行另一个线程的代码</p><ul><li>线程的 cpu 时间片用完(每个线程轮流执行，看前面并行的概念)</li><li>垃圾回收</li><li>有更高优先级的线程需要运行</li><li>线程自己调用了 <code>sleep</code>、<code>yield</code>、<code>wait</code>、<code>join</code>、<code>park</code>、<code>synchronized</code>、<code>lock</code> 等方法</li></ul><p>当 Context Switch 发生时，需要由操作系统保存当前线程的状态，并恢复另一个线程的状态，Java 中对应的概念就是<code>程序计数器</code>（Program Counter Register），它的作用是记住下一条 <code>jvm 指令的执行地址</code>，是线程私有的</p><h2 id="3-Thread的常见方法"><a href="#3-Thread的常见方法" class="headerlink" title="3. Thread的常见方法"></a>3. Thread的常见方法</h2><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200306114615-258720.png" alt="1583466371181"></p><h3 id="1-start-与-run"><a href="#1-start-与-run" class="headerlink" title="1. start 与 run"></a>1. start 与 run</h3><h4 id="调用start"><a href="#调用start" class="headerlink" title="调用start"></a>调用start</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>()&#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">          log.debug(<span class="string">&quot;我是一个新建的线程正在运行中&quot;</span>);</span><br><span class="line">          FileReader.read(fileName);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    thread.setName(<span class="string">&quot;新建线程&quot;</span>);</span><br><span class="line">    thread.start();</span><br><span class="line">    log.debug(<span class="string">&quot;主线程&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：程序在 t1 线程运行， <code>run()</code>方法里面内容的调用是异步的 Test4.java</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">11</span>:<span class="string">59:40.711 [main] DEBUG com.concurrent.test.Test4 - 主线程</span></span><br><span class="line"><span class="attr">11</span>:<span class="string">59:40.711 [新建线程] DEBUG com.concurrent.test.Test4 - 我是一个新建的线程正在运行中</span></span><br><span class="line"><span class="attr">11</span>:<span class="string">59:40.732 [新建线程] DEBUG com.concurrent.test.FileReader - read [test] start ...</span></span><br><span class="line"><span class="attr">11</span>:<span class="string">59:40.735 [新建线程] DEBUG com.concurrent.test.FileReader - read [test] end ... cost: 3 ms</span></span><br></pre></td></tr></table></figure><h4 id="调用run"><a href="#调用run" class="headerlink" title="调用run"></a>调用run</h4><p>将上面代码的<code>thread.start();</code>改为 <code>thread.run();</code>输出结果如下：程序仍在 main 线程运行， <code>run()</code>方法里面内容的调用还是同步的</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">12</span>:<span class="string">03:46.711 [main] DEBUG com.concurrent.test.Test4 - 我是一个新建的线程正在运行中</span></span><br><span class="line"><span class="attr">12</span>:<span class="string">03:46.727 [main] DEBUG com.concurrent.test.FileReader - read [test] start ...</span></span><br><span class="line"><span class="attr">12</span>:<span class="string">03:46.729 [main] DEBUG com.concurrent.test.FileReader - read [test] end ... cost: 2 ms</span></span><br><span class="line"><span class="attr">12</span>:<span class="string">03:46.730 [main] DEBUG com.concurrent.test.Test4 - 主线程</span></span><br></pre></td></tr></table></figure><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><p>直接调用 <code>run()</code> 是在主线程中执行了 <code>run()</code>，没有启动新的线程<br>使用 <code>start()</code> 是启动新的线程，通过新的线程间接执行 <code>run()</code>方法 中的代码</p><h3 id="2-sleep-与-yield"><a href="#2-sleep-与-yield" class="headerlink" title="2. sleep 与 yield"></a>2. sleep 与 yield</h3><h4 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h4><ol><li>调用 sleep 会让当前线程从 Running 进入 Timed Waiting 状态（阻塞）</li><li>其它线程可以使用 interrupt 方法打断正在睡眠的线程，那么被打断的线程这时就会抛出 <code>InterruptedException</code>异常【注意：这里打断的是正在休眠的线程，而不是其它状态的线程】</li><li>睡眠结束后的线程未必会立刻得到执行(需要分配到cpu时间片)</li><li>建议用 TimeUnit 的 <code>sleep()</code> 代替 Thread 的 <code>sleep()</code>来获得更好的可读性</li></ol><h4 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h4><ol><li>调用 yield 会让当前线程从 Running 进入 Runnable 就绪状态，然后调度执行其它线程</li><li>具体的实现依赖于操作系统的任务调度器(就是可能没有其它的线程正在执行，虽然调用了yield方法，但是也没有用)</li></ol><h4 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h4><p>yield使cpu调用其它线程，但是cpu可能会再分配时间片给该线程；而sleep需要等过了休眠时间之后才有可能被分配cpu时间片</p><h3 id="3-线程优先级"><a href="#3-线程优先级" class="headerlink" title="3. 线程优先级"></a>3. 线程优先级</h3><p>线程优先级会提示（hint）调度器优先调度该线程，但它仅仅是一个提示，调度器可以忽略它<br>如果 cpu 比较忙，那么优先级高的线程会获得更多的时间片，但 cpu 闲时，优先级几乎没作用</p><h3 id="4-join"><a href="#4-join" class="headerlink" title="4. join"></a>4. join</h3><p>在主线程中调用t1.join，则主线程会等待t1线程执行完之后再继续执行 Test10.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    log.debug(<span class="string">&quot;开始&quot;</span>);</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;开始&quot;</span>);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line">        r = <span class="number">10</span>;</span><br><span class="line">    &#125;,<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">    t1.start();</span><br><span class="line">    t1.join();</span><br><span class="line">    log.debug(<span class="string">&quot;结果为:&#123;&#125;&quot;</span>, r);</span><br><span class="line">    log.debug(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200306163734-131567.png" alt="1583483843354"></p><h3 id="5-interrupt-方法详解"><a href="#5-interrupt-方法详解" class="headerlink" title="5. interrupt 方法详解"></a>5. interrupt 方法详解</h3><h4 id="打断-sleep，wait，join-的线程"><a href="#打断-sleep，wait，join-的线程" class="headerlink" title="打断 sleep，wait，join 的线程"></a>打断 sleep，wait，join 的线程</h4><p>先了解一些interrupt()方法的相关知识：<a href="https://www.cnblogs.com/noteless/p/10372826.html#0">博客地址</a></p><p> sleep，wait，join 的线程，这几个方法都会让线程进入阻塞状态，以 sleep 为例Test7.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;线程任务执行&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10000</span>); <span class="comment">// wait, join</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="comment">//e.printStackTrace();</span></span><br><span class="line">                log.debug(<span class="string">&quot;被打断&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    t1.start();</span><br><span class="line">    Thread.sleep(<span class="number">500</span>);</span><br><span class="line">    log.debug(<span class="string">&quot;111是否被打断？&#123;&#125;&quot;</span>,t1.isInterrupted());</span><br><span class="line">    t1.interrupt();</span><br><span class="line">    log.debug(<span class="string">&quot;222是否被打断？&#123;&#125;&quot;</span>,t1.isInterrupted());</span><br><span class="line">    Thread.sleep(<span class="number">500</span>);</span><br><span class="line">    log.debug(<span class="string">&quot;222是否被打断？&#123;&#125;&quot;</span>,t1.isInterrupted());</span><br><span class="line">    log.debug(<span class="string">&quot;主线程&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：（我下面将中断和打断两个词混用）可以看到，打断 sleep 的线程, 会清空中断状态，刚被中断完之后<code>t1.isInterrupted()</code>的值为<code>true</code>，后来变为<code>false</code>，即中断状态会被清除。那么线程是否被中断过可以通过异常来判断。【同时要注意如果打断被<code>join()</code>，<code>wait()</code> blocked的线程也是一样会被清除，被清除(interrupt status will be cleared)的意思即中断状态设置为<code>false</code>，被设置( interrupt status will be set)的意思就是中断状态设置为<code>true</code>】</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">17</span>:<span class="string">06:11.890 [Thread-0] DEBUG com.concurrent.test.Test7 - 线程任务执行</span></span><br><span class="line"><span class="attr">17</span>:<span class="string">06:12.387 [main] DEBUG com.concurrent.test.Test7 - 111是否被打断？false</span></span><br><span class="line"><span class="attr">17</span>:<span class="string">06:12.390 [Thread-0] DEBUG com.concurrent.test.Test7 - 被打断</span></span><br><span class="line"><span class="attr">17</span>:<span class="string">06:12.390 [main] DEBUG com.concurrent.test.Test7 - 222是否被打断？true</span></span><br><span class="line"><span class="attr">17</span>:<span class="string">06:12.890 [main] DEBUG com.concurrent.test.Test7 - 222是否被打断？false</span></span><br><span class="line"><span class="attr">17</span>:<span class="string">06:12.890 [main] DEBUG com.concurrent.test.Test7 - 主线程</span></span><br></pre></td></tr></table></figure><h4 id="打断正常运行的线程"><a href="#打断正常运行的线程" class="headerlink" title="打断正常运行的线程"></a>打断正常运行的线程</h4><p>打断正常运行的线程, 线程并不会暂停，只是调用方法<code>Thread.currentThread().isInterrupted();</code>的返回值为true，可以判断<code>Thread.currentThread().isInterrupted();</code>的值来手动停止线程</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">interrupted</span> <span class="operator">=</span> Thread.currentThread().isInterrupted();</span><br><span class="line">            <span class="keyword">if</span>(interrupted) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;被打断了, 退出循环&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">    t1.start();</span><br><span class="line">    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    log.debug(<span class="string">&quot;interrupt&quot;</span>);</span><br><span class="line">    t1.interrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="终止模式之两阶段终止模式"><a href="#终止模式之两阶段终止模式" class="headerlink" title="终止模式之两阶段终止模式"></a>终止模式之两阶段终止模式</h4><p>Two Phase Termination，就是考虑在一个线程T1中如何优雅地终止另一个线程T2？这里的优雅指的是给T2一个料理后事的机会（如释放锁）。</p><p>如下所示：那么线程的<code>isInterrupted()</code>方法可以取得线程的打断标记，如果线程在睡眠<code>sleep</code>期间被打断，打断标记是不会变的，为false，但是<code>sleep</code>期间被打断会抛出异常，我们据此手动设置打断标记为<code>true</code>；如果是在程序正常运行期间被打断的，那么打断标记就被自动设置为<code>true</code>。处理好这两种情况那我们就可以放心地来料理后事啦！</p><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200306201632-731186.png" alt="1583496991915"></p><p>代码实现如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test11</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">TwoParseTermination</span> <span class="variable">twoParseTermination</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TwoParseTermination</span>();</span><br><span class="line">        twoParseTermination.start();</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);  <span class="comment">// 让监控线程执行一会儿</span></span><br><span class="line">        twoParseTermination.stop(); <span class="comment">// 停止监控线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TwoParseTermination</span>&#123;</span><br><span class="line">    Thread thread ;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>&#123;</span><br><span class="line">        thread = <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (Thread.currentThread().isInterrupted())&#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;线程结束。。正在料理后事中&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                    log.debug(<span class="string">&quot;正在执行监控的功能&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    Thread.currentThread().interrupt();</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span>&#123;</span><br><span class="line">        thread.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sleep，yiled，wait，join-对比"><a href="#sleep，yiled，wait，join-对比" class="headerlink" title="sleep，yiled，wait，join 对比"></a>sleep，yiled，wait，join 对比</h3><p>关于join的原理和这几个方法的对比：<a href="https://blog.csdn.net/dataiyangu/article/details/104956755">看这里</a></p><blockquote><p>补充：</p><ol><li>sleep，join，yield，interrupted是Thread类中的方法</li><li>wait&#x2F;notify是object中的方法</li></ol><p>sleep 不释放锁、释放cpu<br>join 释放锁、抢占cpu<br>yiled 不释放锁、释放cpu<br>wait 释放锁、释放cpu</p></blockquote><h2 id="4-守护线程"><a href="#4-守护线程" class="headerlink" title="4. 守护线程"></a>4. 守护线程</h2><p>默认情况下，java进程需要等待所有的线程结束后才会停止，但是有一种特殊的线程，叫做守护线程，在其他线程全部结束的时候即使守护线程还未结束代码未执行完java进程也会停止。普通线程t1可以调用<code>t1.setDeamon(true);</code> 方法变成守护线程 </p><blockquote><p>注意<br>垃圾回收器线程就是一种守护线程<br>Tomcat 中的 Acceptor 和 Poller 线程都是守护线程，所以 Tomcat 接收到 shutdown 命令后，不会等<br>待它们处理完当前请求</p></blockquote><h2 id="5-线程状态之五种状态"><a href="#5-线程状态之五种状态" class="headerlink" title="5. 线程状态之五种状态"></a>5. 线程状态之五种状态</h2><p>五种状态的划分主要是从操作系统的层面进行划分的</p><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200307093417-638644.png" alt="1583507073055"></p><ol><li>初始状态，仅仅是在语言层面上创建了线程对象，即<code>Thead thread = new Thead();</code>，还未与操作系统线程关联</li><li>可运行状态，也称就绪状态，指该线程已经被创建，与操作系统相关联，等待cpu给它分配时间片就可运行</li><li>运行状态，指线程获取了CPU时间片，正在运行<ol><li>当CPU时间片用完，线程会转换至【可运行状态】，等待 CPU再次分配时间片，会导致我们前面讲到的上下文切换</li></ol></li><li>阻塞状态<ol><li>如果调用了阻塞API，如BIO读写文件，那么线程实际上不会用到CPU，不会分配CPU时间片，会导致上下文切换，进入【阻塞状态】</li><li>等待BIO操作完毕，会由操作系统唤醒阻塞的线程，转换至【可运行状态】</li><li>与【可运行状态】的区别是，只要操作系统一直不唤醒线程，调度器就一直不会考虑调度它们，CPU就一直不会分配时间片</li></ol></li><li>终止状态，表示线程已经执行完毕，生命周期已经结束，不会再转换为其它状态</li></ol><h2 id="6-线程状态之六种状态"><a href="#6-线程状态之六种状态" class="headerlink" title="6. 线程状态之六种状态"></a>6. 线程状态之六种状态</h2><p>这是从 Java API 层面来描述的，我们主要研究的就是这种。状态转换详情图：<a href="https://www.jianshu.com/p/ec94ed32895f">地址</a><br>根据 Thread.State 枚举，分为六种状态 Test12.java</p><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200307093352-614933.png" alt="1583507709834"></p><ol><li>NEW 跟五种状态里的初始状态是一个意思</li><li>RUNNABLE 是当调用了 <code>start()</code> 方法之后的状态，注意，Java API 层面的 <code>RUNNABLE</code> 状态涵盖了操作系统层面的【可运行状态】、【运行状态】和【io阻塞状态】（由于 BIO 导致的线程阻塞，在 Java 里无法区分，仍然认为是可运行）</li><li><code>BLOCKED</code> ， <code>WAITING</code> ， <code>TIMED_WAITING</code> 都是 Java API 层面对【阻塞状态】的细分，后面会在状态转换一节<br>详述</li></ol><h1 id="线程问题"><a href="#线程问题" class="headerlink" title="线程问题"></a>线程问题</h1><h2 id="1-线程出现问题的根本原因分析"><a href="#1-线程出现问题的根本原因分析" class="headerlink" title="1. 线程出现问题的根本原因分析"></a>1. 线程出现问题的根本原因分析</h2><p>线程出现问题的根本原因是因为线程上下文切换，导致线程里的指令没有执行完就切换执行其它线程了，下面举一个例子 Test13.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i&lt;<span class="number">5000</span>;i++)&#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i&lt;<span class="number">5000</span>;i++)&#123;</span><br><span class="line">            count--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    t1.start();</span><br><span class="line">    t2.start();</span><br><span class="line">    t1.join();</span><br><span class="line">    t2.join();</span><br><span class="line">    log.debug(<span class="string">&quot;count的值是&#123;&#125;&quot;</span>,count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我将从字节码的层面进行分析：</p><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200307160551-757236.png" alt="1583568350082"></p><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200307160948-54298.png" alt="1583568587168"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getstatic i <span class="comment">// 获取静态变量i的值</span></span><br><span class="line">iconst_1 <span class="comment">// 准备常量1</span></span><br><span class="line">iadd <span class="comment">// 自增</span></span><br><span class="line">putstatic i <span class="comment">// 将修改后的值存入静态变量i</span></span><br><span class="line">    </span><br><span class="line">getstatic i <span class="comment">// 获取静态变量i的值</span></span><br><span class="line">iconst_1 <span class="comment">// 准备常量1</span></span><br><span class="line">isub <span class="comment">// 自减</span></span><br><span class="line">putstatic i <span class="comment">// 将修改后的值存入静态变量i</span></span><br></pre></td></tr></table></figure><p>可以看到<code>count++</code> 和 <code>count--</code> 操作实际都是需要这个4个指令完成的，那么这里问题就来了！Java 的内存模型如下，完成静态变量的自增，自减需要在主存和工作内存中进行数据交换：</p><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200309204444-155703.png" alt="1583569253392"></p><p>如果代码是正常按顺序运行的，那么count的值不会计算错</p><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200307162207-752990.png" alt="1583569326977"></p><p>出现负数的情况：</p><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200307162301-374560.png" alt="1583569380639"></p><p>出现正数的情况：</p><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200307162337-43718.png" alt="1583569416016"></p><h3 id="问题的进一步描述"><a href="#问题的进一步描述" class="headerlink" title="问题的进一步描述"></a>问题的进一步描述</h3><h4 id="临界区"><a href="#临界区" class="headerlink" title="临界区"></a>临界区</h4><ol><li><p>一个程序运行多线程本身是没有问题的</p></li><li><p>问题出现在多个线程共享资源的时候</p><ol><li>多个线程同时对共享资源进行读操作本身也没有问题</li><li>问题出现在对对共享资源同时进行读写操作时就有问题了</li></ol></li><li><p>先定义一个叫做临界区的概念：一段代码内如果存在对共享资源的多线程读写操作，那么称这段代码为临界区</p><ol><li><p>如</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span></span><br><span class="line">&#123;<span class="comment">// 临界区</span></span><br><span class="line"> counter++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">decrement</span><span class="params">()</span></span><br><span class="line">&#123;<span class="comment">// 临界区</span></span><br><span class="line"> counter--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h4 id="竞态条件"><a href="#竞态条件" class="headerlink" title="竞态条件"></a>竞态条件</h4><p>多个线程在临界区执行，那么由于代码指令的执行不确定而导致的结果问题，称为竞态条件</p><h2 id="2-synchronized-解决方案"><a href="#2-synchronized-解决方案" class="headerlink" title="2. synchronized 解决方案"></a>2. synchronized 解决方案</h2><p>为了避免临界区中的竞态条件发生，由多种手段可以达到</p><ul><li>阻塞式解决方案：synchronized ，Lock</li><li>非阻塞式解决方案：原子变量</li></ul><p>现在讨论使用synchronized来进行解决，即俗称的对象锁，它采用互斥的方式让同一时刻至多只有一个线程持有对象锁，其他线程如果想获取这个锁就会阻塞住，这样就能保证拥有锁的线程可以安全的执行临界区内的代码，不用担心线程上下文切换</p><blockquote><p>注意<br>虽然 java 中互斥和同步都可以采用 synchronized 关键字来完成，但它们还是有区别的：                                          </p><p>互斥是保证临界区的竞态条件发生，同一时刻只能有一个线程执行临界区的代码                                                                 </p><p>同步是由于线程执行的先后，顺序不同但是需要一个线程等待其它线程运行到某个点。</p></blockquote><h3 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(对象) <span class="comment">// 线程1获得锁， 那么线程2的状态是(blocked)</span></span><br><span class="line">&#123;</span><br><span class="line"> 临界区</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的实例程序使用synchronized后如下，计算出的结果是正确！Test13.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">room</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">     <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">             <span class="keyword">synchronized</span> (room) &#123;</span><br><span class="line">             counter++;</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">     <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">             <span class="keyword">synchronized</span> (room) &#123;</span><br><span class="line">             counter--;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     &#125;, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line">     t1.start();</span><br><span class="line">     t2.start();</span><br><span class="line">     t1.join();</span><br><span class="line">     t2.join();</span><br><span class="line">     log.debug(<span class="string">&quot;&#123;&#125;&quot;</span>,counter);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="synchronized原理"><a href="#synchronized原理" class="headerlink" title="synchronized原理"></a>synchronized原理</h4><p>synchronized实际上利用对象保证了临界区代码的原子性，临界区内的代码在外界看来是不可分割的，不会被线程切换所打断</p><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200307170035-215697.png" alt="1583571633729"></p><h3 id="synchronized-加在方法上"><a href="#synchronized-加在方法上" class="headerlink" title="synchronized 加在方法上"></a>synchronized 加在方法上</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//等价于</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(<span class="built_in">this</span>) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//------------------------------------------------------------------------------------------------</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">// 等价于</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Test.class) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-变量的线程安全分析"><a href="#3-变量的线程安全分析" class="headerlink" title="3 变量的线程安全分析"></a>3 变量的线程安全分析</h2><h3 id="成员变量和静态变量的线程安全分析"><a href="#成员变量和静态变量的线程安全分析" class="headerlink" title="成员变量和静态变量的线程安全分析"></a>成员变量和静态变量的线程安全分析</h3><ul><li>如果没有变量没有在线程间共享，那么变量是安全的</li><li>如果变量在线程间共享<ul><li>如果只有读操作，则线程安全</li><li>如果有读写操作，则这段代码是临界区，需要考虑线程安全</li></ul></li></ul><h3 id="局部变量线程安全分析"><a href="#局部变量线程安全分析" class="headerlink" title="局部变量线程安全分析"></a>局部变量线程安全分析</h3><ul><li>局部变量【局部变量被初始化为基本数据类型】是安全的</li><li>局部变量引用的对象未必是安全的<ul><li>如果局部变量引用的对象没有引用线程共享的对象，那么是线程安全的</li><li>如果局部变量引用的对象引用了一个线程共享的对象，那么要考虑线程安全的</li></ul></li></ul><h4 id="线程安全的情况"><a href="#线程安全的情况" class="headerlink" title="线程安全的情况"></a>线程安全的情况</h4><p>局部变量【局部变量被初始化为基本数据类型】是安全的，示例如下</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">     i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个线程调用 test1() 方法时局部变量 i，会在每个线程的栈帧内存中被创建多份，因此不存在共享</p><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200307211927-566637.png" alt="1583587166210"></p><h4 id="线程不安全的情况"><a href="#线程不安全的情况" class="headerlink" title="线程不安全的情况"></a>线程不安全的情况</h4><p>如果局部变量引用的对象逃离方法的范围，那么要考虑线程安全的，代码示例如下 Test15.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test15</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">UnsafeTest</span> <span class="variable">unsafeTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UnsafeTest</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                unsafeTest.method1();</span><br><span class="line">            &#125;,<span class="string">&quot;线程&quot;</span>+i).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UnsafeTest</span>&#123;</span><br><span class="line">    ArrayList&lt;String&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            method2();</span><br><span class="line">            method3();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line">        arrayList.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span> &#123;</span><br><span class="line">        arrayList.remove(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="不安全原因分析"><a href="#不安全原因分析" class="headerlink" title="不安全原因分析"></a>不安全原因分析</h5><p>无论哪个线程中的 method2 和method3 引用的都是同一个对象中的 list 成员变量：一个 ArrayList ，在添加一个元素的时候，它可能会有两步来完成： </p><ol><li>第一步，在 arrayList[Size] 的位置存放此元素； 第二步增大 Size 的值。 </li><li>在单线程运行的情况下，如果 Size &#x3D; 0，添加一个元素后，此元素在位置 0，而且 Size&#x3D;1；而如果是在多线程情下，比如有两个线程，线程 A 先将元素存放在位置 0。但是此时 CPU 调线程A暂停，线程 B 得到运行的机会。线程B也向此 ArrayList 添加元素，因为此时 Size 仍等于 0 （注意哦，我们假设的是添加一个元素是要两个步骤哦，而线程A仅仅完成了步骤1），所以线程B也将元素存放在位置0。然后线程A和线程B都继续运行，都增加 Size 的值。 那好，现在我们来看看 ArrayList 的情况，元素实际上只有一个，存放在位置 0，而 Size 却等于 2。这就是“线程不 安全”了。</li></ol><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200307215429-139261.png" alt="1583589268096"></p><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200307212611-483979.png" alt="1583587571334"></p><h5 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h5><p>可以将list修改成局部变量，那么就不会有上述问题了</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">safeTest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        method2(arrayList);</span><br><span class="line">        method3(arrayList);&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">(ArrayList arrayList)</span> &#123;</span><br><span class="line">        arrayList.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">(ArrayList arrayList)</span> &#123;</span><br><span class="line">        arrayList.remove(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="思考-private-或-final的重要性"><a href="#思考-private-或-final的重要性" class="headerlink" title="思考  private 或 final的重要性"></a>思考  private 或 final的重要性</h5><p>方法访问修饰符带来的思考，如果把 method2 和 method3 的方法修改为 public 会不会导致线程安全问题？</p><p>情况1：有其它线程调用 method2 和 method3；</p><p>情况2：在情况1 的基础上，为 ThreadSafe 类添加子类，子类覆盖 method2 或 method3 方法，</p><p>即如下所示： 从这个例子可以看出 private 或 final 提供【安全】的意义所在，请体会开闭原则中的【闭】</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadSafe</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">(<span class="type">int</span> loopNumber)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; loopNumber; i++) &#123;</span><br><span class="line">            method2(list);</span><br><span class="line">            method3(list);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">(ArrayList&lt;String&gt; list)</span> &#123;</span><br><span class="line">        list.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">(ArrayList&lt;String&gt; list)</span> &#123;</span><br><span class="line">        list.remove(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadSafeSubClass</span> <span class="keyword">extends</span> <span class="title class_">ThreadSafe</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">(ArrayList&lt;String&gt; list)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            list.remove(<span class="number">0</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常见线程安全类"><a href="#常见线程安全类" class="headerlink" title="常见线程安全类"></a>常见线程安全类</h3><ol><li>String</li><li>Integer</li><li>StringBuffer</li><li>Random</li><li>Vector</li><li>Hashtable</li><li>java.util.concurrent 包下的类</li></ol><p>这里说它们是线程安全的是指，<span style ="color:red">多个线程调用它们同一个实例的某个方法时，是线程安全的</span>。也可以理解为它们的每个方法是原子的</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Hashtable</span> <span class="variable">table</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line"> table.put(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value1&quot;</span>);</span><br><span class="line">&#125;).start();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line"> table.put(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value2&quot;</span>);</span><br><span class="line">&#125;).start();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="线程安全类方法的组合"><a href="#线程安全类方法的组合" class="headerlink" title="线程安全类方法的组合"></a>线程安全类方法的组合</h4><p>但注意它们多个方法的组合不是原子的，见下面分析</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Hashtable</span> <span class="variable">table</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line"><span class="comment">// 线程1，线程2</span></span><br><span class="line"><span class="keyword">if</span>( table.get(<span class="string">&quot;key&quot;</span>) == <span class="literal">null</span>) &#123;</span><br><span class="line"> table.put(<span class="string">&quot;key&quot;</span>, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200307222301-656435.png" alt="1583590979975"></p><h4 id="不可变类的线程安全"><a href="#不可变类的线程安全" class="headerlink" title="不可变类的线程安全"></a>不可变类的线程安全</h4><p><code>String</code>和<code>Integer</code>类都是不可变的类，因为其类内部状态是不可改变的，因此它们的方法都是线程安全的，有同学或许有疑问，<code>String</code> 有 <code>replace</code>，<code>substring</code> 等方法【可以】改变值啊，其实调用这些方法返回的已经是一个新创建的对象了！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Immutable</span>&#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">public</span> <span class="title function_">Immutable</span><span class="params">(<span class="type">int</span> value)</span>&#123;</span><br><span class="line">     <span class="built_in">this</span>.value = value;</span><br><span class="line"> &#125;</span><br><span class="line">     <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getValue</span><span class="params">()</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">this</span>.value;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">public</span> Immutable <span class="title function_">add</span><span class="params">(<span class="type">int</span> v)</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Immutable</span>(<span class="built_in">this</span>.value + v);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="示例分析-是否线程安全"><a href="#示例分析-是否线程安全" class="headerlink" title="示例分析-是否线程安全"></a>示例分析-是否线程安全</h4><h5 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h5><p>分析线程是否安全，先对类的成员变量，类变量，局部变量进行考虑，如果变量会在各个线程之间共享，那么就得考虑线程安全问题了，如果变量A引用的是线程安全类的实例，并且只调用该线程安全类的一个方法，那么该变量A是线程安全的的。下面对实例一进行分析：此类不是线程安全的，<code>MyAspect</code>切面类只有一个实例，成员变量<code>start</code> 会被多个线程同时进行读写操作</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line">        <span class="comment">// 是否安全？</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Before(&quot;execution(* *(..))&quot;)</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">            start = System.nanoTime();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@After(&quot;execution(* *(..))&quot;)</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">            System.out.println(<span class="string">&quot;cost time:&quot;</span> + (end-start));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="示例二"><a href="#示例二" class="headerlink" title="示例二"></a>示例二</h5><p>此例是典型的三层模型调用，<code>MyServlet</code> <code>UserServiceImpl</code> <code>UserDaoImpl</code>类都只有一个实例，<code>UserDaoImpl</code>类中没有成员变量，<code>update</code>方法里的变量引用的对象不是线程共享的，所以是线程安全的；<code>UserServiceImpl</code>类中只有一个线程安全的<code>UserDaoImpl</code>类的实例，那么<code>UserServiceImpl</code>类也是线程安全的，同理 <code>MyServlet</code>也是线程安全的</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"> <span class="comment">// 是否安全</span></span><br><span class="line"> <span class="keyword">private</span> <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line"> userService.update(...);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"> <span class="comment">// 是否安全</span></span><br><span class="line"> <span class="keyword">private</span> <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line"> userDao.update();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update user set password = ? where username = ?&quot;</span>;</span><br><span class="line"> <span class="comment">// 是否安全</span></span><br><span class="line"> <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line"> <span class="comment">// ...</span></span><br><span class="line"> &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"> <span class="comment">// ...</span></span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="示例三"><a href="#示例三" class="headerlink" title="示例三"></a>示例三</h5><p>跟示例二大体相似，<code>UserDaoImpl</code>类中有成员变量，那么多个线程可以对成员变量<code>conn</code> 同时进行操作，故是不安全的</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="comment">// 是否安全</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        userService.update(...);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="comment">// 是否安全</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="comment">// 是否安全</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update user set password = ? where username = ?&quot;</span>;</span><br><span class="line">        conn = DriverManager.getConnection(<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="示例四"><a href="#示例四" class="headerlink" title="示例四"></a>示例四</h5><p>跟示例三大体相似，<code>UserServiceImpl</code>类的update方法中 UserDao是作为局部变量存在的，所以每个线程访问的时候都会新建有一个<code>UserDao</code>对象，新建的对象是线程独有的，所以是线程安全的</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="comment">// 是否安全</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        userService.update(...);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">        userDao.update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="comment">// 是否安全</span></span><br><span class="line">    <span class="type">private</span> <span class="variable">Connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update user set password = ? where username = ?&quot;</span>;</span><br><span class="line">        conn = DriverManager.getConnection(<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="示例五"><a href="#示例五" class="headerlink" title="示例五"></a>示例五</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 是否安全</span></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        foo(sdf);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="title function_">foo</span><span class="params">(SimpleDateFormat sdf)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Test</span>().bar();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 foo 的行为是不确定的，可能导致不安全的发生，被称之为<strong>外星方法</strong>，因为foo方法可以被重写，导致线程不安全。在String类中就考虑到了这一点，String类是<code>finally</code>的，子类不能重写它的方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">(SimpleDateFormat sdf)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">dateStr</span> <span class="operator">=</span> <span class="string">&quot;1999-10-11 00:00:00&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sdf.parse(dateStr);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-习题分析"><a href="#4-习题分析" class="headerlink" title="4. 习题分析"></a>4. 习题分析</h2><p>Test16.java</p><h2 id="5-Monitor-概念"><a href="#5-Monitor-概念" class="headerlink" title="5. Monitor 概念"></a>5. Monitor 概念</h2><h3 id="Java-对象头"><a href="#Java-对象头" class="headerlink" title="Java 对象头"></a>Java 对象头</h3><p>以 32 位虚拟机为例,普通对象的对象头结构如下，其中的Klass Word为指针，指向对应的Class对象；</p><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200308223951-617147.png" alt="1583651065372"></p><p>数组对象</p><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200308150448-901728.png" alt="1583651088663"></p><p>其中 Mark Word 结构为</p><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200308151311-525787.png" alt="1583651590160"></p><p>所以一个对象的结构如下：</p><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200308224345-655905.png" alt="1583678624634"></p><h3 id="锁的几种类型"><a href="#锁的几种类型" class="headerlink" title="锁的几种类型"></a>锁的几种类型</h3><blockquote><p><a href="https://blog.csdn.net/qq_35583772/article/details/94544010?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164819035416781685311741%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=164819035416781685311741&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-94544010.142%5Ev5%5Epc_search_insert_es_download,143%5Ev6%5Eregister&amp;utm_term=%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%81&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/qq_35583772/article/details/94544010?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164819035416781685311741%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=164819035416781685311741&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-94544010.142^v5^pc_search_insert_es_download,143^v6^register&amp;utm_term=%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%81&amp;spm=1018.2226.3001.4187</a></p></blockquote><h3 id="Monitor-原理"><a href="#Monitor-原理" class="headerlink" title="Monitor 原理"></a>Monitor 原理</h3><p>Monitor被翻译为监视器或者说管程</p><p>每个java对象都可以关联一个Monitor，如果使用<code>synchronized</code>给对象上锁（重量级），该对象头的Mark Word中就被设置为指向Monitor对象的指针</p><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200309172316-799735.png" alt="1583652360228"></p><ul><li>刚开始时Monitor中的Owner为null</li><li>当Thread-2 执行synchronized(obj){}代码时就会将Monitor的所有者Owner 设置为 Thread-2，上锁成功，Monitor中同一时刻只能有一个Owner</li><li>当Thread-2 占据锁时，如果线程Thread-3，Thread-4也来执行synchronized(obj){}代码，就会进入EntryList中变成BLOCKED状态</li><li>Thread-2 执行完同步代码块的内容，然后唤醒 EntryList 中等待的线程来竞争锁，竞争时是非公平的</li><li>图中 WaitSet 中的 Thread-0，Thread-1 是之前获得过锁，但条件不满足进入 WAITING 状态的线程，后面讲wait-notify 时会分析</li></ul><blockquote><p>注意：synchronized 必须是进入同一个对象的 monitor 才有上述的效果不加 synchronized 的对象不会关联监视器，不遵从以上规则</p></blockquote><h3 id="synchronized原理-1"><a href="#synchronized原理-1" class="headerlink" title="synchronized原理"></a>synchronized原理</h3><p>代码如下 Test17.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> Object lock=<span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">        counter++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反编译后的部分字节码</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"> <span class="attr">0</span> <span class="string">getstatic #2 &lt;com/concurrent/test/Test17.lock&gt;</span></span><br><span class="line"><span class="comment"> # 取得lock的引用（synchronized开始了）</span></span><br><span class="line"> <span class="attr">3</span> <span class="string">dup    </span></span><br><span class="line"><span class="comment"> # 复制操作数栈栈顶的值放入栈顶，即复制了一份lock的引用</span></span><br><span class="line"> <span class="attr">4</span> <span class="string">astore_1</span></span><br><span class="line"><span class="comment"> # 操作数栈栈顶的值弹出，即将lock的引用存到局部变量表中</span></span><br><span class="line"> <span class="attr">5</span> <span class="string">monitorenter</span></span><br><span class="line"><span class="comment"> # 将lock对象的Mark Word置为指向Monitor指针</span></span><br><span class="line"> <span class="attr">6</span> <span class="string">getstatic #3 &lt;com/concurrent/test/Test17.counter&gt;</span></span><br><span class="line"> <span class="attr">9</span> <span class="string">iconst_1</span></span><br><span class="line"><span class="attr">10</span> <span class="string">iadd</span></span><br><span class="line"><span class="attr">11</span> <span class="string">putstatic #3 &lt;com/concurrent/test/Test17.counter&gt;</span></span><br><span class="line"><span class="attr">14</span> <span class="string">aload_1</span></span><br><span class="line"><span class="comment"># 从局部变量表中取得lock的引用，放入操作数栈栈顶</span></span><br><span class="line"><span class="attr">15</span> <span class="string">monitorexit</span></span><br><span class="line"><span class="comment"># 将lock对象的Mark Word重置，唤醒EntryList</span></span><br><span class="line"><span class="attr">16</span> <span class="string">goto 24 (+8)</span></span><br><span class="line"><span class="comment"># 下面是异常处理指令，可以看到，如果出现异常，也能自动地释放锁</span></span><br><span class="line"><span class="attr">19</span> <span class="string">astore_2</span></span><br><span class="line"><span class="attr">20</span> <span class="string">aload_1</span></span><br><span class="line"><span class="attr">21</span> <span class="string">monitorexit</span></span><br><span class="line"><span class="attr">22</span> <span class="string">aload_2</span></span><br><span class="line"><span class="attr">23</span> <span class="string">athrow</span></span><br><span class="line"><span class="attr">24</span> <span class="string">return</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注意：方法级别的 synchronized 不会在字节码指令中有所体现</p></blockquote><h3 id="synchronized-原理进阶"><a href="#synchronized-原理进阶" class="headerlink" title="synchronized 原理进阶"></a>synchronized 原理进阶</h3><h4 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h4><p>轻量级锁的使用场景是：如果一个对象虽然有多个线程要对它进行加锁，但是加锁的时间是错开的（也就是没有人可以竞争的），那么可以使用轻量级锁来进行优化。轻量级锁对使用者是透明的，即语法仍然是<code>synchronized</code>，假设有两个方法同步块，利用同一个对象加锁</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">synchronized</span>( obj ) &#123;</span><br><span class="line">         <span class="comment">// 同步块 A</span></span><br><span class="line">         method2();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">synchronized</span>( obj ) &#123;</span><br><span class="line">         <span class="comment">// 同步块 B</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>每次指向到synchronized代码块时，都会创建锁记录（Lock Record）对象，每个线程都会包括一个锁记录的结构，锁记录内部可以储存对象的Mark Word和对象引用reference<ol><li><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200309200902-382362.png" alt="1583755737580"></li></ol></li><li>让锁记录中的Object reference指向对象，并且尝试用cas(compare and sweep)替换Object对象的Mark Word ，将Mark Word 的值存入锁记录中<ol><li><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200309201132-961387.png" alt="1583755888236"></li></ol></li><li>如果cas替换成功，那么对象的对象头储存的就是锁记录的地址和状态01，如下所示<ol><li><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200309201247-989088.png" alt="1583755964276"></li></ol></li><li>如果cas失败，有两种情况<ol><li>如果是其它线程已经持有了该Object的轻量级锁，那么表示有竞争，将进入锁膨胀阶段</li><li>如果是自己的线程已经执行了synchronized进行加锁，那么那么再添加一条 Lock Record 作为重入的计数<ol><li><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200309201634-451646.png" alt="1583756190177"></li></ol></li></ol></li><li>当线程退出synchronized代码块的时候，**如果获取的是取值为 null 的锁记录 **，表示有重入，这时重置锁记录，表示重入计数减一<ol><li><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200309201919-357425.png" alt="1583756357835"></li></ol></li><li>当线程退出synchronized代码块的时候，如果获取的锁记录取值不为 null，那么使用cas将Mark Word的值恢复给对象<ol><li>成功则解锁成功</li><li>失败，则说明轻量级锁进行了锁膨胀或已经升级为重量级锁，进入重量级锁解锁流程</li></ol></li></ol><h4 id="锁膨胀"><a href="#锁膨胀" class="headerlink" title="锁膨胀"></a>锁膨胀</h4><p>如果在尝试加轻量级锁的过程中，cas操作无法成功，这是有一种情况就是其它线程已经为这个对象加上了轻量级锁，这是就要进行锁膨胀，将轻量级锁变成重量级锁。</p><ol><li>当 Thread-1 进行轻量级加锁时，Thread-0 已经对该对象加了轻量级锁<ol><li><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200309203715-909034.png" alt="1583757433691"></li></ol></li><li>这时 Thread-1 加轻量级锁失败，进入锁膨胀流程<ol><li>即为对象申请Monitor锁，让Object指向重量级锁地址，然后自己进入Monitor 的EntryList 变成BLOCKED状态</li><li><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200309203947-654193.png" alt="1583757586447"></li></ol></li><li>当Thread-0 推出synchronized同步块时，使用cas将Mark Word的值恢复给对象头，失败，那么会进入重量级锁的解锁过程，即按照Monitor的地址找到Monitor对象，将Owner设置为null，唤醒EntryList 中的Thread-1线程</li></ol><h4 id="自旋优化"><a href="#自旋优化" class="headerlink" title="自旋优化"></a>自旋优化</h4><p>重量级锁竞争的时候，还可以使用自旋来进行优化，如果当前线程自旋成功（即在自旋的时候持锁的线程释放了锁），那么当前线程就可以不用进行上下文切换就获得了锁</p><ol><li>自旋重试成功的情况<ol><li><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200309204835-425698.png" alt="1583758113724"></li></ol></li><li>自旋重试失败的情况，自旋了一定次数还是没有等到持锁的线程释放锁<ol><li><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200309204915-424942.png" alt="1583758136650"></li></ol></li></ol><p>自旋会占用 CPU 时间，单核 CPU 自旋就是浪费，多核 CPU 自旋才能发挥优势。在 Java 6 之后自旋锁是自适应的，比如对象刚刚的一次自旋操作成功过，那么认为这次自旋成功的可能性会高，就多自旋几次；反之，就少自旋甚至不自旋，总之，比较智能。Java 7 之后不能控制是否开启自旋功能</p><h4 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h4><p>在轻量级的锁中，我们可以发现，如果同一个线程对同一个2对象进行重入锁时，也需要执行CAS操作，这是有点耗时滴，那么java6开始引入了偏向锁的东东，只有第一次使用CAS时将对象的Mark Word头设置为入锁线程ID，<strong>之后这个入锁线程再进行重入锁时，发现线程ID是自己的，那么就不用再进行CAS了</strong></p><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200309213209-28609.png" alt="1583760728806"></p><h5 id="偏向状态"><a href="#偏向状态" class="headerlink" title="偏向状态"></a>偏向状态</h5><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200309215610-51761.png" alt="1583762169169"></p><p>一个对象的创建过程</p><ol><li><p>如果开启了偏向锁（默认是开启的），那么对象刚创建之后，Mark Word 最后三位的值101，并且这是它的Thread，epoch，age都是0，在加锁的时候进行设置这些的值.</p></li><li><p>偏向锁默认是延迟的，不会在程序启动的时候立刻生效，如果想避免延迟，可以添加虚拟机参数来禁用延迟：-<code>XX:BiasedLockingStartupDelay=0</code>来禁用延迟</p></li><li><p>注意：处于偏向锁的对象解锁后，线程 id 仍存储于对象头中</p></li><li><p>实验Test18.java，加上虚拟机参数-XX:BiasedLockingStartupDelay&#x3D;0进行测试</p><ol><li>&#96;&#96;&#96;java<br>public static void main(String[] args) throws InterruptedException {<br>    Test1 t &#x3D; new Test1();<br>    test.parseObjectHeader(getObjectHeader(t))；<br>    synchronized (t){<br>        test.parseObjectHeader(getObjectHeader(t));<br>    }<br>    test.parseObjectHeader(getObjectHeader(t));<br>}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">1. 输出结果如下，三次输出的状态码都为101</span><br><span class="line">   </span><br><span class="line">```properties</span><br><span class="line">biasedLockFlag (1bit): 1</span><br><span class="line">LockFlag (2bit): 01</span><br><span class="line">biasedLockFlag (1bit): 1</span><br><span class="line">LockFlag (2bit): 01</span><br><span class="line">biasedLockFlag (1bit): 1</span><br><span class="line">LockFlag (2bit): 01</span><br></pre></td></tr></table></figure></li></ol></li></ol><p>测试禁用：如果没有开启偏向锁，那么对象创建后最后三位的值为001，这时候它的hashcode，age都为0，hashcode是第一次用到<code>hashcode</code>时才赋值的。在上面测试代码运行时在添加 VM 参数<code>-XX:-UseBiasedLocking</code>禁用偏向锁（禁用偏向锁则优先使用轻量级锁），退出<code>synchronized</code>状态变回001</p><ol><li><p>测试代码Test18.java 虚拟机参数<code>-XX:-UseBiasedLocking</code></p></li><li><p>输出结果如下，最开始状态为001，然后加轻量级锁变成00，最后恢复成001</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">biasedLockFlag</span> <span class="string">(1bit): 0</span></span><br><span class="line"><span class="attr">LockFlag</span> <span class="string">(2bit): 01</span></span><br><span class="line"><span class="attr">LockFlag</span> <span class="string">(2bit): 00</span></span><br><span class="line"><span class="attr">biasedLockFlag</span> <span class="string">(1bit): 0</span></span><br><span class="line"><span class="attr">LockFlag</span> <span class="string">(2bit): 01</span></span><br></pre></td></tr></table></figure></li></ol><h5 id="撤销偏向锁-hashcode方法"><a href="#撤销偏向锁-hashcode方法" class="headerlink" title="撤销偏向锁-hashcode方法"></a>撤销偏向锁-hashcode方法</h5><p>测试 <code>hashCode</code>：当调用对象的hashcode方法的时候就会撤销这个对象的偏向锁，因为使用偏向锁时没有位置存<code>hashcode</code>的值了</p><ol><li><p>测试代码如下，使用虚拟机参数<code>-XX:BiasedLockingStartupDelay=0</code>  ，确保我们的程序最开始使用了偏向锁！但是结果显示程序还是使用了轻量级锁。  Test20.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">Test1</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test1</span>();</span><br><span class="line">    t.hashCode();</span><br><span class="line">    test.parseObjectHeader(getObjectHeader(t));</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">synchronized</span> (t)&#123;</span><br><span class="line">        test.parseObjectHeader(getObjectHeader(t));</span><br><span class="line">    &#125;</span><br><span class="line">    test.parseObjectHeader(getObjectHeader(t));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>输出结果</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">biasedLockFlag</span> <span class="string">(1bit): 0</span></span><br><span class="line"><span class="attr">LockFlag</span> <span class="string">(2bit): 01</span></span><br><span class="line"><span class="attr">LockFlag</span> <span class="string">(2bit): 00</span></span><br><span class="line"><span class="attr">biasedLockFlag</span> <span class="string">(1bit): 0</span></span><br><span class="line"><span class="attr">LockFlag</span> <span class="string">(2bit): 01</span></span><br></pre></td></tr></table></figure></li></ol><h5 id="撤销偏向锁-其它线程使用对象"><a href="#撤销偏向锁-其它线程使用对象" class="headerlink" title="撤销偏向锁-其它线程使用对象"></a>撤销偏向锁-其它线程使用对象</h5><p>这里我们演示的是偏向锁撤销变成轻量级锁的过程，那么就得满足轻量级锁的使用条件，就是没有线程对同一个对象进行锁竞争，我们使用<code>wait</code> 和 <code>notify</code> 来辅助实现</p><ol><li><p>代码 Test19.java，虚拟机参数<code>-XX:BiasedLockingStartupDelay=0</code>确保我们的程序最开始使用了偏向锁！</p></li><li><p>输出结果，最开始使用的是偏向锁，但是第二个线程尝试获取对象锁时，发现本来对象偏向的是线程一，那么偏向锁就会失效，加的就是轻量级锁</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">biasedLockFlag</span> <span class="string">(1bit): 1</span></span><br><span class="line"><span class="attr">LockFlag</span> <span class="string">(2bit): 01</span></span><br><span class="line"><span class="attr">biasedLockFlag</span> <span class="string">(1bit): 1</span></span><br><span class="line"><span class="attr">LockFlag</span> <span class="string">(2bit): 01</span></span><br><span class="line"><span class="attr">biasedLockFlag</span> <span class="string">(1bit): 1</span></span><br><span class="line"><span class="attr">LockFlag</span> <span class="string">(2bit): 01</span></span><br><span class="line"><span class="attr">biasedLockFlag</span> <span class="string">(1bit): 1</span></span><br><span class="line"><span class="attr">LockFlag</span> <span class="string">(2bit): 01</span></span><br><span class="line"><span class="attr">LockFlag</span> <span class="string">(2bit): 00</span></span><br><span class="line"><span class="attr">biasedLockFlag</span> <span class="string">(1bit): 0</span></span><br><span class="line"><span class="attr">LockFlag</span> <span class="string">(2bit): 01</span></span><br></pre></td></tr></table></figure></li></ol><h5 id="撤销-调用-wait-x2F-notify"><a href="#撤销-调用-wait-x2F-notify" class="headerlink" title="撤销 - 调用 wait&#x2F;notify"></a>撤销 - 调用 wait&#x2F;notify</h5><p>会使对象的锁变成重量级锁，因为wait&#x2F;notify方法之后重量级锁才支持</p><h5 id="批量重偏向"><a href="#批量重偏向" class="headerlink" title="批量重偏向"></a>批量重偏向</h5><p>如果对象被多个线程访问，但是没有竞争，这时候偏向了线程一的对象又有机会重新偏向线程二，即可以不用升级为轻量级锁，可这和我们之前做的实验矛盾了呀，其实要实现重新偏向是要有条件的：就是超过20对象对同一个线程如线程一撤销偏向时，那么第20个及以后的对象才可以将撤销对线程一的偏向这个动作变为将第20个及以后的对象偏向线程二。Test21.java</p><h2 id="6-wait和notify"><a href="#6-wait和notify" class="headerlink" title="6. wait和notify"></a>6. wait和notify</h2><p>建议先看看wait和notify方法的javadoc文档</p><h3 id="同步模式之保护性暂停"><a href="#同步模式之保护性暂停" class="headerlink" title="同步模式之保护性暂停"></a>同步模式之保护性暂停</h3><p>即 Guarded Suspension，用在一个线程等待另一个线程的执行结果，要点：</p><ol><li>有一个结果需要从一个线程传递到另一个线程，让他们关联同一个 GuardedObject</li><li>如果有结果不断从一个线程到另一个线程那么可以使用消息队列（见生产者&#x2F;消费者）</li><li>JDK 中，join 的实现、Future 的实现，采用的就是此模式</li><li>因为要等待另一方的结果，因此归类到同步模式</li></ol><p>代码：Test22.java    Test23.java这是带超时时间的</p><p><img src="/assets/1594473284105.png" alt="1594473284105"></p><p>Test23.java中jiang’dao’de关于超时的增强，在join(long millis) 的源码中得到了体现：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">join</span><span class="params">(<span class="type">long</span> millis)</span></span><br><span class="line"><span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">base</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="type">long</span> <span class="variable">now</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (millis &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;timeout value is negative&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (millis == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (isAlive()) &#123;</span><br><span class="line">            wait(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// join一个指定的时间</span></span><br><span class="line">        <span class="keyword">while</span> (isAlive()) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">delay</span> <span class="operator">=</span> millis - now;</span><br><span class="line">            <span class="keyword">if</span> (delay &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            wait(delay);</span><br><span class="line">            now = System.currentTimeMillis() - base;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多任务版 GuardedObject图中 Futures 就好比居民楼一层的信箱（每个信箱有房间编号），左侧的 t0，t2，t4 就好比等待邮件的居民，右侧的 t1，t3，t5 就好比邮递员如果需要在多个类之间使用 GuardedObject 对象，作为参数传递不是很方便，因此设计一个用来解耦的中间类，这样不仅能够解耦【结果等待者】和【结果生产者】，还能够同时支持多个任务的管理。和生产者消费者模式的区别就是：这个生产者和消费者之间是一一对应的关系，但是生产者消费者模式并不是。rpc框架的调用中就使用到了这种模式。  Test24.java</p><p><img src="/assets/1594518049426.png" alt="1594518049426"></p><h3 id="异步模式之生产者-x2F-消费者"><a href="#异步模式之生产者-x2F-消费者" class="headerlink" title="异步模式之生产者&#x2F;消费者"></a>异步模式之生产者&#x2F;消费者</h3><p>要点</p><ol><li>与前面的保护性暂停中的 GuardObject 不同，不需要产生结果和消费结果的线程一一对应</li><li>消费队列可以用来平衡生产和消费的线程资源</li><li>生产者仅负责产生结果数据，不关心数据该如何处理，而消费者专心处理结果数据</li><li>消息队列是有容量限制的，满时不会再加入数据，空时不会再消耗数据</li><li>JDK 中各种<a href="https://blog.csdn.net/yanpenglei/article/details/79556591">阻塞队列</a>，采用的就是这种模式</li></ol><p>“异步”的意思就是生产者产生消息之后消息没有被立刻消费，而“同步模式”中，消息在产生之后被立刻消费了。</p><p><img src="/assets/1594524622020.png" alt="1594524622020"></p><p>我们写一个线程间通信的消息队列，要注意区别，像rabbit mq等消息框架是进程间通信的。</p><h2 id="7-park-amp-unpack"><a href="#7-park-amp-unpack" class="headerlink" title="7. park &amp; unpack"></a>7. park &amp; unpack</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>它们是 LockSupport 类中的方法   Test26.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 暂停当前线程</span></span><br><span class="line">LockSupport.park();</span><br><span class="line"><span class="comment">// 恢复某个线程的运行</span></span><br><span class="line">LockSupport.unpark;</span><br></pre></td></tr></table></figure><h3 id="park-unpark-原理"><a href="#park-unpark-原理" class="headerlink" title="park unpark 原理"></a>park unpark 原理</h3><p>每个线程都有自己的一个 Parker 对象，由三部分组成 _counter， _cond和 _mutex</p><ol><li>打个比喻线程就像一个旅人，Parker 就像他随身携带的背包，条件变量 _ cond就好比背包中的帐篷。_counter 就好比背包中的备用干粮（0 为耗尽，1 为充足）</li><li>调用 park 就是要看需不需要停下来歇息<ol><li>如果备用干粮耗尽，那么钻进帐篷歇息</li><li>如果备用干粮充足，那么不需停留，继续前进</li></ol></li><li>调用 unpark，就好比令干粮充足<ol><li>如果这时线程还在帐篷，就唤醒让他继续前进</li><li>如果这时线程还在运行，那么下次他调用 park 时，仅是消耗掉备用干粮，不需停留继续前进<ol><li>因为背包空间有限，多次调用 unpark 仅会补充一份备用干粮</li></ol></li></ol></li></ol><p>可以不看例子，直接看实现过程</p><h4 id="先调用park再调用upark的过程"><a href="#先调用park再调用upark的过程" class="headerlink" title="先调用park再调用upark的过程"></a>先调用park再调用upark的过程</h4><p>1.先调用park</p><ol><li>当前线程调用 Unsafe.park() 方法</li><li>检查 _counter ，本情况为 0，这时，获得 _mutex 互斥锁(mutex对象有个等待队列 _cond)</li><li>线程进入 _cond 条件变量阻塞</li><li>设置 _counter &#x3D; 0</li></ol><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200712133136-910801.png" alt="1594531894163"></p><p>2.调用upark</p><ol><li>调用 Unsafe.unpark(Thread_0) 方法，设置 _counter 为 1</li><li>唤醒 _cond 条件变量中的 Thread_0</li><li>Thread_0 恢复运行</li><li>设置 _counter 为 0</li></ol><p><img src="/assets/1594532057205.png" alt="1594532057205"></p><h4 id="先调用upark再调用park的过程"><a href="#先调用upark再调用park的过程" class="headerlink" title="先调用upark再调用park的过程"></a>先调用upark再调用park的过程</h4><ol><li>调用 Unsafe.unpark(Thread_0) 方法，设置 _counter 为 1</li><li>当前线程调用 Unsafe.park() 方法</li><li>检查 _counter ，本情况为 1，这时线程无需阻塞，继续运行</li><li>设置 _counter 为 0</li></ol><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200712133539-357066.png" alt="1594532135616"></p><h2 id="8-线程状态转换"><a href="#8-线程状态转换" class="headerlink" title="8. 线程状态转换"></a>8. 线程状态转换</h2><p><img src="https://upload-images.jianshu.io/upload_images/4840092-f85e70e2262b7878.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1155" alt="img"></p><ol><li><p>RUNNABLE &lt;–&gt; WAITING</p><ol><li>线程用synchronized(obj)获取了对象锁后<ol><li>调用obj.wait()方法时，t 线程从RUNNABLE –&gt; WAITING</li><li>调用obj.notify()，obj.notifyAll()，t.interrupt()时<ol><li>竞争锁成功，t 线程从WAITING –&gt; RUNNABLE</li><li>竞争锁失败，t 线程从WAITING –&gt; BLOCKED</li></ol></li></ol></li><li>Test27.java</li></ol></li><li><p>RUNNABLE &lt;–&gt; WAITING</p><ol><li>当前线程调用 LockSupport.park() 方法会让当前线程从 RUNNABLE –&gt; WAITING</li><li>调用 LockSupport.unpark(目标线程) 或调用了线程 的 interrupt() ，会让目标线程从 WAITING –&gt;<br>RUNNABLE</li></ol></li><li><p>RUNNABLE &lt;–&gt; WAITING</p><ol><li>当前线程调用 t.join() 方法时，当前线程从 RUNNABLE –&gt; WAITING<br>注意是当前线程在t 线程对象的监视器上等待</li><li>t 线程运行结束，或调用了当前线程的 interrupt() 时，当前线程从 WAITING –&gt; RUNNABLE</li></ol></li><li><p>RUNNABLE &lt;–&gt; TIMED_WAITING</p><p>t 线程用 synchronized(obj) 获取了对象锁后</p><ol><li>调用 obj.wait(long n) 方法时，t 线程从 RUNNABLE –&gt; TIMED_WAITING</li><li>t 线程等待时间超过了 n 毫秒，或调用 obj.notify() ， obj.notifyAll() ， t.interrupt() 时<ol><li>竞争锁成功，t 线程从 TIMED_WAITING –&gt; RUNNABLE</li><li>竞争锁失败，t 线程从 TIMED_WAITING –&gt; BLOCKED</li></ol></li></ol></li><li><p>RUNNABLE &lt;–&gt; TIMED_WAITING</p><ol><li>当前线程调用 t.join(long n) 方法时，当前线程从 RUNNABLE –&gt; TIMED_WAITING<br>注意是当前线程在t 线程对象的监视器上等待</li><li>当前线程等待时间超过了 n 毫秒，或t 线程运行结束，或调用了当前线程的 interrupt() 时，当前线程从<br>TIMED_WAITING –&gt; RUNNABLE</li></ol></li><li><p>RUNNABLE &lt;–&gt; TIMED_WAITING</p><ol><li>当前线程调用 Thread.sleep(long n) ，当前线程从 RUNNABLE –&gt; TIMED_WAITING</li><li>当前线程等待时间超过了 n 毫秒或调用了线程 的 interrupt() ，当前线程从 TIMED_WAITING –&gt; RUNNABLE</li></ol></li><li><p>RUNNABLE &lt;–&gt; TIMED_WAITING</p><ol><li>当前线程调用 LockSupport.parkNanos(long nanos) 或 LockSupport.parkUntil(long millis) 时，当前线<br>程从 RUNNABLE –&gt; TIMED_WAITING</li><li>调用 LockSupport.unpark(目标线程) 或调用了线程 的 interrupt() ，或是等待超时，会让目标线程从<br>TIMED_WAITING–&gt; RUNNABLE</li></ol></li></ol><h2 id="9-活跃性"><a href="#9-活跃性" class="headerlink" title="9. 活跃性"></a>9. 活跃性</h2><p>活跃性相关的一系列问题都可以用ReentrantLock进行解决。</p><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>有这样的情况：一个线程需要同时获取多把锁，这时就容易发生死锁t1 线程获得A对象锁，接下来想获取B对象的锁；t2 线程获得B对象锁，接下来想获取A对象的锁例。Test28.java</p><h3 id="检测死锁"><a href="#检测死锁" class="headerlink" title="检测死锁"></a>检测死锁</h3><p>检测死锁可以使用 jconsole工具；或者使用 jps 定位进程 id，再用 jstack 定位死锁：Test28.java</p><p>下面使用jstack工具进行演示</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\我的项目\JavaLearing\java并发编程\jdk8&gt;jps</span><br><span class="line">1156 RemoteMavenServer36</span><br><span class="line">20452 Test25</span><br><span class="line">9156 Launcher</span><br><span class="line">23544 Jps</span><br><span class="line">23848</span><br><span class="line">22748 Test28</span><br><span class="line"></span><br><span class="line">D:\我的项目\JavaLearing\java并发编程\jdk8&gt;jstack 22748</span><br><span class="line">2020-07-12 18:54:44</span><br><span class="line">Full thread dump Java HotSpot(TM) 64-Bit Server VM (25.211-b12 mixed mode):</span><br><span class="line"></span><br><span class="line">&quot;DestroyJavaVM&quot; #14 prio=5 os_prio=0 tid=0x0000000002a03800 nid=0x5944 waiting on condition [0x0000000000000000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">//................省略了大部分内容.............//</span><br><span class="line">Found one Java-level deadlock:</span><br><span class="line">=============================</span><br><span class="line">&quot;线程二&quot;:</span><br><span class="line">  waiting to lock monitor 0x0000000002afc0e8 (object 0x00000000db9f76d0, a java.lang.Object),</span><br><span class="line">  which is held by &quot;线程1&quot;</span><br><span class="line">&quot;线程1&quot;:</span><br><span class="line">  waiting to lock monitor 0x0000000002afe1e8 (object 0x00000000db9f76e0, a java.lang.Object),</span><br><span class="line">  which is held by &quot;线程二&quot;</span><br><span class="line"></span><br><span class="line">Java stack information for the threads listed above:</span><br><span class="line">===================================================</span><br><span class="line">&quot;线程二&quot;:</span><br><span class="line">        at com.concurrent.test.Test28.lambda$main$1(Test28.java:39)</span><br><span class="line">        - waiting to lock &lt;0x00000000db9f76d0&gt; (a java.lang.Object)</span><br><span class="line">        - locked &lt;0x00000000db9f76e0&gt; (a java.lang.Object)</span><br><span class="line">        at com.concurrent.test.Test28$$Lambda$2/326549596.run(Unknown Source)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:748)</span><br><span class="line">&quot;线程1&quot;:</span><br><span class="line">        at com.concurrent.test.Test28.lambda$main$0(Test28.java:23)</span><br><span class="line">        - waiting to lock &lt;0x00000000db9f76e0&gt; (a java.lang.Object)</span><br><span class="line">        - locked &lt;0x00000000db9f76d0&gt; (a java.lang.Object)</span><br><span class="line">        at com.concurrent.test.Test28$$Lambda$1/1343441044.run(Unknown Source)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:748)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="哲学家就餐问题"><a href="#哲学家就餐问题" class="headerlink" title="哲学家就餐问题"></a>哲学家就餐问题</h3><p><img src="/assets/1594553609905.png" alt="1594553609905"></p><p>有五位哲学家，围坐在圆桌旁。<br>他们只做两件事，思考和吃饭，思考一会吃口饭，吃完饭后接着思考。<br>吃饭时要用两根筷子吃，桌上共有 5 根筷子，每位哲学家左右手边各有一根筷子。<br>如果筷子被身边的人拿着，自己就得等待  Test29.java</p><p>当每个哲学家即线程持有一根筷子时，他们都在等待另一个线程释放锁，因此造成了死锁。这种线程没有按预期结束，执行不下去的情况，归类为【活跃性】问题，除了死锁以外，还有活锁和饥饿者两种情<br>况</p><h3 id="饥饿"><a href="#饥饿" class="headerlink" title="饥饿"></a>饥饿</h3><p>很多教程中把饥饿定义为，一个线程由于优先级太低，始终得不到 CPU 调度执行，也不能够结束，饥饿的情况不易演示，讲读写锁时会涉及饥饿问题下面我讲一下一个线程饥饿的例子，先来看看使用顺序加锁的方式解决之前的死锁问题，就是两个线程对两个不同的对象加锁的时候都使用相同的顺序进行加锁。 但是会产生饥饿问题Test29</p><p><img src="https://gitee.com/gu_chun_bo/picture/raw/master/image/20200712205431-675389.png" alt="1594558469826"></p><p>顺序加锁的解决方案</p><p><img src="/assets/1594558499871.png" alt="1594558499871"></p><h2 id="10-ReentrantLock"><a href="#10-ReentrantLock" class="headerlink" title="10. ReentrantLock"></a>10. ReentrantLock</h2><p>相对于 synchronized 它具备如下特点</p><ol><li>可中断</li><li>可以设置超时时间</li><li>可以设置为公平锁</li><li>支持多个条件变量，即对与不满足条件的线程可以放到不同的集合中等待</li></ol><p>与 synchronized 一样，都支持可重入</p><p>基本语法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取锁</span></span><br><span class="line">reentrantLock.lock();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"> <span class="comment">// 临界区</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"> <span class="comment">// 释放锁</span></span><br><span class="line"> reentrantLock.unlock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="可重入"><a href="#可重入" class="headerlink" title="可重入"></a>可重入</h3><p>可重入是指同一个线程如果首次获得了这把锁，那么因为它是这把锁的拥有者，因此有权利再次获取这把锁如果是不可重入锁，那么第二次获得锁时，自己也会被锁挡住</p><h3 id="可打断"><a href="#可打断" class="headerlink" title="可打断"></a>可打断</h3><p>直接看例子：Test31.java</p><h3 id="锁超时"><a href="#锁超时" class="headerlink" title="锁超时"></a>锁超时</h3><p>直接看例子：Test32.java</p><p>使用锁超时解决哲学家就餐死锁问题：Test33.java</p><h3 id="公平锁"><a href="#公平锁" class="headerlink" title="公平锁"></a>公平锁</h3><p>synchronized锁中，在entrylist等待的锁在竞争时不是按照先到先得来获取锁的，所以说synchronized锁时不公平的；ReentranLock锁默认是不公平的，但是可以通过设置实现公平锁。本意是为了解决之前提到的饥饿问题，但是公平锁一般没有必要，会降低并发度，使用trylock也可以实现。</p><h3 id="条件变量"><a href="#条件变量" class="headerlink" title="条件变量"></a>条件变量</h3><p>synchronized 中也有条件变量，就是我们讲原理时那个 waitSet 休息室，当条件不满足时进入 waitSet 等待<br>ReentrantLock 的条件变量比 synchronized 强大之处在于，它是支持多个条件变量的，这就好比</p><ol><li>synchronized 是那些不满足条件的线程都在一间休息室等消息</li><li>而 ReentrantLock 支持多间休息室，有专门等烟的休息室、专门等早餐的休息室、唤醒时也是按休息室来唤<br>醒</li></ol><p>使用要点：  Test34.java</p><ol><li>await 前需要获得锁</li><li>await 执行后，会释放锁，进入 conditionObject 等待</li><li>await 的线程被唤醒（或打断、或超时）取重新竞争 lock 锁，执行唤醒的线程爷必须先获得锁</li><li>竞争 lock 锁成功后，从 await 后继续执行</li></ol><h3 id="同步模式之顺序控制"><a href="#同步模式之顺序控制" class="headerlink" title="同步模式之顺序控制"></a>同步模式之顺序控制</h3><ol><li>固定运行顺序，比如，必须先 2 后 1 打印<ol><li>wait notify 版  Test35.java</li><li>Park Unpark 版  Test36.java</li></ol></li><li>交替输出，线程 1 输出 a 5 次，线程 2 输出 b 5 次，线程 3 输出 c 5 次。现在要求输出 abcabcabcabcabc 怎么实现<ol><li>wait notify 版   Test37.java</li><li>Lock 条件变量版 Test38.java</li><li>Park Unpark 版 Test39.java</li></ol></li></ol><h2 id="本章小结"><a href="#本章小结" class="headerlink" title="本章小结"></a>本章小结</h2><p>本章我们需要重点掌握的是</p><ol><li>分析多线程访问共享资源时，哪些代码片段属于临界区</li><li>使用 synchronized 互斥解决临界区的线程安全问题<ol><li>掌握 synchronized 锁对象语法</li><li>掌握 synchronzied 加载成员方法和静态方法语法</li><li>掌握 wait&#x2F;notify 同步方法</li></ol></li><li>使用 lock 互斥解决临界区的线程安全问题<br>掌握 lock 的使用细节：可打断、锁超时、公平锁、条件变量</li><li>学会分析变量的线程安全性、掌握常见线程安全类的使用</li><li>了解线程活跃性问题：死锁、活锁、饥饿</li><li>应用方面<ol><li><strong>互斥：使用 synchronized 或 Lock 达到共享资源互斥效果，实现原子性效果，保证线程安全。</strong></li><li><strong>同步：使用 wait&#x2F;notify 或 Lock 的条件变量来达到线程间通信效果。</strong></li></ol></li><li>原理方面<ol><li>monitor、synchronized 、wait&#x2F;notify 原理</li><li>synchronized 进阶原理</li><li>park &amp; unpark 原理</li></ol></li><li>模式方面<ol><li>同步模式之保护性暂停</li><li>异步模式之生产者消费者</li><li>同步模式之顺序控制</li></ol></li></ol><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ol><li>集合并发遇到的报错  Test24.java   <a href="https://www.cnblogs.com/snowater/p/8024776.html">参考博客，未看</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;线程与进程&quot;&gt;&lt;a href=&quot;#线程与进程&quot; class=&quot;headerlink&quot; title=&quot;线程与进程&quot;&gt;&lt;/a&gt;线程与进程&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;转载自：&lt;a href=&quot;https://gitee.com/gu_chun_bo/jav</summary>
      
    
    
    
    <category term="多线程" scheme="http://example.com/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
    <category term="多线程" scheme="http://example.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    <category term="进程" scheme="http://example.com/tags/%E8%BF%9B%E7%A8%8B/"/>
    
  </entry>
  
</feed>
